// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/trackgate/ext_track.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExtTrack struct {
	TrackName string   `protobuf:"bytes,1,opt,name=trackName,proto3" json:"trackName,omitempty"`
	TrackId   string   `protobuf:"bytes,2,opt,name=trackId,proto3" json:"trackId,omitempty"`
	TrackKey  string   `protobuf:"bytes,3,opt,name=trackKey,proto3" json:"trackKey,omitempty"`
	Version   string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Schema    []byte   `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Creators  []string `protobuf:"bytes,6,rep,name=creators,proto3" json:"creators,omitempty"`
}

func (m *ExtTrack) Reset()         { *m = ExtTrack{} }
func (m *ExtTrack) String() string { return proto.CompactTextString(m) }
func (*ExtTrack) ProtoMessage()    {}
func (*ExtTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab903ff363c6e723, []int{0}
}
func (m *ExtTrack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtTrack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtTrack.Merge(m, src)
}
func (m *ExtTrack) XXX_Size() int {
	return m.Size()
}
func (m *ExtTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtTrack.DiscardUnknown(m)
}

var xxx_messageInfo_ExtTrack proto.InternalMessageInfo

func (m *ExtTrack) GetTrackName() string {
	if m != nil {
		return m.TrackName
	}
	return ""
}

func (m *ExtTrack) GetTrackId() string {
	if m != nil {
		return m.TrackId
	}
	return ""
}

func (m *ExtTrack) GetTrackKey() string {
	if m != nil {
		return m.TrackKey
	}
	return ""
}

func (m *ExtTrack) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ExtTrack) GetSchema() []byte {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *ExtTrack) GetCreators() []string {
	if m != nil {
		return m.Creators
	}
	return nil
}

func init() {
	proto.RegisterType((*ExtTrack)(nil), "junction.trackgate.ExtTrack")
}

func init() {
	proto.RegisterFile("junction/trackgate/ext_track.proto", fileDescriptor_ab903ff363c6e723)
}

var fileDescriptor_ab903ff363c6e723 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xca, 0x2a, 0xcd, 0x4b,
	0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x29, 0x4a, 0x4c, 0xce, 0x4e, 0x4f, 0x2c, 0x49, 0xd5, 0x4f,
	0xad, 0x28, 0x89, 0x07, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x60, 0x6a, 0xf4,
	0xe0, 0x6a, 0x94, 0xd6, 0x30, 0x72, 0x71, 0xb8, 0x56, 0x94, 0x84, 0x80, 0x04, 0x84, 0x64, 0xb8,
	0x38, 0xc1, 0x32, 0x7e, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x08, 0x01,
	0x21, 0x09, 0x2e, 0x76, 0x30, 0xc7, 0x33, 0x45, 0x82, 0x09, 0x2c, 0x07, 0xe3, 0x0a, 0x49, 0x71,
	0x71, 0x80, 0x99, 0xde, 0xa9, 0x95, 0x12, 0xcc, 0x60, 0x29, 0x38, 0x1f, 0xa4, 0xab, 0x2c, 0xb5,
	0xa8, 0x38, 0x33, 0x3f, 0x4f, 0x82, 0x05, 0xa2, 0x0b, 0xca, 0x15, 0x12, 0xe3, 0x62, 0x2b, 0x4e,
	0xce, 0x48, 0xcd, 0x4d, 0x94, 0x60, 0x55, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0xf2, 0x40, 0xa6, 0x25,
	0x17, 0xa5, 0x26, 0x96, 0xe4, 0x17, 0x15, 0x4b, 0xb0, 0x29, 0x30, 0x83, 0x4c, 0x83, 0xf1, 0x9d,
	0x02, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x3c, 0x3d, 0xb3, 0x24,
	0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x31, 0xb3, 0x28, 0x39, 0x23, 0x31, 0x33, 0xaf,
	0x58, 0x37, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x5b, 0x1f, 0x1e, 0x3a, 0x15, 0x48, 0xe1, 0x53,
	0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x1c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xff, 0x4c, 0xdf, 0x3c, 0x42, 0x01, 0x00, 0x00,
}

func (m *ExtTrack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtTrack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtTrack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creators) > 0 {
		for iNdEx := len(m.Creators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Creators[iNdEx])
			copy(dAtA[i:], m.Creators[iNdEx])
			i = encodeVarintExtTrack(dAtA, i, uint64(len(m.Creators[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintExtTrack(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintExtTrack(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TrackKey) > 0 {
		i -= len(m.TrackKey)
		copy(dAtA[i:], m.TrackKey)
		i = encodeVarintExtTrack(dAtA, i, uint64(len(m.TrackKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TrackId) > 0 {
		i -= len(m.TrackId)
		copy(dAtA[i:], m.TrackId)
		i = encodeVarintExtTrack(dAtA, i, uint64(len(m.TrackId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TrackName) > 0 {
		i -= len(m.TrackName)
		copy(dAtA[i:], m.TrackName)
		i = encodeVarintExtTrack(dAtA, i, uint64(len(m.TrackName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtTrack(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtTrack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtTrack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrackName)
	if l > 0 {
		n += 1 + l + sovExtTrack(uint64(l))
	}
	l = len(m.TrackId)
	if l > 0 {
		n += 1 + l + sovExtTrack(uint64(l))
	}
	l = len(m.TrackKey)
	if l > 0 {
		n += 1 + l + sovExtTrack(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovExtTrack(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovExtTrack(uint64(l))
	}
	if len(m.Creators) > 0 {
		for _, s := range m.Creators {
			l = len(s)
			n += 1 + l + sovExtTrack(uint64(l))
		}
	}
	return n
}

func sovExtTrack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtTrack(x uint64) (n int) {
	return sovExtTrack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtTrack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtTrack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtTrack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtTrack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtTrack
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema[:0], dAtA[iNdEx:postIndex]...)
			if m.Schema == nil {
				m.Schema = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creators = append(m.Creators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtTrack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtTrack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtTrack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtTrack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtTrack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtTrack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtTrack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtTrack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtTrack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtTrack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtTrack = fmt.Errorf("proto: unexpected end of group")
)
