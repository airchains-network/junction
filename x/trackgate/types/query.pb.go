// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/trackgate/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetExtTrackStationRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetExtTrackStationRequest) Reset()         { *m = QueryGetExtTrackStationRequest{} }
func (m *QueryGetExtTrackStationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExtTrackStationRequest) ProtoMessage()    {}
func (*QueryGetExtTrackStationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{2}
}
func (m *QueryGetExtTrackStationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExtTrackStationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExtTrackStationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExtTrackStationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExtTrackStationRequest.Merge(m, src)
}
func (m *QueryGetExtTrackStationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExtTrackStationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExtTrackStationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExtTrackStationRequest proto.InternalMessageInfo

func (m *QueryGetExtTrackStationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetExtTrackStationResponse struct {
	Station *ExtTrackStations `protobuf:"bytes,1,opt,name=station,proto3" json:"station,omitempty"`
}

func (m *QueryGetExtTrackStationResponse) Reset()         { *m = QueryGetExtTrackStationResponse{} }
func (m *QueryGetExtTrackStationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExtTrackStationResponse) ProtoMessage()    {}
func (*QueryGetExtTrackStationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{3}
}
func (m *QueryGetExtTrackStationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExtTrackStationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExtTrackStationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExtTrackStationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExtTrackStationResponse.Merge(m, src)
}
func (m *QueryGetExtTrackStationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExtTrackStationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExtTrackStationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExtTrackStationResponse proto.InternalMessageInfo

func (m *QueryGetExtTrackStationResponse) GetStation() *ExtTrackStations {
	if m != nil {
		return m.Station
	}
	return nil
}

type QueryListExtTrackStationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExtTrackStationsRequest) Reset()         { *m = QueryListExtTrackStationsRequest{} }
func (m *QueryListExtTrackStationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListExtTrackStationsRequest) ProtoMessage()    {}
func (*QueryListExtTrackStationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{4}
}
func (m *QueryListExtTrackStationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExtTrackStationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExtTrackStationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExtTrackStationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExtTrackStationsRequest.Merge(m, src)
}
func (m *QueryListExtTrackStationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExtTrackStationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExtTrackStationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExtTrackStationsRequest proto.InternalMessageInfo

func (m *QueryListExtTrackStationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListExtTrackStationsResponse struct {
	StationsList []ExtTrackStations  `protobuf:"bytes,1,rep,name=stationsList,proto3" json:"stationsList"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExtTrackStationsResponse) Reset()         { *m = QueryListExtTrackStationsResponse{} }
func (m *QueryListExtTrackStationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListExtTrackStationsResponse) ProtoMessage()    {}
func (*QueryListExtTrackStationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{5}
}
func (m *QueryListExtTrackStationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExtTrackStationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExtTrackStationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExtTrackStationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExtTrackStationsResponse.Merge(m, src)
}
func (m *QueryListExtTrackStationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExtTrackStationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExtTrackStationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExtTrackStationsResponse proto.InternalMessageInfo

func (m *QueryListExtTrackStationsResponse) GetStationsList() []ExtTrackStations {
	if m != nil {
		return m.StationsList
	}
	return nil
}

func (m *QueryListExtTrackStationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRetrieveSchemaKeyRequest struct {
	ExtTrackStationId string `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
	SchemaVersion     string `protobuf:"bytes,2,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *QueryRetrieveSchemaKeyRequest) Reset()         { *m = QueryRetrieveSchemaKeyRequest{} }
func (m *QueryRetrieveSchemaKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveSchemaKeyRequest) ProtoMessage()    {}
func (*QueryRetrieveSchemaKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{6}
}
func (m *QueryRetrieveSchemaKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveSchemaKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveSchemaKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveSchemaKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveSchemaKeyRequest.Merge(m, src)
}
func (m *QueryRetrieveSchemaKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveSchemaKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveSchemaKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveSchemaKeyRequest proto.InternalMessageInfo

func (m *QueryRetrieveSchemaKeyRequest) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

func (m *QueryRetrieveSchemaKeyRequest) GetSchemaVersion() string {
	if m != nil {
		return m.SchemaVersion
	}
	return ""
}

type QueryRetrieveSchemaKeyResponse struct {
	SchemaKey string `protobuf:"bytes,1,opt,name=schemaKey,proto3" json:"schemaKey,omitempty"`
}

func (m *QueryRetrieveSchemaKeyResponse) Reset()         { *m = QueryRetrieveSchemaKeyResponse{} }
func (m *QueryRetrieveSchemaKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveSchemaKeyResponse) ProtoMessage()    {}
func (*QueryRetrieveSchemaKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{7}
}
func (m *QueryRetrieveSchemaKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveSchemaKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveSchemaKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveSchemaKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveSchemaKeyResponse.Merge(m, src)
}
func (m *QueryRetrieveSchemaKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveSchemaKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveSchemaKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveSchemaKeyResponse proto.InternalMessageInfo

func (m *QueryRetrieveSchemaKeyResponse) GetSchemaKey() string {
	if m != nil {
		return m.SchemaKey
	}
	return ""
}

type QueryListSchemasRequest struct {
	ExtTrackStationId string             `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
	Pagination        *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListSchemasRequest) Reset()         { *m = QueryListSchemasRequest{} }
func (m *QueryListSchemasRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListSchemasRequest) ProtoMessage()    {}
func (*QueryListSchemasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{8}
}
func (m *QueryListSchemasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListSchemasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListSchemasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListSchemasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListSchemasRequest.Merge(m, src)
}
func (m *QueryListSchemasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListSchemasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListSchemasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListSchemasRequest proto.InternalMessageInfo

func (m *QueryListSchemasRequest) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

func (m *QueryListSchemasRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListSchemasResponse struct {
	Schemas    []ExtTrackSchema    `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListSchemasResponse) Reset()         { *m = QueryListSchemasResponse{} }
func (m *QueryListSchemasResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListSchemasResponse) ProtoMessage()    {}
func (*QueryListSchemasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{9}
}
func (m *QueryListSchemasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListSchemasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListSchemasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListSchemasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListSchemasResponse.Merge(m, src)
}
func (m *QueryListSchemasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListSchemasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListSchemasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListSchemasResponse proto.InternalMessageInfo

func (m *QueryListSchemasResponse) GetSchemas() []ExtTrackSchema {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *QueryListSchemasResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTrackEngagementRequest struct {
	ExtTrackStationId string `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
	PodNumber         uint64 `protobuf:"varint,2,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
}

func (m *QueryGetTrackEngagementRequest) Reset()         { *m = QueryGetTrackEngagementRequest{} }
func (m *QueryGetTrackEngagementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTrackEngagementRequest) ProtoMessage()    {}
func (*QueryGetTrackEngagementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{10}
}
func (m *QueryGetTrackEngagementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTrackEngagementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTrackEngagementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTrackEngagementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTrackEngagementRequest.Merge(m, src)
}
func (m *QueryGetTrackEngagementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTrackEngagementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTrackEngagementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTrackEngagementRequest proto.InternalMessageInfo

func (m *QueryGetTrackEngagementRequest) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

func (m *QueryGetTrackEngagementRequest) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

type QueryGetTrackEngagementResponse struct {
	Engagement *ExtTrackSchemaEngagement `protobuf:"bytes,1,opt,name=engagement,proto3" json:"engagement,omitempty"`
}

func (m *QueryGetTrackEngagementResponse) Reset()         { *m = QueryGetTrackEngagementResponse{} }
func (m *QueryGetTrackEngagementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTrackEngagementResponse) ProtoMessage()    {}
func (*QueryGetTrackEngagementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{11}
}
func (m *QueryGetTrackEngagementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTrackEngagementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTrackEngagementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTrackEngagementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTrackEngagementResponse.Merge(m, src)
}
func (m *QueryGetTrackEngagementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTrackEngagementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTrackEngagementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTrackEngagementResponse proto.InternalMessageInfo

func (m *QueryGetTrackEngagementResponse) GetEngagement() *ExtTrackSchemaEngagement {
	if m != nil {
		return m.Engagement
	}
	return nil
}

type QueryListTrackEngagementsRequest struct {
	ExtTrackStationId string                      `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
	Pagination        *TrackgatePaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTrackEngagementsRequest) Reset()         { *m = QueryListTrackEngagementsRequest{} }
func (m *QueryListTrackEngagementsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListTrackEngagementsRequest) ProtoMessage()    {}
func (*QueryListTrackEngagementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{12}
}
func (m *QueryListTrackEngagementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTrackEngagementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTrackEngagementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTrackEngagementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTrackEngagementsRequest.Merge(m, src)
}
func (m *QueryListTrackEngagementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTrackEngagementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTrackEngagementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTrackEngagementsRequest proto.InternalMessageInfo

func (m *QueryListTrackEngagementsRequest) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

func (m *QueryListTrackEngagementsRequest) GetPagination() *TrackgatePaginationRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListTrackEngagementsResponse struct {
	Engagements []ExtTrackSchemaEngagement   `protobuf:"bytes,1,rep,name=engagements,proto3" json:"engagements"`
	Pagination  *TrackgatePaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTrackEngagementsResponse) Reset()         { *m = QueryListTrackEngagementsResponse{} }
func (m *QueryListTrackEngagementsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListTrackEngagementsResponse) ProtoMessage()    {}
func (*QueryListTrackEngagementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{13}
}
func (m *QueryListTrackEngagementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTrackEngagementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTrackEngagementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTrackEngagementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTrackEngagementsResponse.Merge(m, src)
}
func (m *QueryListTrackEngagementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTrackEngagementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTrackEngagementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTrackEngagementsResponse proto.InternalMessageInfo

func (m *QueryListTrackEngagementsResponse) GetEngagements() []ExtTrackSchemaEngagement {
	if m != nil {
		return m.Engagements
	}
	return nil
}

func (m *QueryListTrackEngagementsResponse) GetPagination() *TrackgatePaginationResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSchemasRequest struct {
	ExtTrackStationId string `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
	SchemaVersion     string `protobuf:"bytes,2,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *QueryGetSchemasRequest) Reset()         { *m = QueryGetSchemasRequest{} }
func (m *QueryGetSchemasRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemasRequest) ProtoMessage()    {}
func (*QueryGetSchemasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{14}
}
func (m *QueryGetSchemasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemasRequest.Merge(m, src)
}
func (m *QueryGetSchemasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemasRequest proto.InternalMessageInfo

func (m *QueryGetSchemasRequest) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

func (m *QueryGetSchemasRequest) GetSchemaVersion() string {
	if m != nil {
		return m.SchemaVersion
	}
	return ""
}

type QueryGetSchemasResponse struct {
	Schema *ExtTrackSchema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *QueryGetSchemasResponse) Reset()         { *m = QueryGetSchemasResponse{} }
func (m *QueryGetSchemasResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemasResponse) ProtoMessage()    {}
func (*QueryGetSchemasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{15}
}
func (m *QueryGetSchemasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemasResponse.Merge(m, src)
}
func (m *QueryGetSchemasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemasResponse proto.InternalMessageInfo

func (m *QueryGetSchemasResponse) GetSchema() *ExtTrackSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type QueryGetStationMetricsRequest struct {
	ExtTrackStationId string `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
}

func (m *QueryGetStationMetricsRequest) Reset()         { *m = QueryGetStationMetricsRequest{} }
func (m *QueryGetStationMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationMetricsRequest) ProtoMessage()    {}
func (*QueryGetStationMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{16}
}
func (m *QueryGetStationMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationMetricsRequest.Merge(m, src)
}
func (m *QueryGetStationMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationMetricsRequest proto.InternalMessageInfo

func (m *QueryGetStationMetricsRequest) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

type QueryGetStationMetricsResponse struct {
	Metrics *StationMetrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *QueryGetStationMetricsResponse) Reset()         { *m = QueryGetStationMetricsResponse{} }
func (m *QueryGetStationMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationMetricsResponse) ProtoMessage()    {}
func (*QueryGetStationMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ec25c1d0763d669, []int{17}
}
func (m *QueryGetStationMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationMetricsResponse.Merge(m, src)
}
func (m *QueryGetStationMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationMetricsResponse proto.InternalMessageInfo

func (m *QueryGetStationMetricsResponse) GetMetrics() *StationMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "junction.trackgate.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "junction.trackgate.QueryParamsResponse")
	proto.RegisterType((*QueryGetExtTrackStationRequest)(nil), "junction.trackgate.QueryGetExtTrackStationRequest")
	proto.RegisterType((*QueryGetExtTrackStationResponse)(nil), "junction.trackgate.QueryGetExtTrackStationResponse")
	proto.RegisterType((*QueryListExtTrackStationsRequest)(nil), "junction.trackgate.QueryListExtTrackStationsRequest")
	proto.RegisterType((*QueryListExtTrackStationsResponse)(nil), "junction.trackgate.QueryListExtTrackStationsResponse")
	proto.RegisterType((*QueryRetrieveSchemaKeyRequest)(nil), "junction.trackgate.QueryRetrieveSchemaKeyRequest")
	proto.RegisterType((*QueryRetrieveSchemaKeyResponse)(nil), "junction.trackgate.QueryRetrieveSchemaKeyResponse")
	proto.RegisterType((*QueryListSchemasRequest)(nil), "junction.trackgate.QueryListSchemasRequest")
	proto.RegisterType((*QueryListSchemasResponse)(nil), "junction.trackgate.QueryListSchemasResponse")
	proto.RegisterType((*QueryGetTrackEngagementRequest)(nil), "junction.trackgate.QueryGetTrackEngagementRequest")
	proto.RegisterType((*QueryGetTrackEngagementResponse)(nil), "junction.trackgate.QueryGetTrackEngagementResponse")
	proto.RegisterType((*QueryListTrackEngagementsRequest)(nil), "junction.trackgate.QueryListTrackEngagementsRequest")
	proto.RegisterType((*QueryListTrackEngagementsResponse)(nil), "junction.trackgate.QueryListTrackEngagementsResponse")
	proto.RegisterType((*QueryGetSchemasRequest)(nil), "junction.trackgate.QueryGetSchemasRequest")
	proto.RegisterType((*QueryGetSchemasResponse)(nil), "junction.trackgate.QueryGetSchemasResponse")
	proto.RegisterType((*QueryGetStationMetricsRequest)(nil), "junction.trackgate.QueryGetStationMetricsRequest")
	proto.RegisterType((*QueryGetStationMetricsResponse)(nil), "junction.trackgate.QueryGetStationMetricsResponse")
}

func init() { proto.RegisterFile("junction/trackgate/query.proto", fileDescriptor_4ec25c1d0763d669) }

var fileDescriptor_4ec25c1d0763d669 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0xcf, 0x84, 0x92, 0x68, 0x5f, 0xa0, 0x52, 0x86, 0x08, 0x22, 0x2b, 0x6c, 0x82, 0x55, 0xb5,
	0x25, 0x49, 0x6d, 0xb2, 0x0d, 0x42, 0x42, 0xb4, 0xa0, 0x95, 0x92, 0x16, 0xd1, 0xa4, 0xa9, 0x9b,
	0x00, 0xaa, 0x28, 0x2b, 0xef, 0x66, 0xe4, 0xb8, 0xc9, 0xda, 0x5b, 0x8f, 0xb7, 0x24, 0x8a, 0x72,
	0xe1, 0x0b, 0x14, 0x89, 0x2f, 0xc0, 0x0d, 0x4e, 0x88, 0x23, 0x07, 0x8e, 0x48, 0x54, 0x3d, 0x15,
	0x71, 0xe1, 0x02, 0x82, 0x04, 0x89, 0xaf, 0x81, 0x3c, 0x7e, 0x5e, 0xdb, 0xeb, 0xb1, 0xd7, 0xbb,
	0xf4, 0xb2, 0xf2, 0x8e, 0xdf, 0x6f, 0xde, 0xef, 0xf7, 0xfe, 0xcc, 0x1b, 0x43, 0xf5, 0x41, 0xd7,
	0x69, 0xf9, 0xb6, 0xeb, 0xe8, 0xbe, 0x67, 0xb6, 0xf6, 0x2d, 0xd3, 0x67, 0xfa, 0xc3, 0x2e, 0xf3,
	0x8e, 0xb4, 0x8e, 0xe7, 0xfa, 0x2e, 0xa5, 0xd1, 0x7b, 0xad, 0xf7, 0x5e, 0x99, 0x36, 0xdb, 0xb6,
	0xe3, 0xea, 0xe2, 0x37, 0x34, 0x53, 0x66, 0x2c, 0xd7, 0x72, 0xc5, 0xa3, 0x1e, 0x3c, 0xe1, 0xea,
	0x9c, 0xe5, 0xba, 0xd6, 0x01, 0xd3, 0xcd, 0x8e, 0xad, 0x9b, 0x8e, 0xe3, 0xfa, 0x66, 0xb0, 0x13,
	0xc7, 0xb7, 0x8b, 0x2d, 0x97, 0xb7, 0x5d, 0xae, 0x37, 0x4d, 0x8e, 0x3e, 0xf5, 0x47, 0x2b, 0x4d,
	0xe6, 0x9b, 0x2b, 0x7a, 0xc7, 0xb4, 0x6c, 0x47, 0x18, 0xa3, 0xed, 0xbc, 0x84, 0x66, 0xc7, 0xf4,
	0xcc, 0x76, 0xb4, 0xd9, 0x92, 0xc4, 0x80, 0x1d, 0xfa, 0x0d, 0xf1, 0xaf, 0xc1, 0xd3, 0x9e, 0xdf,
	0x2c, 0x36, 0x6e, 0xed, 0xb1, 0xb6, 0x89, 0xa6, 0xab, 0x25, 0x4c, 0x1b, 0xcc, 0xb1, 0x4c, 0x8b,
	0xb5, 0x99, 0xe3, 0x23, 0xea, 0xb2, 0x04, 0x85, 0x1c, 0x1a, 0x6d, 0xe6, 0x7b, 0x76, 0x2b, 0xa2,
	0x72, 0x45, 0x62, 0xd9, 0x7b, 0x6a, 0xf4, 0xc7, 0x41, 0x9d, 0x01, 0x7a, 0x27, 0x88, 0xd4, 0x96,
	0xd0, 0x6e, 0xb0, 0x87, 0x5d, 0xc6, 0x7d, 0x75, 0x1b, 0x5e, 0x49, 0xad, 0xf2, 0x8e, 0xeb, 0x70,
	0x46, 0xaf, 0xc1, 0x44, 0x18, 0xa3, 0x59, 0xb2, 0x40, 0x2e, 0x4f, 0xd5, 0x14, 0x2d, 0x9b, 0x4c,
	0x2d, 0xc4, 0xd4, 0x2b, 0x4f, 0xfe, 0x9c, 0x1f, 0xfb, 0xee, 0xdf, 0x1f, 0x16, 0x89, 0x81, 0x20,
	0xf5, 0x2d, 0xa8, 0x8a, 0x5d, 0x6f, 0x30, 0x7f, 0xed, 0xd0, 0xdf, 0x0e, 0x10, 0x77, 0x43, 0x0d,
	0xe8, 0x97, 0x9e, 0x87, 0x71, 0x7b, 0x57, 0x6c, 0x5e, 0x31, 0xc6, 0xed, 0x5d, 0xd5, 0x84, 0xf9,
	0x5c, 0x04, 0x72, 0xba, 0x0e, 0x93, 0x18, 0x08, 0x24, 0x75, 0x41, 0x46, 0xaa, 0x0f, 0xcd, 0x8d,
	0x08, 0xa4, 0x3e, 0x80, 0x05, 0xe1, 0xe2, 0x96, 0xcd, 0xfd, 0x8c, 0x15, 0xd2, 0x5a, 0x07, 0x88,
	0x03, 0x87, 0x6e, 0x2e, 0x6a, 0x61, 0xb5, 0x69, 0x41, 0xb5, 0x69, 0x61, 0x85, 0x63, 0xb5, 0x69,
	0x5b, 0xa6, 0xc5, 0x10, 0x6b, 0x24, 0x90, 0xea, 0x4f, 0x04, 0xde, 0x28, 0x70, 0x86, 0x8a, 0x36,
	0xe1, 0xa5, 0xa8, 0xbc, 0x02, 0xbb, 0x59, 0xb2, 0xf0, 0x42, 0x59, 0x59, 0xf5, 0x73, 0x41, 0xd4,
	0x8d, 0x14, 0x9e, 0xde, 0x48, 0xb1, 0x1f, 0x17, 0xec, 0x2f, 0x0d, 0x64, 0x1f, 0x92, 0x49, 0xd1,
	0xe7, 0xf0, 0xba, 0x60, 0x6f, 0x04, 0x05, 0xc7, 0x1e, 0xb1, 0xbb, 0xa2, 0x58, 0x3f, 0x62, 0x47,
	0x51, 0x9c, 0x96, 0x61, 0x9a, 0xa5, 0x19, 0x7d, 0x18, 0x65, 0x33, 0xfb, 0x82, 0x5e, 0x80, 0x97,
	0xc3, 0x72, 0xff, 0x98, 0x79, 0x3c, 0xa2, 0x56, 0x31, 0xd2, 0x8b, 0xea, 0x75, 0x2c, 0x1a, 0x89,
	0x53, 0x8c, 0xd7, 0x1c, 0x54, 0x78, 0xb4, 0x88, 0xde, 0xe2, 0x05, 0xf5, 0x31, 0x81, 0xd7, 0x7a,
	0x31, 0x0f, 0xc1, 0x7c, 0x34, 0xbe, 0xeb, 0x92, 0x38, 0x8e, 0x52, 0x05, 0xdf, 0x12, 0x98, 0xcd,
	0x32, 0x42, 0x31, 0x75, 0x98, 0x0c, 0xb9, 0x73, 0xcc, 0xbb, 0x5a, 0x98, 0x77, 0x61, 0x8a, 0x59,
	0x8f, 0x80, 0xcf, 0x2f, 0xe1, 0x07, 0x71, 0xc3, 0x0a, 0x77, 0x6b, 0xbd, 0x63, 0x69, 0xb4, 0x08,
	0xce, 0x41, 0xa5, 0xe3, 0xee, 0x6e, 0x76, 0xdb, 0x4d, 0xe6, 0x09, 0x5e, 0xe7, 0x8c, 0x78, 0x41,
	0x75, 0xe3, 0x66, 0xcf, 0x78, 0xc3, 0xe8, 0xdc, 0x02, 0x88, 0x8f, 0x46, 0x6c, 0xc4, 0xe5, 0xc1,
	0x01, 0x4a, 0xec, 0x94, 0xc0, 0xab, 0xdf, 0x90, 0x44, 0xef, 0xf7, 0xb9, 0x1c, 0xb1, 0x46, 0x36,
	0x25, 0xa1, 0xd7, 0x64, 0x04, 0xb7, 0xa3, 0xa7, 0xad, 0x9e, 0xb9, 0xac, 0x56, 0x9e, 0x26, 0x4f,
	0x8c, 0x2c, 0x45, 0x0c, 0xcb, 0x36, 0x4c, 0xc5, 0xb2, 0xa2, 0xc2, 0x19, 0x2a, 0x2e, 0x58, 0x42,
	0xc9, 0x6d, 0xe8, 0x6d, 0x89, 0x16, 0xbd, 0xb4, 0x16, 0x69, 0x39, 0xbd, 0x1a, 0x25, 0xf8, 0x7f,
	0x35, 0x62, 0xb9, 0x83, 0x63, 0x07, 0xfb, 0x3e, 0xe9, 0x0d, 0xe3, 0xf5, 0x2e, 0x4c, 0x84, 0xb6,
	0x58, 0x42, 0x25, 0x7a, 0xcc, 0x40, 0x84, 0xba, 0x81, 0x87, 0x60, 0xb0, 0x6d, 0xc8, 0x68, 0x23,
	0x9c, 0xbf, 0x23, 0x69, 0x51, 0x3f, 0x8f, 0x5b, 0xac, 0x7f, 0x3b, 0x24, 0xfb, 0x1e, 0x4c, 0xe2,
	0x84, 0x2f, 0x62, 0xdb, 0x07, 0x8e, 0x20, 0xb5, 0xef, 0xcf, 0xc3, 0x8b, 0xc2, 0x01, 0x7d, 0x4c,
	0x60, 0x22, 0x9c, 0xcd, 0xf4, 0xa2, 0x6c, 0x87, 0xec, 0x35, 0x40, 0xb9, 0x34, 0xd0, 0x2e, 0xe4,
	0xa8, 0xae, 0x7e, 0xf9, 0xdb, 0x3f, 0x5f, 0x8f, 0x6b, 0x74, 0x59, 0x37, 0x6d, 0xaf, 0xb5, 0x67,
	0xda, 0x0e, 0xbf, 0xe2, 0x30, 0xff, 0x0b, 0xd7, 0xdb, 0xd7, 0x73, 0x2f, 0x5a, 0xf4, 0x17, 0x02,
	0x34, 0x3b, 0xd9, 0x69, 0x2d, 0xd7, 0x6b, 0xee, 0xc5, 0x41, 0xb9, 0x3a, 0x14, 0x06, 0x59, 0xdf,
	0x14, 0xac, 0xeb, 0xf4, 0x83, 0x72, 0xac, 0x2d, 0xe6, 0x37, 0x32, 0x37, 0x40, 0xfd, 0xd8, 0xde,
	0x3d, 0xa1, 0x4f, 0x09, 0xcc, 0xc8, 0x66, 0x3a, 0x5d, 0xcd, 0xe5, 0x55, 0x70, 0xdf, 0x50, 0xde,
	0x1e, 0x12, 0x85, 0x7a, 0xd6, 0x84, 0x9e, 0xf7, 0xe9, 0xb5, 0x72, 0x7a, 0x0e, 0x6c, 0x2e, 0x11,
	0xc4, 0xe9, 0xdf, 0x04, 0xa6, 0x33, 0xd3, 0x96, 0xae, 0xe4, 0x72, 0xca, 0xbb, 0x0e, 0x28, 0xb5,
	0x61, 0x20, 0xa8, 0x81, 0x09, 0x0d, 0x0d, 0x7a, 0xbf, 0x9c, 0x06, 0x0f, 0x37, 0x8a, 0x2e, 0xce,
	0xfb, 0xec, 0x48, 0x3f, 0xce, 0x74, 0xd9, 0x89, 0x7e, 0x9c, 0x3a, 0x1b, 0x4e, 0xe8, 0x8f, 0x04,
	0xa6, 0x12, 0xe3, 0x97, 0x2e, 0x15, 0x46, 0x3c, 0x7d, 0x5a, 0x29, 0xcb, 0xe5, 0x8c, 0x51, 0xd1,
	0xa6, 0x50, 0x74, 0x93, 0xae, 0x0f, 0x91, 0x15, 0x9c, 0xe4, 0x32, 0x29, 0x41, 0x7a, 0x68, 0x76,
	0x44, 0x16, 0x77, 0x8d, 0x7c, 0x7a, 0x17, 0x77, 0x4d, 0xce, 0x0c, 0x56, 0x9b, 0x42, 0xcf, 0x67,
	0xf4, 0x5e, 0xf9, 0xae, 0x09, 0x0b, 0x2c, 0x9e, 0x2d, 0xf2, 0x14, 0xf5, 0x6e, 0x02, 0x27, 0xf4,
	0x0f, 0xec, 0xa7, 0xfe, 0x89, 0x37, 0xa0, 0x9f, 0x72, 0x66, 0xf8, 0x80, 0x7e, 0xca, 0x1b, 0xab,
	0xea, 0xa7, 0x42, 0xa9, 0x41, 0xb7, 0x86, 0xc8, 0x5c, 0xbf, 0x54, 0x79, 0x0e, 0x7f, 0x26, 0x00,
	0xf1, 0x5c, 0xa2, 0x8b, 0x45, 0x79, 0xe8, 0x2b, 0xbe, 0xa5, 0x52, 0xb6, 0xa8, 0xe0, 0xbe, 0x50,
	0xf0, 0x09, 0xdd, 0x29, 0x9f, 0xab, 0x82, 0xd2, 0xcb, 0x74, 0xd1, 0xaf, 0x04, 0xa6, 0x33, 0x83,
	0xab, 0xe0, 0xa4, 0xc8, 0x9b, 0x99, 0x4a, 0x6d, 0x18, 0x08, 0x6a, 0xdb, 0x11, 0xda, 0x6e, 0xd3,
	0x8d, 0x21, 0xb4, 0xa5, 0xbf, 0x98, 0x65, 0x1a, 0xeb, 0x77, 0x9e, 0x9c, 0x56, 0xc9, 0xb3, 0xd3,
	0x2a, 0xf9, 0xeb, 0xb4, 0x4a, 0xbe, 0x3a, 0xab, 0x8e, 0x3d, 0x3b, 0xab, 0x8e, 0xfd, 0x7e, 0x56,
	0x1d, 0xbb, 0xf7, 0x8e, 0x65, 0xfb, 0x7b, 0xdd, 0xa6, 0xd6, 0x72, 0xdb, 0x45, 0x2e, 0x0f, 0x93,
	0x1f, 0xde, 0x47, 0x1d, 0xc6, 0x9b, 0x13, 0xe2, 0x53, 0xfb, 0xea, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0x62, 0x74, 0x12, 0x1b, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetExtTrackStation items.
	GetExtTrackStation(ctx context.Context, in *QueryGetExtTrackStationRequest, opts ...grpc.CallOption) (*QueryGetExtTrackStationResponse, error)
	// Queries a list of ListExtTrackStations items.
	ListExtTrackStations(ctx context.Context, in *QueryListExtTrackStationsRequest, opts ...grpc.CallOption) (*QueryListExtTrackStationsResponse, error)
	// Queries a list of RetrieveSchemaKey items.
	RetrieveSchemaKey(ctx context.Context, in *QueryRetrieveSchemaKeyRequest, opts ...grpc.CallOption) (*QueryRetrieveSchemaKeyResponse, error)
	// Queries a list of ListSchemas items.
	ListSchemas(ctx context.Context, in *QueryListSchemasRequest, opts ...grpc.CallOption) (*QueryListSchemasResponse, error)
	// Queries a list of GetTrackEngagement items.
	GetTrackEngagement(ctx context.Context, in *QueryGetTrackEngagementRequest, opts ...grpc.CallOption) (*QueryGetTrackEngagementResponse, error)
	// Queries a list of ListTrackEngagements items.
	ListTrackEngagements(ctx context.Context, in *QueryListTrackEngagementsRequest, opts ...grpc.CallOption) (*QueryListTrackEngagementsResponse, error)
	// Queries a list of GetSchemas items.
	GetSchemas(ctx context.Context, in *QueryGetSchemasRequest, opts ...grpc.CallOption) (*QueryGetSchemasResponse, error)
	// Queries a list of GetStationMetrics items.
	GetStationMetrics(ctx context.Context, in *QueryGetStationMetricsRequest, opts ...grpc.CallOption) (*QueryGetStationMetricsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetExtTrackStation(ctx context.Context, in *QueryGetExtTrackStationRequest, opts ...grpc.CallOption) (*QueryGetExtTrackStationResponse, error) {
	out := new(QueryGetExtTrackStationResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/GetExtTrackStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListExtTrackStations(ctx context.Context, in *QueryListExtTrackStationsRequest, opts ...grpc.CallOption) (*QueryListExtTrackStationsResponse, error) {
	out := new(QueryListExtTrackStationsResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/ListExtTrackStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetrieveSchemaKey(ctx context.Context, in *QueryRetrieveSchemaKeyRequest, opts ...grpc.CallOption) (*QueryRetrieveSchemaKeyResponse, error) {
	out := new(QueryRetrieveSchemaKeyResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/RetrieveSchemaKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListSchemas(ctx context.Context, in *QueryListSchemasRequest, opts ...grpc.CallOption) (*QueryListSchemasResponse, error) {
	out := new(QueryListSchemasResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/ListSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTrackEngagement(ctx context.Context, in *QueryGetTrackEngagementRequest, opts ...grpc.CallOption) (*QueryGetTrackEngagementResponse, error) {
	out := new(QueryGetTrackEngagementResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/GetTrackEngagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTrackEngagements(ctx context.Context, in *QueryListTrackEngagementsRequest, opts ...grpc.CallOption) (*QueryListTrackEngagementsResponse, error) {
	out := new(QueryListTrackEngagementsResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/ListTrackEngagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSchemas(ctx context.Context, in *QueryGetSchemasRequest, opts ...grpc.CallOption) (*QueryGetSchemasResponse, error) {
	out := new(QueryGetSchemasResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/GetSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStationMetrics(ctx context.Context, in *QueryGetStationMetricsRequest, opts ...grpc.CallOption) (*QueryGetStationMetricsResponse, error) {
	out := new(QueryGetStationMetricsResponse)
	err := c.cc.Invoke(ctx, "/junction.trackgate.Query/GetStationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetExtTrackStation items.
	GetExtTrackStation(context.Context, *QueryGetExtTrackStationRequest) (*QueryGetExtTrackStationResponse, error)
	// Queries a list of ListExtTrackStations items.
	ListExtTrackStations(context.Context, *QueryListExtTrackStationsRequest) (*QueryListExtTrackStationsResponse, error)
	// Queries a list of RetrieveSchemaKey items.
	RetrieveSchemaKey(context.Context, *QueryRetrieveSchemaKeyRequest) (*QueryRetrieveSchemaKeyResponse, error)
	// Queries a list of ListSchemas items.
	ListSchemas(context.Context, *QueryListSchemasRequest) (*QueryListSchemasResponse, error)
	// Queries a list of GetTrackEngagement items.
	GetTrackEngagement(context.Context, *QueryGetTrackEngagementRequest) (*QueryGetTrackEngagementResponse, error)
	// Queries a list of ListTrackEngagements items.
	ListTrackEngagements(context.Context, *QueryListTrackEngagementsRequest) (*QueryListTrackEngagementsResponse, error)
	// Queries a list of GetSchemas items.
	GetSchemas(context.Context, *QueryGetSchemasRequest) (*QueryGetSchemasResponse, error)
	// Queries a list of GetStationMetrics items.
	GetStationMetrics(context.Context, *QueryGetStationMetricsRequest) (*QueryGetStationMetricsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetExtTrackStation(ctx context.Context, req *QueryGetExtTrackStationRequest) (*QueryGetExtTrackStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtTrackStation not implemented")
}
func (*UnimplementedQueryServer) ListExtTrackStations(ctx context.Context, req *QueryListExtTrackStationsRequest) (*QueryListExtTrackStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtTrackStations not implemented")
}
func (*UnimplementedQueryServer) RetrieveSchemaKey(ctx context.Context, req *QueryRetrieveSchemaKeyRequest) (*QueryRetrieveSchemaKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSchemaKey not implemented")
}
func (*UnimplementedQueryServer) ListSchemas(ctx context.Context, req *QueryListSchemasRequest) (*QueryListSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (*UnimplementedQueryServer) GetTrackEngagement(ctx context.Context, req *QueryGetTrackEngagementRequest) (*QueryGetTrackEngagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackEngagement not implemented")
}
func (*UnimplementedQueryServer) ListTrackEngagements(ctx context.Context, req *QueryListTrackEngagementsRequest) (*QueryListTrackEngagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrackEngagements not implemented")
}
func (*UnimplementedQueryServer) GetSchemas(ctx context.Context, req *QueryGetSchemasRequest) (*QueryGetSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (*UnimplementedQueryServer) GetStationMetrics(ctx context.Context, req *QueryGetStationMetricsRequest) (*QueryGetStationMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationMetrics not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetExtTrackStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExtTrackStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetExtTrackStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/GetExtTrackStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetExtTrackStation(ctx, req.(*QueryGetExtTrackStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListExtTrackStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListExtTrackStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListExtTrackStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/ListExtTrackStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListExtTrackStations(ctx, req.(*QueryListExtTrackStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetrieveSchemaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetrieveSchemaKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetrieveSchemaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/RetrieveSchemaKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetrieveSchemaKey(ctx, req.(*QueryRetrieveSchemaKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/ListSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListSchemas(ctx, req.(*QueryListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTrackEngagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTrackEngagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTrackEngagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/GetTrackEngagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTrackEngagement(ctx, req.(*QueryGetTrackEngagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTrackEngagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListTrackEngagementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTrackEngagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/ListTrackEngagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTrackEngagements(ctx, req.(*QueryListTrackEngagementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/GetSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchemas(ctx, req.(*QueryGetSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.trackgate.Query/GetStationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStationMetrics(ctx, req.(*QueryGetStationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junction.trackgate.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetExtTrackStation",
			Handler:    _Query_GetExtTrackStation_Handler,
		},
		{
			MethodName: "ListExtTrackStations",
			Handler:    _Query_ListExtTrackStations_Handler,
		},
		{
			MethodName: "RetrieveSchemaKey",
			Handler:    _Query_RetrieveSchemaKey_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _Query_ListSchemas_Handler,
		},
		{
			MethodName: "GetTrackEngagement",
			Handler:    _Query_GetTrackEngagement_Handler,
		},
		{
			MethodName: "ListTrackEngagements",
			Handler:    _Query_ListTrackEngagements_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _Query_GetSchemas_Handler,
		},
		{
			MethodName: "GetStationMetrics",
			Handler:    _Query_GetStationMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/trackgate/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetExtTrackStationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExtTrackStationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExtTrackStationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExtTrackStationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExtTrackStationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExtTrackStationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Station != nil {
		{
			size, err := m.Station.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExtTrackStationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExtTrackStationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExtTrackStationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExtTrackStationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExtTrackStationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExtTrackStationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StationsList) > 0 {
		for iNdEx := len(m.StationsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StationsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveSchemaKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveSchemaKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveSchemaKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaVersion) > 0 {
		i -= len(m.SchemaVersion)
		copy(dAtA[i:], m.SchemaVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveSchemaKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveSchemaKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveSchemaKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaKey) > 0 {
		i -= len(m.SchemaKey)
		copy(dAtA[i:], m.SchemaKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListSchemasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListSchemasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListSchemasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListSchemasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListSchemasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListSchemasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTrackEngagementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTrackEngagementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTrackEngagementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTrackEngagementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTrackEngagementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTrackEngagementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Engagement != nil {
		{
			size, err := m.Engagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTrackEngagementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTrackEngagementsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTrackEngagementsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTrackEngagementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTrackEngagementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTrackEngagementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Engagements) > 0 {
		for iNdEx := len(m.Engagements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Engagements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaVersion) > 0 {
		i -= len(m.SchemaVersion)
		copy(dAtA[i:], m.SchemaVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetExtTrackStationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExtTrackStationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Station != nil {
		l = m.Station.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExtTrackStationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExtTrackStationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StationsList) > 0 {
		for _, e := range m.StationsList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRetrieveSchemaKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SchemaVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRetrieveSchemaKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListSchemasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListSchemasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, e := range m.Schemas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTrackEngagementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovQuery(uint64(m.PodNumber))
	}
	return n
}

func (m *QueryGetTrackEngagementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Engagement != nil {
		l = m.Engagement.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTrackEngagementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTrackEngagementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Engagements) > 0 {
		for _, e := range m.Engagements {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SchemaVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExtTrackStationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExtTrackStationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExtTrackStationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExtTrackStationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExtTrackStationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExtTrackStationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Station", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Station == nil {
				m.Station = &ExtTrackStations{}
			}
			if err := m.Station.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExtTrackStationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExtTrackStationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExtTrackStationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExtTrackStationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExtTrackStationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExtTrackStationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationsList = append(m.StationsList, ExtTrackStations{})
			if err := m.StationsList[len(m.StationsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveSchemaKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveSchemaKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveSchemaKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveSchemaKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveSchemaKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveSchemaKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListSchemasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListSchemasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListSchemasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListSchemasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListSchemasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListSchemasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, ExtTrackSchema{})
			if err := m.Schemas[len(m.Schemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTrackEngagementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTrackEngagementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTrackEngagementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTrackEngagementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTrackEngagementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTrackEngagementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Engagement == nil {
				m.Engagement = &ExtTrackSchemaEngagement{}
			}
			if err := m.Engagement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTrackEngagementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTrackEngagementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTrackEngagementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &TrackgatePaginationRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTrackEngagementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTrackEngagementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTrackEngagementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engagements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engagements = append(m.Engagements, ExtTrackSchemaEngagement{})
			if err := m.Engagements[len(m.Engagements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &TrackgatePaginationResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &ExtTrackSchema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &StationMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
