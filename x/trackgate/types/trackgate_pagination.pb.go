// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/trackgate/trackgate_pagination.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrackgatePaginationRequest struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Order  string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *TrackgatePaginationRequest) Reset()         { *m = TrackgatePaginationRequest{} }
func (m *TrackgatePaginationRequest) String() string { return proto.CompactTextString(m) }
func (*TrackgatePaginationRequest) ProtoMessage()    {}
func (*TrackgatePaginationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1b10cb8352c9fe3, []int{0}
}
func (m *TrackgatePaginationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackgatePaginationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackgatePaginationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackgatePaginationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackgatePaginationRequest.Merge(m, src)
}
func (m *TrackgatePaginationRequest) XXX_Size() int {
	return m.Size()
}
func (m *TrackgatePaginationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackgatePaginationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrackgatePaginationRequest proto.InternalMessageInfo

func (m *TrackgatePaginationRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TrackgatePaginationRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TrackgatePaginationRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type TrackgatePaginationResponse struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Order  string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Total  uint64 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *TrackgatePaginationResponse) Reset()         { *m = TrackgatePaginationResponse{} }
func (m *TrackgatePaginationResponse) String() string { return proto.CompactTextString(m) }
func (*TrackgatePaginationResponse) ProtoMessage()    {}
func (*TrackgatePaginationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1b10cb8352c9fe3, []int{1}
}
func (m *TrackgatePaginationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackgatePaginationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackgatePaginationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackgatePaginationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackgatePaginationResponse.Merge(m, src)
}
func (m *TrackgatePaginationResponse) XXX_Size() int {
	return m.Size()
}
func (m *TrackgatePaginationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackgatePaginationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TrackgatePaginationResponse proto.InternalMessageInfo

func (m *TrackgatePaginationResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TrackgatePaginationResponse) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TrackgatePaginationResponse) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *TrackgatePaginationResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*TrackgatePaginationRequest)(nil), "junction.trackgate.TrackgatePaginationRequest")
	proto.RegisterType((*TrackgatePaginationResponse)(nil), "junction.trackgate.TrackgatePaginationResponse")
}

func init() {
	proto.RegisterFile("junction/trackgate/trackgate_pagination.proto", fileDescriptor_e1b10cb8352c9fe3)
}

var fileDescriptor_e1b10cb8352c9fe3 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcd, 0x2a, 0xcd, 0x4b,
	0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x29, 0x4a, 0x4c, 0xce, 0x4e, 0x4f, 0x2c, 0x49, 0x45, 0xb0,
	0xe2, 0x0b, 0x12, 0xd3, 0x33, 0xf3, 0x12, 0x41, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x42, 0x30, 0xe5, 0x7a, 0x70, 0x45, 0x4a, 0x09, 0x5c, 0x52, 0x21, 0x30, 0x4e, 0x00, 0x5c, 0x43,
	0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x18, 0x17, 0x5b, 0x7e, 0x5a, 0x5a, 0x71, 0x6a,
	0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x94, 0x27, 0x24, 0xc2, 0xc5, 0x9a, 0x93, 0x99,
	0x9b, 0x59, 0x22, 0xc1, 0x04, 0x16, 0x86, 0x70, 0x40, 0xa2, 0xf9, 0x45, 0x29, 0xa9, 0x45, 0x12,
	0xcc, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x52, 0x39, 0x97, 0x34, 0x56, 0x1b, 0x8a, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0xa9, 0x61, 0x05, 0x48, 0xb4, 0x24, 0xbf, 0x24, 0x31, 0x47, 0x82, 0x05,
	0xa2, 0x16, 0xcc, 0x71, 0x0a, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28,
	0xf3, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xc4, 0xcc, 0xa2, 0xe4,
	0x8c, 0xc4, 0xcc, 0xbc, 0x62, 0xdd, 0xbc, 0xd4, 0x92, 0xf2, 0xfc, 0xa2, 0x6c, 0x7d, 0x78, 0xa0,
	0x56, 0x20, 0x07, 0x6b, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0x20, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x3b, 0xec, 0x86, 0x5c, 0x79, 0x01, 0x00, 0x00,
}

func (m *TrackgatePaginationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackgatePaginationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackgatePaginationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrackgatePaginationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackgatePaginationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackgatePaginationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintTrackgatePagination(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrackgatePagination(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrackgatePagination(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrackgatePaginationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovTrackgatePagination(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovTrackgatePagination(uint64(m.Limit))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovTrackgatePagination(uint64(l))
	}
	return n
}

func (m *TrackgatePaginationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovTrackgatePagination(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovTrackgatePagination(uint64(m.Limit))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovTrackgatePagination(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovTrackgatePagination(uint64(m.Total))
	}
	return n
}

func sovTrackgatePagination(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrackgatePagination(x uint64) (n int) {
	return sovTrackgatePagination(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrackgatePaginationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackgatePagination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackgatePaginationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackgatePaginationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackgatePagination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackgatePagination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackgatePagination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrackgatePagination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackgatePaginationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackgatePagination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackgatePaginationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackgatePaginationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackgatePagination
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackgatePagination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrackgatePagination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrackgatePagination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrackgatePagination(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrackgatePagination
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrackgatePagination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrackgatePagination
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrackgatePagination
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrackgatePagination
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrackgatePagination        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrackgatePagination          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrackgatePagination = fmt.Errorf("proto: unexpected end of group")
)
