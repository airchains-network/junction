// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/trackgate/ext_track_schema_engagement.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExtTrackSchemaEngagement struct {
	ExtTrackStationId string `protobuf:"bytes,1,opt,name=extTrackStationId,proto3" json:"extTrackStationId,omitempty"`
	EngageBy          string `protobuf:"bytes,2,opt,name=engageBy,proto3" json:"engageBy,omitempty"`
	StateRoot         string `protobuf:"bytes,3,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	PodNumber         uint64 `protobuf:"varint,4,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
	StationName       string `protobuf:"bytes,5,opt,name=stationName,proto3" json:"stationName,omitempty"`
	TrackName         string `protobuf:"bytes,6,opt,name=trackName,proto3" json:"trackName,omitempty"`
	SchemaVersion     string `protobuf:"bytes,7,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
	SchemaKey         string `protobuf:"bytes,8,opt,name=schemaKey,proto3" json:"schemaKey,omitempty"`
	SchemaObject      []byte `protobuf:"bytes,9,opt,name=schemaObject,proto3" json:"schemaObject,omitempty"`
}

func (m *ExtTrackSchemaEngagement) Reset()         { *m = ExtTrackSchemaEngagement{} }
func (m *ExtTrackSchemaEngagement) String() string { return proto.CompactTextString(m) }
func (*ExtTrackSchemaEngagement) ProtoMessage()    {}
func (*ExtTrackSchemaEngagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5a267180dcb0ce3, []int{0}
}
func (m *ExtTrackSchemaEngagement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtTrackSchemaEngagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtTrackSchemaEngagement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtTrackSchemaEngagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtTrackSchemaEngagement.Merge(m, src)
}
func (m *ExtTrackSchemaEngagement) XXX_Size() int {
	return m.Size()
}
func (m *ExtTrackSchemaEngagement) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtTrackSchemaEngagement.DiscardUnknown(m)
}

var xxx_messageInfo_ExtTrackSchemaEngagement proto.InternalMessageInfo

func (m *ExtTrackSchemaEngagement) GetExtTrackStationId() string {
	if m != nil {
		return m.ExtTrackStationId
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetEngageBy() string {
	if m != nil {
		return m.EngageBy
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetStateRoot() string {
	if m != nil {
		return m.StateRoot
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *ExtTrackSchemaEngagement) GetStationName() string {
	if m != nil {
		return m.StationName
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetTrackName() string {
	if m != nil {
		return m.TrackName
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetSchemaVersion() string {
	if m != nil {
		return m.SchemaVersion
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetSchemaKey() string {
	if m != nil {
		return m.SchemaKey
	}
	return ""
}

func (m *ExtTrackSchemaEngagement) GetSchemaObject() []byte {
	if m != nil {
		return m.SchemaObject
	}
	return nil
}

func init() {
	proto.RegisterType((*ExtTrackSchemaEngagement)(nil), "junction.trackgate.ExtTrackSchemaEngagement")
}

func init() {
	proto.RegisterFile("junction/trackgate/ext_track_schema_engagement.proto", fileDescriptor_a5a267180dcb0ce3)
}

var fileDescriptor_a5a267180dcb0ce3 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x4e, 0x32, 0x41,
	0x10, 0xc7, 0x59, 0x3e, 0x3e, 0x84, 0x15, 0x0b, 0xb7, 0xda, 0x18, 0xb3, 0xb9, 0x10, 0x0b, 0x0a,
	0xe5, 0x0a, 0x4d, 0xec, 0x49, 0x28, 0x8c, 0x09, 0xc6, 0xd3, 0x58, 0xd8, 0x90, 0xbd, 0x65, 0x72,
	0x1c, 0xe4, 0x76, 0xc9, 0xee, 0x10, 0xe1, 0x2d, 0x7c, 0x2c, 0x4a, 0x4a, 0x4b, 0x03, 0x2f, 0x62,
	0x6e, 0x4f, 0x0e, 0x88, 0xe5, 0xfc, 0xfe, 0xf3, 0xbb, 0x99, 0xdb, 0xa1, 0x77, 0x93, 0xb9, 0x56,
	0x98, 0x1a, 0x1d, 0xa2, 0x95, 0x6a, 0x9a, 0x48, 0x84, 0x10, 0x16, 0x38, 0xf4, 0xd5, 0xd0, 0xa9,
	0x31, 0x64, 0x72, 0x08, 0x3a, 0x91, 0x09, 0x64, 0xa0, 0xb1, 0x3b, 0xb3, 0x06, 0x0d, 0x63, 0x3b,
	0xab, 0x5b, 0x5a, 0xed, 0x55, 0x95, 0xf2, 0xfe, 0x02, 0x5f, 0x73, 0xf0, 0xe2, 0xbd, 0x7e, 0xa9,
	0xb1, 0x6b, 0x7a, 0x0e, 0xbb, 0x0c, 0x65, 0x6e, 0x3e, 0x8c, 0x38, 0x09, 0x48, 0xa7, 0x19, 0xfd,
	0x0d, 0xd8, 0x05, 0x6d, 0x14, 0x23, 0x7b, 0x4b, 0x5e, 0xf5, 0x4d, 0x65, 0xcd, 0x2e, 0x69, 0xd3,
	0xa1, 0x44, 0x88, 0x8c, 0x41, 0xfe, 0xcf, 0x87, 0x7b, 0x90, 0xa7, 0x33, 0x33, 0x1a, 0xcc, 0xb3,
	0x18, 0x2c, 0xaf, 0x05, 0xa4, 0x53, 0x8b, 0xf6, 0x80, 0x05, 0xf4, 0xd4, 0x15, 0x43, 0x06, 0x32,
	0x03, 0xfe, 0xdf, 0xdb, 0x87, 0x28, 0xf7, 0xfd, 0x1f, 0xf9, 0xbc, 0x5e, 0x7c, 0xbd, 0x04, 0xec,
	0x8a, 0x9e, 0x15, 0x2f, 0xf2, 0x06, 0xd6, 0xa5, 0x46, 0xf3, 0x13, 0xdf, 0x71, 0x0c, 0xfd, 0x86,
	0x1e, 0x3c, 0xc2, 0x92, 0x37, 0x7e, 0x37, 0xdc, 0x01, 0xd6, 0xa6, 0xad, 0xa2, 0x78, 0x8a, 0x27,
	0xa0, 0x90, 0x37, 0x03, 0xd2, 0x69, 0x45, 0x47, 0xac, 0xf7, 0xbc, 0xda, 0x08, 0xb2, 0xde, 0x08,
	0xf2, 0xbd, 0x11, 0xe4, 0x73, 0x2b, 0x2a, 0xeb, 0xad, 0xa8, 0x7c, 0x6d, 0x45, 0xe5, 0xfd, 0x3e,
	0x49, 0x71, 0x3c, 0x8f, 0xbb, 0xca, 0x64, 0xa1, 0x4c, 0xad, 0x1a, 0xcb, 0x54, 0xbb, 0x1b, 0x0d,
	0xf8, 0x61, 0xec, 0x34, 0x2c, 0x6f, 0xb9, 0x38, 0xb8, 0x26, 0x2e, 0x67, 0xe0, 0xe2, 0xba, 0x3f,
	0xdc, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x9c, 0x17, 0x49, 0xf0, 0x01, 0x00, 0x00,
}

func (m *ExtTrackSchemaEngagement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtTrackSchemaEngagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtTrackSchemaEngagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaObject) > 0 {
		i -= len(m.SchemaObject)
		copy(dAtA[i:], m.SchemaObject)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.SchemaObject)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SchemaKey) > 0 {
		i -= len(m.SchemaKey)
		copy(dAtA[i:], m.SchemaKey)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.SchemaKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SchemaVersion) > 0 {
		i -= len(m.SchemaVersion)
		copy(dAtA[i:], m.SchemaVersion)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.SchemaVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrackName) > 0 {
		i -= len(m.TrackName)
		copy(dAtA[i:], m.TrackName)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.TrackName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StationName) > 0 {
		i -= len(m.StationName)
		copy(dAtA[i:], m.StationName)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.StationName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PodNumber != 0 {
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EngageBy) > 0 {
		i -= len(m.EngageBy)
		copy(dAtA[i:], m.EngageBy)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.EngageBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtTrackStationId) > 0 {
		i -= len(m.ExtTrackStationId)
		copy(dAtA[i:], m.ExtTrackStationId)
		i = encodeVarintExtTrackSchemaEngagement(dAtA, i, uint64(len(m.ExtTrackStationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtTrackSchemaEngagement(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtTrackSchemaEngagement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtTrackSchemaEngagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtTrackStationId)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	l = len(m.EngageBy)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovExtTrackSchemaEngagement(uint64(m.PodNumber))
	}
	l = len(m.StationName)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	l = len(m.TrackName)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	l = len(m.SchemaVersion)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	l = len(m.SchemaKey)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	l = len(m.SchemaObject)
	if l > 0 {
		n += 1 + l + sovExtTrackSchemaEngagement(uint64(l))
	}
	return n
}

func sovExtTrackSchemaEngagement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtTrackSchemaEngagement(x uint64) (n int) {
	return sovExtTrackSchemaEngagement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtTrackSchemaEngagement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtTrackSchemaEngagement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtTrackSchemaEngagement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtTrackSchemaEngagement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtTrackStationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtTrackStationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngageBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngageBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaObject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaObject = append(m.SchemaObject[:0], dAtA[iNdEx:postIndex]...)
			if m.SchemaObject == nil {
				m.SchemaObject = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtTrackSchemaEngagement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtTrackSchemaEngagement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtTrackSchemaEngagement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtTrackSchemaEngagement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtTrackSchemaEngagement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtTrackSchemaEngagement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtTrackSchemaEngagement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtTrackSchemaEngagement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtTrackSchemaEngagement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtTrackSchemaEngagement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtTrackSchemaEngagement = fmt.Errorf("proto: unexpected end of group")
)
