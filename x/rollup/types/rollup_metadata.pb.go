// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/rollup/rollup_metadata.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RollupMetadata struct {
	CreatedBy                    string `protobuf:"bytes,1,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	RollupId                     string `protobuf:"bytes,2,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
	RollupLatestBatchNo          uint64 `protobuf:"varint,3,opt,name=rollupLatestBatchNo,proto3" json:"rollupLatestBatchNo,omitempty"`
	RollupLatestFinalizedBatchNo uint64 `protobuf:"varint,4,opt,name=rollupLatestFinalizedBatchNo,proto3" json:"rollupLatestFinalizedBatchNo,omitempty"`
	// rollup genesis data
	Moniker   string   `protobuf:"bytes,5,opt,name=moniker,proto3" json:"moniker,omitempty"`
	ChainId   string   `protobuf:"bytes,6,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DenomName string   `protobuf:"bytes,7,opt,name=denomName,proto3" json:"denomName,omitempty"`
	Keys      []string `protobuf:"bytes,8,rep,name=keys,proto3" json:"keys,omitempty"`
	Supply    []uint64 `protobuf:"varint,9,rep,packed,name=supply,proto3" json:"supply,omitempty"`
	// da data for a rollup
	DaType       string `protobuf:"bytes,10,opt,name=daType,proto3" json:"daType,omitempty"`
	DaLatestHash string `protobuf:"bytes,11,opt,name=daLatestHash,proto3" json:"daLatestHash,omitempty"`
	// prover data for a rollup
	ProverType            string `protobuf:"bytes,12,opt,name=proverType,proto3" json:"proverType,omitempty"`
	ProverVerificationKey []byte `protobuf:"bytes,13,opt,name=proverVerificationKey,proto3" json:"proverVerificationKey,omitempty"`
	ProverEndpoint        string `protobuf:"bytes,14,opt,name=proverEndpoint,proto3" json:"proverEndpoint,omitempty"`
	// FHE data for a rollup
	AclContractAddress     string `protobuf:"bytes,15,opt,name=aclContractAddress,proto3" json:"aclContractAddress,omitempty"`
	KmsVerifierAddress     string `protobuf:"bytes,16,opt,name=kmsVerifierAddress,proto3" json:"kmsVerifierAddress,omitempty"`
	TfheExecutorAddress    string `protobuf:"bytes,17,opt,name=tfheExecutorAddress,proto3" json:"tfheExecutorAddress,omitempty"`
	GatewayContractAddress string `protobuf:"bytes,18,opt,name=gatewayContractAddress,proto3" json:"gatewayContractAddress,omitempty"`
	// junction wasm contract address
	AscContractAddress string `protobuf:"bytes,19,opt,name=ascContractAddress,proto3" json:"ascContractAddress,omitempty"`
	// relayer data
	RelayerGAddress   string `protobuf:"bytes,20,opt,name=relayerGAddress,proto3" json:"relayerGAddress,omitempty"`
	RelayerASCAddress string `protobuf:"bytes,21,opt,name=relayerASCAddress,proto3" json:"relayerASCAddress,omitempty"`
}

func (m *RollupMetadata) Reset()         { *m = RollupMetadata{} }
func (m *RollupMetadata) String() string { return proto.CompactTextString(m) }
func (*RollupMetadata) ProtoMessage()    {}
func (*RollupMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1b462c81aa6e49e, []int{0}
}
func (m *RollupMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupMetadata.Merge(m, src)
}
func (m *RollupMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RollupMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RollupMetadata proto.InternalMessageInfo

func (m *RollupMetadata) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *RollupMetadata) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *RollupMetadata) GetRollupLatestBatchNo() uint64 {
	if m != nil {
		return m.RollupLatestBatchNo
	}
	return 0
}

func (m *RollupMetadata) GetRollupLatestFinalizedBatchNo() uint64 {
	if m != nil {
		return m.RollupLatestFinalizedBatchNo
	}
	return 0
}

func (m *RollupMetadata) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *RollupMetadata) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *RollupMetadata) GetDenomName() string {
	if m != nil {
		return m.DenomName
	}
	return ""
}

func (m *RollupMetadata) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RollupMetadata) GetSupply() []uint64 {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *RollupMetadata) GetDaType() string {
	if m != nil {
		return m.DaType
	}
	return ""
}

func (m *RollupMetadata) GetDaLatestHash() string {
	if m != nil {
		return m.DaLatestHash
	}
	return ""
}

func (m *RollupMetadata) GetProverType() string {
	if m != nil {
		return m.ProverType
	}
	return ""
}

func (m *RollupMetadata) GetProverVerificationKey() []byte {
	if m != nil {
		return m.ProverVerificationKey
	}
	return nil
}

func (m *RollupMetadata) GetProverEndpoint() string {
	if m != nil {
		return m.ProverEndpoint
	}
	return ""
}

func (m *RollupMetadata) GetAclContractAddress() string {
	if m != nil {
		return m.AclContractAddress
	}
	return ""
}

func (m *RollupMetadata) GetKmsVerifierAddress() string {
	if m != nil {
		return m.KmsVerifierAddress
	}
	return ""
}

func (m *RollupMetadata) GetTfheExecutorAddress() string {
	if m != nil {
		return m.TfheExecutorAddress
	}
	return ""
}

func (m *RollupMetadata) GetGatewayContractAddress() string {
	if m != nil {
		return m.GatewayContractAddress
	}
	return ""
}

func (m *RollupMetadata) GetAscContractAddress() string {
	if m != nil {
		return m.AscContractAddress
	}
	return ""
}

func (m *RollupMetadata) GetRelayerGAddress() string {
	if m != nil {
		return m.RelayerGAddress
	}
	return ""
}

func (m *RollupMetadata) GetRelayerASCAddress() string {
	if m != nil {
		return m.RelayerASCAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*RollupMetadata)(nil), "junction.rollup.RollupMetadata")
}

func init() {
	proto.RegisterFile("junction/rollup/rollup_metadata.proto", fileDescriptor_c1b462c81aa6e49e)
}

var fileDescriptor_c1b462c81aa6e49e = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x1c, 0xc5, 0x17, 0x5a, 0xba, 0xd5, 0x94, 0x96, 0x79, 0x6c, 0xb2, 0xd0, 0x14, 0x55, 0x93, 0x40,
	0x39, 0x40, 0x8b, 0xc4, 0xc4, 0x7d, 0x9d, 0x06, 0x4c, 0x40, 0x0f, 0x01, 0x71, 0xe0, 0x82, 0x3c,
	0xfb, 0xbf, 0xd5, 0x34, 0xb1, 0x23, 0xdb, 0x61, 0x0b, 0x9f, 0x82, 0x8f, 0x85, 0x38, 0xed, 0xc8,
	0x11, 0xb5, 0x5f, 0x04, 0xc5, 0x4e, 0xca, 0x68, 0x0b, 0xa7, 0xfa, 0xbd, 0xdf, 0x7b, 0xae, 0xff,
	0x8a, 0x8d, 0x1e, 0x7e, 0xce, 0x25, 0xb3, 0x42, 0xc9, 0xa1, 0x56, 0x49, 0x92, 0x67, 0xd5, 0xcf,
	0xa7, 0x14, 0x2c, 0xe5, 0xd4, 0xd2, 0x41, 0xa6, 0x95, 0x55, 0xb8, 0x57, 0xc7, 0x06, 0x9e, 0x1f,
	0xfc, 0x68, 0xa1, 0x6e, 0xec, 0x96, 0x6f, 0xab, 0x24, 0xde, 0x47, 0x6d, 0xa6, 0x81, 0x5a, 0xe0,
	0xa3, 0x82, 0x04, 0xfd, 0x20, 0x6a, 0xc7, 0x7f, 0x0c, 0xfc, 0x00, 0x6d, 0xf9, 0xea, 0x29, 0x27,
	0xb7, 0x1c, 0x5c, 0x68, 0xfc, 0x14, 0xed, 0xf8, 0xf5, 0x1b, 0x6a, 0xc1, 0xd8, 0x11, 0xb5, 0x6c,
	0x32, 0x56, 0xa4, 0xd1, 0x0f, 0xa2, 0x66, 0xbc, 0x0e, 0xe1, 0x11, 0xda, 0xbf, 0x69, 0xbf, 0x10,
	0x92, 0x26, 0xe2, 0x2b, 0xf0, 0xba, 0xda, 0x74, 0xd5, 0xff, 0x66, 0x30, 0x41, 0x9b, 0xa9, 0x92,
	0x62, 0x0a, 0x9a, 0xdc, 0x76, 0x07, 0xaa, 0x65, 0x49, 0xd8, 0x84, 0x0a, 0x79, 0xca, 0x49, 0xcb,
	0x93, 0x4a, 0x96, 0x33, 0x72, 0x90, 0x2a, 0x1d, 0xd3, 0x14, 0xc8, 0xa6, 0x9f, 0x71, 0x61, 0x60,
	0x8c, 0x9a, 0x53, 0x28, 0x0c, 0xd9, 0xea, 0x37, 0xa2, 0x76, 0xec, 0xd6, 0x78, 0x0f, 0xb5, 0x4c,
	0x9e, 0x65, 0x49, 0x41, 0xda, 0xfd, 0x46, 0xd4, 0x8c, 0x2b, 0x55, 0xfa, 0x9c, 0xbe, 0x2f, 0x32,
	0x20, 0xc8, 0x6d, 0x53, 0x29, 0x7c, 0x80, 0x3a, 0x9c, 0xfa, 0x13, 0xbf, 0xa2, 0x66, 0x42, 0xee,
	0x38, 0xfa, 0x97, 0x87, 0x43, 0x84, 0x32, 0xad, 0xbe, 0x80, 0x76, 0xfd, 0x8e, 0x4b, 0xdc, 0x70,
	0xf0, 0x21, 0xda, 0xf5, 0xea, 0x03, 0x68, 0x71, 0x2e, 0x18, 0x2d, 0xbf, 0xdc, 0x6b, 0x28, 0xc8,
	0xdd, 0x7e, 0x10, 0x75, 0xe2, 0xf5, 0x10, 0x3f, 0x42, 0x5d, 0x0f, 0x4e, 0x24, 0xcf, 0x94, 0x90,
	0x96, 0x74, 0xdd, 0xce, 0x4b, 0x2e, 0x1e, 0x20, 0x4c, 0x59, 0x72, 0xac, 0xa4, 0xd5, 0x94, 0xd9,
	0x23, 0xce, 0x35, 0x18, 0x43, 0x7a, 0x2e, 0xbb, 0x86, 0x94, 0xf9, 0x69, 0x6a, 0xfc, 0xbf, 0x81,
	0xae, 0xf3, 0xf7, 0x7c, 0x7e, 0x95, 0x94, 0xb7, 0xc1, 0x9e, 0x4f, 0xe0, 0xe4, 0x0a, 0x58, 0x6e,
	0xd5, 0xa2, 0xb0, 0xed, 0x0a, 0xeb, 0x10, 0x7e, 0x8e, 0xf6, 0x2e, 0xa8, 0x85, 0x4b, 0x5a, 0x2c,
	0x9f, 0x0a, 0xbb, 0xd2, 0x3f, 0xa8, 0x9b, 0xc4, 0xb0, 0xe5, 0xce, 0x4e, 0x35, 0xc9, 0x0a, 0xc1,
	0x11, 0xea, 0x69, 0x48, 0x68, 0x01, 0xfa, 0x65, 0x1d, 0xbe, 0xef, 0xc2, 0xcb, 0x36, 0x7e, 0x8c,
	0xb6, 0x2b, 0xeb, 0xe8, 0xdd, 0x71, 0x9d, 0xdd, 0x75, 0xd9, 0x55, 0x30, 0x1a, 0x7f, 0x9f, 0x85,
	0xc1, 0xf5, 0x2c, 0x0c, 0x7e, 0xcd, 0xc2, 0xe0, 0xdb, 0x3c, 0xdc, 0xb8, 0x9e, 0x87, 0x1b, 0x3f,
	0xe7, 0xe1, 0xc6, 0xc7, 0xc3, 0x0b, 0x61, 0x27, 0xf9, 0xd9, 0x80, 0xa9, 0x74, 0x48, 0x85, 0x76,
	0xd7, 0xd0, 0x3c, 0x91, 0x60, 0x2f, 0x95, 0x9e, 0x0e, 0x17, 0x6f, 0xf7, 0xaa, 0x7e, 0xbd, 0xb6,
	0xc8, 0xc0, 0x9c, 0xb5, 0xdc, 0xa3, 0x7d, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x6a, 0xe7,
	0xd8, 0xdd, 0x03, 0x00, 0x00,
}

func (m *RollupMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayerASCAddress) > 0 {
		i -= len(m.RelayerASCAddress)
		copy(dAtA[i:], m.RelayerASCAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.RelayerASCAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.RelayerGAddress) > 0 {
		i -= len(m.RelayerGAddress)
		copy(dAtA[i:], m.RelayerGAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.RelayerGAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AscContractAddress) > 0 {
		i -= len(m.AscContractAddress)
		copy(dAtA[i:], m.AscContractAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.AscContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.GatewayContractAddress) > 0 {
		i -= len(m.GatewayContractAddress)
		copy(dAtA[i:], m.GatewayContractAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.GatewayContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.TfheExecutorAddress) > 0 {
		i -= len(m.TfheExecutorAddress)
		copy(dAtA[i:], m.TfheExecutorAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.TfheExecutorAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.KmsVerifierAddress) > 0 {
		i -= len(m.KmsVerifierAddress)
		copy(dAtA[i:], m.KmsVerifierAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.KmsVerifierAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AclContractAddress) > 0 {
		i -= len(m.AclContractAddress)
		copy(dAtA[i:], m.AclContractAddress)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.AclContractAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ProverEndpoint) > 0 {
		i -= len(m.ProverEndpoint)
		copy(dAtA[i:], m.ProverEndpoint)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.ProverEndpoint)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ProverVerificationKey) > 0 {
		i -= len(m.ProverVerificationKey)
		copy(dAtA[i:], m.ProverVerificationKey)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.ProverVerificationKey)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ProverType) > 0 {
		i -= len(m.ProverType)
		copy(dAtA[i:], m.ProverType)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.ProverType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DaLatestHash) > 0 {
		i -= len(m.DaLatestHash)
		copy(dAtA[i:], m.DaLatestHash)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.DaLatestHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DaType) > 0 {
		i -= len(m.DaType)
		copy(dAtA[i:], m.DaType)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.DaType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Supply) > 0 {
		dAtA2 := make([]byte, len(m.Supply)*10)
		var j1 int
		for _, num := range m.Supply {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRollupMetadata(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DenomName) > 0 {
		i -= len(m.DenomName)
		copy(dAtA[i:], m.DenomName)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.DenomName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RollupLatestFinalizedBatchNo != 0 {
		i = encodeVarintRollupMetadata(dAtA, i, uint64(m.RollupLatestFinalizedBatchNo))
		i--
		dAtA[i] = 0x20
	}
	if m.RollupLatestBatchNo != 0 {
		i = encodeVarintRollupMetadata(dAtA, i, uint64(m.RollupLatestBatchNo))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintRollupMetadata(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollupMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollupMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollupMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	if m.RollupLatestBatchNo != 0 {
		n += 1 + sovRollupMetadata(uint64(m.RollupLatestBatchNo))
	}
	if m.RollupLatestFinalizedBatchNo != 0 {
		n += 1 + sovRollupMetadata(uint64(m.RollupLatestFinalizedBatchNo))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.DenomName)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovRollupMetadata(uint64(l))
		}
	}
	if len(m.Supply) > 0 {
		l = 0
		for _, e := range m.Supply {
			l += sovRollupMetadata(uint64(e))
		}
		n += 1 + sovRollupMetadata(uint64(l)) + l
	}
	l = len(m.DaType)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.DaLatestHash)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.ProverType)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.ProverVerificationKey)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.ProverEndpoint)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.AclContractAddress)
	if l > 0 {
		n += 1 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.KmsVerifierAddress)
	if l > 0 {
		n += 2 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.TfheExecutorAddress)
	if l > 0 {
		n += 2 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.GatewayContractAddress)
	if l > 0 {
		n += 2 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.AscContractAddress)
	if l > 0 {
		n += 2 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.RelayerGAddress)
	if l > 0 {
		n += 2 + l + sovRollupMetadata(uint64(l))
	}
	l = len(m.RelayerASCAddress)
	if l > 0 {
		n += 2 + l + sovRollupMetadata(uint64(l))
	}
	return n
}

func sovRollupMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollupMetadata(x uint64) (n int) {
	return sovRollupMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollupMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollupMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupLatestBatchNo", wireType)
			}
			m.RollupLatestBatchNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollupLatestBatchNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupLatestFinalizedBatchNo", wireType)
			}
			m.RollupLatestFinalizedBatchNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollupLatestFinalizedBatchNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRollupMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Supply = append(m.Supply, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRollupMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRollupMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRollupMetadata
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Supply) == 0 {
					m.Supply = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRollupMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Supply = append(m.Supply, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaLatestHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaLatestHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProverType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProverType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProverVerificationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProverVerificationKey = append(m.ProverVerificationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ProverVerificationKey == nil {
				m.ProverVerificationKey = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProverEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProverEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AclContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsVerifierAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsVerifierAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfheExecutorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfheExecutorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AscContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerGAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerGAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerASCAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerASCAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollupMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollupMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollupMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollupMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollupMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollupMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollupMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollupMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollupMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollupMetadata = fmt.Errorf("proto: unexpected end of group")
)
