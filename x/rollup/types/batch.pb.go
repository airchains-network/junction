// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/rollup/batch.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Batch struct {
	Submitter              string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty"`
	RollupId               string `protobuf:"bytes,2,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
	BatchNo                uint64 `protobuf:"varint,3,opt,name=batchNo,proto3" json:"batchNo,omitempty"`
	MerkleRootHash         string `protobuf:"bytes,4,opt,name=merkleRootHash,proto3" json:"merkleRootHash,omitempty"`
	PreviousMerkleRootHash string `protobuf:"bytes,5,opt,name=previousMerkleRootHash,proto3" json:"previousMerkleRootHash,omitempty"`
	// prover data for a batch
	ZkProof       []byte `protobuf:"bytes,6,opt,name=zkProof,proto3" json:"zkProof,omitempty"`
	PublicWitness []byte `protobuf:"bytes,7,opt,name=publicWitness,proto3" json:"publicWitness,omitempty"`
	// da data for a batch
	Timestamp    string `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DaName       string `protobuf:"bytes,9,opt,name=daName,proto3" json:"daName,omitempty"`
	DaCommitment string `protobuf:"bytes,10,opt,name=daCommitment,proto3" json:"daCommitment,omitempty"`
	DaHash       string `protobuf:"bytes,11,opt,name=daHash,proto3" json:"daHash,omitempty"`
	DaPointer    string `protobuf:"bytes,12,opt,name=daPointer,proto3" json:"daPointer,omitempty"`
	DaNamespace  string `protobuf:"bytes,13,opt,name=daNamespace,proto3" json:"daNamespace,omitempty"`
	IsFinalized  bool   `protobuf:"varint,14,opt,name=isFinalized,proto3" json:"isFinalized,omitempty"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_07eff5b06b88c13a, []int{0}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

func (m *Batch) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *Batch) GetBatchNo() uint64 {
	if m != nil {
		return m.BatchNo
	}
	return 0
}

func (m *Batch) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *Batch) GetPreviousMerkleRootHash() string {
	if m != nil {
		return m.PreviousMerkleRootHash
	}
	return ""
}

func (m *Batch) GetZkProof() []byte {
	if m != nil {
		return m.ZkProof
	}
	return nil
}

func (m *Batch) GetPublicWitness() []byte {
	if m != nil {
		return m.PublicWitness
	}
	return nil
}

func (m *Batch) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Batch) GetDaName() string {
	if m != nil {
		return m.DaName
	}
	return ""
}

func (m *Batch) GetDaCommitment() string {
	if m != nil {
		return m.DaCommitment
	}
	return ""
}

func (m *Batch) GetDaHash() string {
	if m != nil {
		return m.DaHash
	}
	return ""
}

func (m *Batch) GetDaPointer() string {
	if m != nil {
		return m.DaPointer
	}
	return ""
}

func (m *Batch) GetDaNamespace() string {
	if m != nil {
		return m.DaNamespace
	}
	return ""
}

func (m *Batch) GetIsFinalized() bool {
	if m != nil {
		return m.IsFinalized
	}
	return false
}

func init() {
	proto.RegisterType((*Batch)(nil), "junction.rollup.Batch")
}

func init() { proto.RegisterFile("junction/rollup/batch.proto", fileDescriptor_07eff5b06b88c13a) }

var fileDescriptor_07eff5b06b88c13a = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x6b, 0xdb, 0x30,
	0x18, 0xc7, 0xa3, 0xe5, 0xd5, 0xca, 0xcb, 0x40, 0x87, 0x20, 0xb6, 0x60, 0x4c, 0x18, 0xc3, 0x97,
	0xc5, 0x87, 0x8d, 0x7d, 0x80, 0x0c, 0xc6, 0x76, 0x58, 0x08, 0xbe, 0x0c, 0x7a, 0x93, 0x6d, 0xb5,
	0x56, 0x63, 0x49, 0x46, 0x92, 0xfb, 0x92, 0x4f, 0xd1, 0x8f, 0xd5, 0x5b, 0x73, 0xec, 0xb1, 0x24,
	0x5f, 0xa4, 0x58, 0xae, 0xdd, 0xa4, 0xd0, 0xe3, 0xf3, 0xfb, 0x3d, 0x0f, 0x7f, 0x3d, 0xe2, 0x81,
	0x9f, 0x2f, 0x0b, 0x11, 0x1b, 0x26, 0x45, 0xa0, 0x64, 0x96, 0x15, 0x79, 0x10, 0x11, 0x13, 0xa7,
	0x8b, 0x5c, 0x49, 0x23, 0xd1, 0xc7, 0x5a, 0x2e, 0x2a, 0x39, 0x7f, 0x68, 0xc3, 0xee, 0xb2, 0x6c,
	0x40, 0x33, 0xe8, 0xe8, 0x22, 0xe2, 0xcc, 0x18, 0xaa, 0x30, 0xf0, 0x80, 0xef, 0x84, 0xaf, 0x00,
	0x7d, 0x82, 0x83, 0x6a, 0xe2, 0x6f, 0x82, 0x3f, 0x58, 0xd9, 0xd4, 0x08, 0xc3, 0xbe, 0xcd, 0x58,
	0x49, 0xdc, 0xf6, 0x80, 0xdf, 0x09, 0xeb, 0x12, 0x7d, 0x85, 0x13, 0x4e, 0xd5, 0x26, 0xa3, 0xa1,
	0x94, 0xe6, 0x0f, 0xd1, 0x29, 0xee, 0xd8, 0xd9, 0x37, 0x14, 0xfd, 0x84, 0xd3, 0x5c, 0xd1, 0x2b,
	0x26, 0x0b, 0xfd, 0xef, 0xb4, 0xbf, 0x6b, 0xfb, 0xdf, 0xb1, 0x65, 0xf2, 0x76, 0xb3, 0x56, 0x52,
	0x9e, 0xe3, 0x9e, 0x07, 0xfc, 0x51, 0x58, 0x97, 0xe8, 0x0b, 0x1c, 0xe7, 0x45, 0x94, 0xb1, 0xf8,
	0x3f, 0x33, 0x82, 0x6a, 0x8d, 0xfb, 0xd6, 0x9f, 0xc2, 0x72, 0x67, 0xc3, 0x38, 0xd5, 0x86, 0xf0,
	0x1c, 0x0f, 0xaa, 0x9d, 0x1b, 0x80, 0xa6, 0xb0, 0x97, 0x90, 0x15, 0xe1, 0x14, 0x3b, 0x56, 0xbd,
	0x54, 0x68, 0x0e, 0x47, 0x09, 0xf9, 0x25, 0x39, 0x67, 0x86, 0x53, 0x61, 0x30, 0xb4, 0xf6, 0x84,
	0x55, 0xb3, 0x76, 0x83, 0x61, 0x3d, 0x6b, 0x5f, 0x3c, 0x83, 0x4e, 0x42, 0xd6, 0x92, 0x89, 0xf2,
	0x97, 0x47, 0x55, 0x62, 0x03, 0x90, 0x07, 0x87, 0x55, 0x86, 0xce, 0x49, 0x4c, 0xf1, 0xd8, 0xfa,
	0x63, 0x54, 0x76, 0x30, 0xfd, 0x9b, 0x09, 0x92, 0xb1, 0x2d, 0x4d, 0xf0, 0xc4, 0x03, 0xfe, 0x20,
	0x3c, 0x46, 0xcb, 0xd5, 0xfd, 0xde, 0x05, 0xbb, 0xbd, 0x0b, 0x9e, 0xf6, 0x2e, 0xb8, 0x3b, 0xb8,
	0xad, 0xdd, 0xc1, 0x6d, 0x3d, 0x1e, 0xdc, 0xd6, 0xd9, 0x8f, 0x0b, 0x66, 0xd2, 0x22, 0x5a, 0xc4,
	0x92, 0x07, 0x84, 0xa9, 0x38, 0x25, 0x4c, 0xe8, 0x6f, 0x82, 0x9a, 0x6b, 0xa9, 0x36, 0x41, 0x73,
	0x36, 0x37, 0xf5, 0xe1, 0x98, 0xdb, 0x9c, 0xea, 0xa8, 0x67, 0x2f, 0xe7, 0xfb, 0x73, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2c, 0x1d, 0xc7, 0x58, 0x58, 0x02, 0x00, 0x00,
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFinalized {
		i--
		if m.IsFinalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.DaNamespace) > 0 {
		i -= len(m.DaNamespace)
		copy(dAtA[i:], m.DaNamespace)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DaNamespace)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.DaPointer) > 0 {
		i -= len(m.DaPointer)
		copy(dAtA[i:], m.DaPointer)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DaPointer)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DaHash) > 0 {
		i -= len(m.DaHash)
		copy(dAtA[i:], m.DaHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DaHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DaCommitment) > 0 {
		i -= len(m.DaCommitment)
		copy(dAtA[i:], m.DaCommitment)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DaCommitment)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DaName) > 0 {
		i -= len(m.DaName)
		copy(dAtA[i:], m.DaName)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DaName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PublicWitness) > 0 {
		i -= len(m.PublicWitness)
		copy(dAtA[i:], m.PublicWitness)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.PublicWitness)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ZkProof) > 0 {
		i -= len(m.ZkProof)
		copy(dAtA[i:], m.ZkProof)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ZkProof)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PreviousMerkleRootHash) > 0 {
		i -= len(m.PreviousMerkleRootHash)
		copy(dAtA[i:], m.PreviousMerkleRootHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.PreviousMerkleRootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MerkleRootHash) > 0 {
		i -= len(m.MerkleRootHash)
		copy(dAtA[i:], m.MerkleRootHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.MerkleRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNo != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BatchNo))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.BatchNo != 0 {
		n += 1 + sovBatch(uint64(m.BatchNo))
	}
	l = len(m.MerkleRootHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.PreviousMerkleRootHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.ZkProof)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.PublicWitness)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.DaName)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.DaCommitment)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.DaHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.DaPointer)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.DaNamespace)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.IsFinalized {
		n += 2
	}
	return n
}

func sovBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNo", wireType)
			}
			m.BatchNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousMerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousMerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkProof = append(m.ZkProof[:0], dAtA[iNdEx:postIndex]...)
			if m.ZkProof == nil {
				m.ZkProof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicWitness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicWitness = append(m.PublicWitness[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicWitness == nil {
				m.PublicWitness = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaCommitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaCommitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaPointer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaPointer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinalized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatch = fmt.Errorf("proto: unexpected end of group")
)
