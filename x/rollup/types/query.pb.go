// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/rollup/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCheckMonikerAvailabilityRequest struct {
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
}

func (m *QueryCheckMonikerAvailabilityRequest) Reset()         { *m = QueryCheckMonikerAvailabilityRequest{} }
func (m *QueryCheckMonikerAvailabilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckMonikerAvailabilityRequest) ProtoMessage()    {}
func (*QueryCheckMonikerAvailabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{2}
}
func (m *QueryCheckMonikerAvailabilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckMonikerAvailabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckMonikerAvailabilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckMonikerAvailabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckMonikerAvailabilityRequest.Merge(m, src)
}
func (m *QueryCheckMonikerAvailabilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckMonikerAvailabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckMonikerAvailabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckMonikerAvailabilityRequest proto.InternalMessageInfo

func (m *QueryCheckMonikerAvailabilityRequest) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

type QueryCheckMonikerAvailabilityResponse struct {
	IsAvailable bool `protobuf:"varint,1,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (m *QueryCheckMonikerAvailabilityResponse) Reset()         { *m = QueryCheckMonikerAvailabilityResponse{} }
func (m *QueryCheckMonikerAvailabilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckMonikerAvailabilityResponse) ProtoMessage()    {}
func (*QueryCheckMonikerAvailabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{3}
}
func (m *QueryCheckMonikerAvailabilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckMonikerAvailabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckMonikerAvailabilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckMonikerAvailabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckMonikerAvailabilityResponse.Merge(m, src)
}
func (m *QueryCheckMonikerAvailabilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckMonikerAvailabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckMonikerAvailabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckMonikerAvailabilityResponse proto.InternalMessageInfo

func (m *QueryCheckMonikerAvailabilityResponse) GetIsAvailable() bool {
	if m != nil {
		return m.IsAvailable
	}
	return false
}

type QueryGetRollupInfoRequest struct {
	RollupId string `protobuf:"bytes,1,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
}

func (m *QueryGetRollupInfoRequest) Reset()         { *m = QueryGetRollupInfoRequest{} }
func (m *QueryGetRollupInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupInfoRequest) ProtoMessage()    {}
func (*QueryGetRollupInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{4}
}
func (m *QueryGetRollupInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupInfoRequest.Merge(m, src)
}
func (m *QueryGetRollupInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupInfoRequest proto.InternalMessageInfo

func (m *QueryGetRollupInfoRequest) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

type QueryGetRollupInfoResponse struct {
	RollupInfo *RollupMetadata `protobuf:"bytes,1,opt,name=rollupInfo,proto3" json:"rollupInfo,omitempty"`
}

func (m *QueryGetRollupInfoResponse) Reset()         { *m = QueryGetRollupInfoResponse{} }
func (m *QueryGetRollupInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupInfoResponse) ProtoMessage()    {}
func (*QueryGetRollupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{5}
}
func (m *QueryGetRollupInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupInfoResponse.Merge(m, src)
}
func (m *QueryGetRollupInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupInfoResponse proto.InternalMessageInfo

func (m *QueryGetRollupInfoResponse) GetRollupInfo() *RollupMetadata {
	if m != nil {
		return m.RollupInfo
	}
	return nil
}

type QueryGetRollupsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRollupsRequest) Reset()         { *m = QueryGetRollupsRequest{} }
func (m *QueryGetRollupsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupsRequest) ProtoMessage()    {}
func (*QueryGetRollupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{6}
}
func (m *QueryGetRollupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupsRequest.Merge(m, src)
}
func (m *QueryGetRollupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupsRequest proto.InternalMessageInfo

func (m *QueryGetRollupsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRollupsResponse struct {
	Rollups    []RollupMetadata    `protobuf:"bytes,1,rep,name=rollups,proto3" json:"rollups"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRollupsResponse) Reset()         { *m = QueryGetRollupsResponse{} }
func (m *QueryGetRollupsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupsResponse) ProtoMessage()    {}
func (*QueryGetRollupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{7}
}
func (m *QueryGetRollupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupsResponse.Merge(m, src)
}
func (m *QueryGetRollupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupsResponse proto.InternalMessageInfo

func (m *QueryGetRollupsResponse) GetRollups() []RollupMetadata {
	if m != nil {
		return m.Rollups
	}
	return nil
}

func (m *QueryGetRollupsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRollupByMonikerRequest struct {
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
}

func (m *QueryGetRollupByMonikerRequest) Reset()         { *m = QueryGetRollupByMonikerRequest{} }
func (m *QueryGetRollupByMonikerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupByMonikerRequest) ProtoMessage()    {}
func (*QueryGetRollupByMonikerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{8}
}
func (m *QueryGetRollupByMonikerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupByMonikerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupByMonikerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupByMonikerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupByMonikerRequest.Merge(m, src)
}
func (m *QueryGetRollupByMonikerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupByMonikerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupByMonikerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupByMonikerRequest proto.InternalMessageInfo

func (m *QueryGetRollupByMonikerRequest) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

type QueryGetRollupByMonikerResponse struct {
	RollupInfo *RollupMetadata `protobuf:"bytes,1,opt,name=rollupInfo,proto3" json:"rollupInfo,omitempty"`
}

func (m *QueryGetRollupByMonikerResponse) Reset()         { *m = QueryGetRollupByMonikerResponse{} }
func (m *QueryGetRollupByMonikerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupByMonikerResponse) ProtoMessage()    {}
func (*QueryGetRollupByMonikerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{9}
}
func (m *QueryGetRollupByMonikerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupByMonikerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupByMonikerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupByMonikerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupByMonikerResponse.Merge(m, src)
}
func (m *QueryGetRollupByMonikerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupByMonikerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupByMonikerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupByMonikerResponse proto.InternalMessageInfo

func (m *QueryGetRollupByMonikerResponse) GetRollupInfo() *RollupMetadata {
	if m != nil {
		return m.RollupInfo
	}
	return nil
}

type QueryGetBatchInfoRequest struct {
	RollupId string `protobuf:"bytes,1,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
	BatchNo  uint64 `protobuf:"varint,2,opt,name=batchNo,proto3" json:"batchNo,omitempty"`
}

func (m *QueryGetBatchInfoRequest) Reset()         { *m = QueryGetBatchInfoRequest{} }
func (m *QueryGetBatchInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBatchInfoRequest) ProtoMessage()    {}
func (*QueryGetBatchInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{10}
}
func (m *QueryGetBatchInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBatchInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBatchInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBatchInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBatchInfoRequest.Merge(m, src)
}
func (m *QueryGetBatchInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBatchInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBatchInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBatchInfoRequest proto.InternalMessageInfo

func (m *QueryGetBatchInfoRequest) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *QueryGetBatchInfoRequest) GetBatchNo() uint64 {
	if m != nil {
		return m.BatchNo
	}
	return 0
}

type QueryGetBatchInfoResponse struct {
	BatchInfo *Batch `protobuf:"bytes,1,opt,name=batchInfo,proto3" json:"batchInfo,omitempty"`
}

func (m *QueryGetBatchInfoResponse) Reset()         { *m = QueryGetBatchInfoResponse{} }
func (m *QueryGetBatchInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBatchInfoResponse) ProtoMessage()    {}
func (*QueryGetBatchInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{11}
}
func (m *QueryGetBatchInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBatchInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBatchInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBatchInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBatchInfoResponse.Merge(m, src)
}
func (m *QueryGetBatchInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBatchInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBatchInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBatchInfoResponse proto.InternalMessageInfo

func (m *QueryGetBatchInfoResponse) GetBatchInfo() *Batch {
	if m != nil {
		return m.BatchInfo
	}
	return nil
}

type QueryGetAllBatchesRequest struct {
	RollupId string `protobuf:"bytes,1,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
	// Types that are valid to be assigned to XOffset:
	//	*QueryGetAllBatchesRequest_Offset
	XOffset isQueryGetAllBatchesRequest_XOffset `protobuf_oneof:"_offset"`
	// Types that are valid to be assigned to XLimit:
	//	*QueryGetAllBatchesRequest_Limit
	XLimit isQueryGetAllBatchesRequest_XLimit `protobuf_oneof:"_limit"`
	// Types that are valid to be assigned to XOrder:
	//	*QueryGetAllBatchesRequest_Order
	XOrder isQueryGetAllBatchesRequest_XOrder `protobuf_oneof:"_order"`
}

func (m *QueryGetAllBatchesRequest) Reset()         { *m = QueryGetAllBatchesRequest{} }
func (m *QueryGetAllBatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBatchesRequest) ProtoMessage()    {}
func (*QueryGetAllBatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{12}
}
func (m *QueryGetAllBatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBatchesRequest.Merge(m, src)
}
func (m *QueryGetAllBatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBatchesRequest proto.InternalMessageInfo

type isQueryGetAllBatchesRequest_XOffset interface {
	isQueryGetAllBatchesRequest_XOffset()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isQueryGetAllBatchesRequest_XLimit interface {
	isQueryGetAllBatchesRequest_XLimit()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isQueryGetAllBatchesRequest_XOrder interface {
	isQueryGetAllBatchesRequest_XOrder()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryGetAllBatchesRequest_Offset struct {
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}
type QueryGetAllBatchesRequest_Limit struct {
	Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}
type QueryGetAllBatchesRequest_Order struct {
	Order string `protobuf:"bytes,4,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (*QueryGetAllBatchesRequest_Offset) isQueryGetAllBatchesRequest_XOffset() {}
func (*QueryGetAllBatchesRequest_Limit) isQueryGetAllBatchesRequest_XLimit()   {}
func (*QueryGetAllBatchesRequest_Order) isQueryGetAllBatchesRequest_XOrder()   {}

func (m *QueryGetAllBatchesRequest) GetXOffset() isQueryGetAllBatchesRequest_XOffset {
	if m != nil {
		return m.XOffset
	}
	return nil
}
func (m *QueryGetAllBatchesRequest) GetXLimit() isQueryGetAllBatchesRequest_XLimit {
	if m != nil {
		return m.XLimit
	}
	return nil
}
func (m *QueryGetAllBatchesRequest) GetXOrder() isQueryGetAllBatchesRequest_XOrder {
	if m != nil {
		return m.XOrder
	}
	return nil
}

func (m *QueryGetAllBatchesRequest) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *QueryGetAllBatchesRequest) GetOffset() uint64 {
	if x, ok := m.GetXOffset().(*QueryGetAllBatchesRequest_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *QueryGetAllBatchesRequest) GetLimit() uint64 {
	if x, ok := m.GetXLimit().(*QueryGetAllBatchesRequest_Limit); ok {
		return x.Limit
	}
	return 0
}

func (m *QueryGetAllBatchesRequest) GetOrder() string {
	if x, ok := m.GetXOrder().(*QueryGetAllBatchesRequest_Order); ok {
		return x.Order
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryGetAllBatchesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryGetAllBatchesRequest_Offset)(nil),
		(*QueryGetAllBatchesRequest_Limit)(nil),
		(*QueryGetAllBatchesRequest_Order)(nil),
	}
}

type QueryGetAllBatchesResponse struct {
	Batch  []Batch `protobuf:"bytes,1,rep,name=batch,proto3" json:"batch"`
	Total  uint64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Offset uint64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Order  string  `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryGetAllBatchesResponse) Reset()         { *m = QueryGetAllBatchesResponse{} }
func (m *QueryGetAllBatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBatchesResponse) ProtoMessage()    {}
func (*QueryGetAllBatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{13}
}
func (m *QueryGetAllBatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBatchesResponse.Merge(m, src)
}
func (m *QueryGetAllBatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBatchesResponse proto.InternalMessageInfo

func (m *QueryGetAllBatchesResponse) GetBatch() []Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *QueryGetAllBatchesResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *QueryGetAllBatchesResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QueryGetAllBatchesResponse) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryGetAllBatchesResponse) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type QueryGetTotalStakedAmountRequest struct {
}

func (m *QueryGetTotalStakedAmountRequest) Reset()         { *m = QueryGetTotalStakedAmountRequest{} }
func (m *QueryGetTotalStakedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalStakedAmountRequest) ProtoMessage()    {}
func (*QueryGetTotalStakedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{14}
}
func (m *QueryGetTotalStakedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalStakedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalStakedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalStakedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalStakedAmountRequest.Merge(m, src)
}
func (m *QueryGetTotalStakedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalStakedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalStakedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalStakedAmountRequest proto.InternalMessageInfo

type QueryGetTotalStakedAmountResponse struct {
	Creators          []*Creator `protobuf:"bytes,1,rep,name=creators,proto3" json:"creators,omitempty"`
	TotalStakedAmount int64      `protobuf:"varint,2,opt,name=total_staked_amount,json=totalStakedAmount,proto3" json:"total_staked_amount,omitempty"`
}

func (m *QueryGetTotalStakedAmountResponse) Reset()         { *m = QueryGetTotalStakedAmountResponse{} }
func (m *QueryGetTotalStakedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalStakedAmountResponse) ProtoMessage()    {}
func (*QueryGetTotalStakedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{15}
}
func (m *QueryGetTotalStakedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalStakedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalStakedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalStakedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalStakedAmountResponse.Merge(m, src)
}
func (m *QueryGetTotalStakedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalStakedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalStakedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalStakedAmountResponse proto.InternalMessageInfo

func (m *QueryGetTotalStakedAmountResponse) GetCreators() []*Creator {
	if m != nil {
		return m.Creators
	}
	return nil
}

func (m *QueryGetTotalStakedAmountResponse) GetTotalStakedAmount() int64 {
	if m != nil {
		return m.TotalStakedAmount
	}
	return 0
}

type Creator struct {
	CreatorAddress string         `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	Rollups        []*RollupStake `protobuf:"bytes,2,rep,name=rollups,proto3" json:"rollups,omitempty"`
}

func (m *Creator) Reset()         { *m = Creator{} }
func (m *Creator) String() string { return proto.CompactTextString(m) }
func (*Creator) ProtoMessage()    {}
func (*Creator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{16}
}
func (m *Creator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Creator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Creator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Creator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Creator.Merge(m, src)
}
func (m *Creator) XXX_Size() int {
	return m.Size()
}
func (m *Creator) XXX_DiscardUnknown() {
	xxx_messageInfo_Creator.DiscardUnknown(m)
}

var xxx_messageInfo_Creator proto.InternalMessageInfo

func (m *Creator) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *Creator) GetRollups() []*RollupStake {
	if m != nil {
		return m.Rollups
	}
	return nil
}

type RollupStake struct {
	RollupId     string `protobuf:"bytes,1,opt,name=rollup_id,json=rollupId,proto3" json:"rollup_id,omitempty"`
	AmountStaked int64  `protobuf:"varint,2,opt,name=amount_staked,json=amountStaked,proto3" json:"amount_staked,omitempty"`
	Denom        string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *RollupStake) Reset()         { *m = RollupStake{} }
func (m *RollupStake) String() string { return proto.CompactTextString(m) }
func (*RollupStake) ProtoMessage()    {}
func (*RollupStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{17}
}
func (m *RollupStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupStake.Merge(m, src)
}
func (m *RollupStake) XXX_Size() int {
	return m.Size()
}
func (m *RollupStake) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupStake.DiscardUnknown(m)
}

var xxx_messageInfo_RollupStake proto.InternalMessageInfo

func (m *RollupStake) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

func (m *RollupStake) GetAmountStaked() int64 {
	if m != nil {
		return m.AmountStaked
	}
	return 0
}

func (m *RollupStake) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetStakeDetailsByUserRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetStakeDetailsByUserRequest) Reset()         { *m = QueryGetStakeDetailsByUserRequest{} }
func (m *QueryGetStakeDetailsByUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeDetailsByUserRequest) ProtoMessage()    {}
func (*QueryGetStakeDetailsByUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{18}
}
func (m *QueryGetStakeDetailsByUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeDetailsByUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeDetailsByUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeDetailsByUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeDetailsByUserRequest.Merge(m, src)
}
func (m *QueryGetStakeDetailsByUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeDetailsByUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeDetailsByUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeDetailsByUserRequest proto.InternalMessageInfo

func (m *QueryGetStakeDetailsByUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetStakeDetailsByUserResponse struct {
	TotalStakedAmount int64          `protobuf:"varint,1,opt,name=total_staked_amount,json=totalStakedAmount,proto3" json:"total_staked_amount,omitempty"`
	Rollups           []*RollupStake `protobuf:"bytes,2,rep,name=rollups,proto3" json:"rollups,omitempty"`
}

func (m *QueryGetStakeDetailsByUserResponse) Reset()         { *m = QueryGetStakeDetailsByUserResponse{} }
func (m *QueryGetStakeDetailsByUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeDetailsByUserResponse) ProtoMessage()    {}
func (*QueryGetStakeDetailsByUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{19}
}
func (m *QueryGetStakeDetailsByUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeDetailsByUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeDetailsByUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeDetailsByUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeDetailsByUserResponse.Merge(m, src)
}
func (m *QueryGetStakeDetailsByUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeDetailsByUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeDetailsByUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeDetailsByUserResponse proto.InternalMessageInfo

func (m *QueryGetStakeDetailsByUserResponse) GetTotalStakedAmount() int64 {
	if m != nil {
		return m.TotalStakedAmount
	}
	return 0
}

func (m *QueryGetStakeDetailsByUserResponse) GetRollups() []*RollupStake {
	if m != nil {
		return m.Rollups
	}
	return nil
}

type QueryGetRollupStakedAmountRequest struct {
	RollupId string `protobuf:"bytes,1,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
}

func (m *QueryGetRollupStakedAmountRequest) Reset()         { *m = QueryGetRollupStakedAmountRequest{} }
func (m *QueryGetRollupStakedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupStakedAmountRequest) ProtoMessage()    {}
func (*QueryGetRollupStakedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{20}
}
func (m *QueryGetRollupStakedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupStakedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupStakedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupStakedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupStakedAmountRequest.Merge(m, src)
}
func (m *QueryGetRollupStakedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupStakedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupStakedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupStakedAmountRequest proto.InternalMessageInfo

func (m *QueryGetRollupStakedAmountRequest) GetRollupId() string {
	if m != nil {
		return m.RollupId
	}
	return ""
}

type QueryGetRollupStakedAmountResponse struct {
	AmountStaked uint64 `protobuf:"varint,1,opt,name=amountStaked,proto3" json:"amountStaked,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetRollupStakedAmountResponse) Reset()         { *m = QueryGetRollupStakedAmountResponse{} }
func (m *QueryGetRollupStakedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRollupStakedAmountResponse) ProtoMessage()    {}
func (*QueryGetRollupStakedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12f95b833c221ad, []int{21}
}
func (m *QueryGetRollupStakedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRollupStakedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRollupStakedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRollupStakedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRollupStakedAmountResponse.Merge(m, src)
}
func (m *QueryGetRollupStakedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRollupStakedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRollupStakedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRollupStakedAmountResponse proto.InternalMessageInfo

func (m *QueryGetRollupStakedAmountResponse) GetAmountStaked() uint64 {
	if m != nil {
		return m.AmountStaked
	}
	return 0
}

func (m *QueryGetRollupStakedAmountResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "junction.rollup.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "junction.rollup.QueryParamsResponse")
	proto.RegisterType((*QueryCheckMonikerAvailabilityRequest)(nil), "junction.rollup.QueryCheckMonikerAvailabilityRequest")
	proto.RegisterType((*QueryCheckMonikerAvailabilityResponse)(nil), "junction.rollup.QueryCheckMonikerAvailabilityResponse")
	proto.RegisterType((*QueryGetRollupInfoRequest)(nil), "junction.rollup.QueryGetRollupInfoRequest")
	proto.RegisterType((*QueryGetRollupInfoResponse)(nil), "junction.rollup.QueryGetRollupInfoResponse")
	proto.RegisterType((*QueryGetRollupsRequest)(nil), "junction.rollup.QueryGetRollupsRequest")
	proto.RegisterType((*QueryGetRollupsResponse)(nil), "junction.rollup.QueryGetRollupsResponse")
	proto.RegisterType((*QueryGetRollupByMonikerRequest)(nil), "junction.rollup.QueryGetRollupByMonikerRequest")
	proto.RegisterType((*QueryGetRollupByMonikerResponse)(nil), "junction.rollup.QueryGetRollupByMonikerResponse")
	proto.RegisterType((*QueryGetBatchInfoRequest)(nil), "junction.rollup.QueryGetBatchInfoRequest")
	proto.RegisterType((*QueryGetBatchInfoResponse)(nil), "junction.rollup.QueryGetBatchInfoResponse")
	proto.RegisterType((*QueryGetAllBatchesRequest)(nil), "junction.rollup.QueryGetAllBatchesRequest")
	proto.RegisterType((*QueryGetAllBatchesResponse)(nil), "junction.rollup.QueryGetAllBatchesResponse")
	proto.RegisterType((*QueryGetTotalStakedAmountRequest)(nil), "junction.rollup.QueryGetTotalStakedAmountRequest")
	proto.RegisterType((*QueryGetTotalStakedAmountResponse)(nil), "junction.rollup.QueryGetTotalStakedAmountResponse")
	proto.RegisterType((*Creator)(nil), "junction.rollup.Creator")
	proto.RegisterType((*RollupStake)(nil), "junction.rollup.RollupStake")
	proto.RegisterType((*QueryGetStakeDetailsByUserRequest)(nil), "junction.rollup.QueryGetStakeDetailsByUserRequest")
	proto.RegisterType((*QueryGetStakeDetailsByUserResponse)(nil), "junction.rollup.QueryGetStakeDetailsByUserResponse")
	proto.RegisterType((*QueryGetRollupStakedAmountRequest)(nil), "junction.rollup.QueryGetRollupStakedAmountRequest")
	proto.RegisterType((*QueryGetRollupStakedAmountResponse)(nil), "junction.rollup.QueryGetRollupStakedAmountResponse")
}

func init() { proto.RegisterFile("junction/rollup/query.proto", fileDescriptor_a12f95b833c221ad) }

var fileDescriptor_a12f95b833c221ad = []byte{
	// 1260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xce, 0xe6, 0xdb, 0x6f, 0xd2, 0x56, 0x9d, 0xfa, 0x97, 0xfa, 0xe7, 0x56, 0x4e, 0xbb, 0x6d,
	0x49, 0x9b, 0x8a, 0xdd, 0x26, 0x2d, 0x41, 0x8a, 0xa8, 0x42, 0xdc, 0xd2, 0x24, 0x95, 0x1a, 0x92,
	0x05, 0x2e, 0x48, 0x60, 0xc6, 0xf6, 0xc4, 0xd9, 0x66, 0xbd, 0xe3, 0xee, 0x8e, 0x0b, 0x56, 0x94,
	0x0b, 0x07, 0x24, 0x24, 0x0e, 0x48, 0x1c, 0xb8, 0x22, 0x71, 0x41, 0x5c, 0xe0, 0xc2, 0x1f, 0x80,
	0xb8, 0xf4, 0x18, 0xa9, 0x17, 0xc4, 0x01, 0xa1, 0x04, 0x89, 0x7f, 0x03, 0xed, 0x7c, 0x78, 0x77,
	0xbd, 0x5e, 0x7f, 0x54, 0x5c, 0x5a, 0xcf, 0xcc, 0xfb, 0xf1, 0x3c, 0xef, 0x3c, 0xb3, 0xef, 0x1b,
	0xb8, 0xf4, 0xb4, 0xe9, 0x56, 0x98, 0x4d, 0x5d, 0xd3, 0xa3, 0x8e, 0xd3, 0x6c, 0x98, 0xcf, 0x9a,
	0xc4, 0x6b, 0x19, 0x0d, 0x8f, 0x32, 0x8a, 0xce, 0xa9, 0x43, 0x43, 0x1c, 0xe6, 0xcf, 0xe3, 0xba,
	0xed, 0x52, 0x93, 0xff, 0x2b, 0x6c, 0xf2, 0xd9, 0x1a, 0xad, 0x51, 0xfe, 0xd3, 0x0c, 0x7e, 0xc9,
	0xdd, 0xcb, 0x35, 0x4a, 0x6b, 0x0e, 0x31, 0x71, 0xc3, 0x36, 0xb1, 0xeb, 0x52, 0x86, 0x83, 0x30,
	0xbe, 0x3c, 0x5d, 0xac, 0x50, 0xbf, 0x4e, 0x7d, 0xb3, 0x8c, 0x7d, 0x22, 0x12, 0x9a, 0xcf, 0x97,
	0xca, 0x84, 0xe1, 0x25, 0xb3, 0x81, 0x6b, 0xb6, 0xcb, 0x8d, 0x55, 0xa4, 0x4e, 0x80, 0x0d, 0xec,
	0xe1, 0xba, 0x8a, 0x74, 0xa3, 0xf3, 0x54, 0xfc, 0x57, 0xaa, 0x13, 0x86, 0xab, 0x98, 0x61, 0x69,
	0x96, 0x60, 0x59, 0xc6, 0xac, 0xb2, 0x2f, 0x0e, 0xf5, 0x2c, 0xa0, 0xdd, 0x00, 0xc3, 0x0e, 0x0f,
	0x6c, 0x91, 0x67, 0x4d, 0xe2, 0x33, 0x7d, 0x17, 0x2e, 0xc4, 0x76, 0xfd, 0x06, 0x75, 0x7d, 0x82,
	0x56, 0x61, 0x52, 0x00, 0xc8, 0x69, 0x57, 0xb4, 0x9b, 0x33, 0xcb, 0x17, 0x8d, 0x8e, 0x1a, 0x19,
	0xc2, 0xa1, 0x98, 0x79, 0xf1, 0xe7, 0xfc, 0xc8, 0x0f, 0xff, 0xfc, 0xbc, 0xa8, 0x59, 0xd2, 0x43,
	0x7f, 0x1b, 0xae, 0xf3, 0x90, 0x0f, 0xf6, 0x49, 0xe5, 0xe0, 0x09, 0x75, 0xed, 0x03, 0xe2, 0xad,
	0x3f, 0xc7, 0xb6, 0x83, 0xcb, 0xb6, 0x63, 0xb3, 0x96, 0x4c, 0x8d, 0x72, 0x30, 0x55, 0x17, 0xa7,
	0x3c, 0x49, 0xc6, 0x52, 0x4b, 0xfd, 0x31, 0xdc, 0xe8, 0x13, 0x41, 0xc2, 0xbc, 0x0a, 0xb3, 0xb6,
	0x5f, 0xc2, 0xe2, 0xc8, 0x21, 0x3c, 0xce, 0xb4, 0x35, 0x63, 0xfb, 0xeb, 0x6a, 0x4b, 0x7f, 0x13,
	0xfe, 0xcf, 0x63, 0x6d, 0x10, 0x66, 0x71, 0xe4, 0x5b, 0xee, 0x1e, 0x55, 0x10, 0xf2, 0x30, 0x2d,
	0xe8, 0x6c, 0x55, 0x25, 0x86, 0xf6, 0x5a, 0xff, 0x08, 0xf2, 0xdd, 0x1c, 0x65, 0xe6, 0x35, 0x00,
	0xaf, 0xbd, 0x2b, 0x8b, 0x34, 0x9f, 0x28, 0x92, 0x70, 0x7c, 0x22, 0x6f, 0xc9, 0x8a, 0xb8, 0xe8,
	0x9f, 0xc0, 0x5c, 0x3c, 0xbc, 0xba, 0x12, 0xf4, 0x08, 0x20, 0x94, 0x87, 0x0c, 0xfd, 0x9a, 0x21,
	0xb4, 0x64, 0x04, 0x5a, 0x32, 0x84, 0x78, 0xa5, 0x96, 0x8c, 0x1d, 0x5c, 0x23, 0xd2, 0xd7, 0x8a,
	0x78, 0xea, 0xdf, 0x6b, 0x70, 0x31, 0x91, 0xa2, 0x0d, 0x7f, 0x4a, 0x60, 0x09, 0x2e, 0x78, 0x6c,
	0x00, 0xec, 0xc5, 0xf1, 0xe0, 0xa2, 0x2d, 0xe5, 0x85, 0x36, 0x62, 0x20, 0x47, 0x39, 0xc8, 0x85,
	0xbe, 0x20, 0x45, 0xf6, 0x18, 0xca, 0x55, 0x28, 0xc4, 0x41, 0x16, 0x5b, 0xf2, 0xc6, 0xfb, 0xeb,
	0xa4, 0x0c, 0xf3, 0xa9, 0xbe, 0xff, 0xd5, 0x3d, 0xed, 0x40, 0x4e, 0xe5, 0x28, 0x06, 0xaf, 0x69,
	0x40, 0xf9, 0x04, 0xa8, 0xf9, 0xeb, 0xdb, 0xa6, 0xbc, 0x3a, 0xe3, 0x96, 0x5a, 0xea, 0xbb, 0xa1,
	0x22, 0x23, 0x11, 0x25, 0xde, 0x7b, 0x90, 0x29, 0xab, 0x4d, 0x09, 0x77, 0x2e, 0x01, 0x97, 0xbb,
	0x59, 0xa1, 0xa1, 0xfe, 0x9d, 0x16, 0xc6, 0x5c, 0x77, 0x1c, 0x7e, 0x4e, 0xfc, 0xc1, 0x60, 0x4e,
	0xd2, 0xbd, 0x3d, 0x9f, 0x30, 0x81, 0x72, 0x73, 0xc4, 0x92, 0x6b, 0x34, 0x07, 0x13, 0x8e, 0x5d,
	0xb7, 0x59, 0x6e, 0x8c, 0x1f, 0x68, 0x96, 0x58, 0x06, 0xfb, 0xd4, 0xab, 0x12, 0x2f, 0x37, 0x1e,
	0x84, 0xda, 0x1c, 0xb5, 0xc4, 0xb2, 0x98, 0x81, 0xa9, 0x92, 0x70, 0x2d, 0x4e, 0xc3, 0x64, 0x89,
	0x1b, 0xf3, 0x5f, 0xfc, 0x58, 0xff, 0x51, 0x0b, 0xdf, 0x53, 0x14, 0xa2, 0xe4, 0xbd, 0x0c, 0x13,
	0x9c, 0x8e, 0x94, 0x63, 0x0a, 0x67, 0xa9, 0x42, 0x61, 0x8a, 0xb2, 0x30, 0xc1, 0x28, 0xc3, 0x8e,
	0x2c, 0xb0, 0x58, 0xa0, 0xb9, 0x36, 0x23, 0x0e, 0xbc, 0xcd, 0x27, 0xab, 0xf8, 0x8c, 0x0b, 0x6b,
	0xc1, 0x26, 0xab, 0xd8, 0x4c, 0xf0, 0xc2, 0x88, 0x85, 0xae, 0xc3, 0x15, 0x85, 0xf5, 0xfd, 0x20,
	0xe8, 0x7b, 0x0c, 0x1f, 0x90, 0xea, 0x7a, 0x9d, 0x36, 0x5d, 0xa6, 0xbe, 0x9c, 0x5f, 0x6a, 0x70,
	0xb5, 0x87, 0x51, 0xfb, 0x3e, 0xa7, 0x2b, 0x1e, 0xc1, 0x8c, 0x7a, 0xea, 0xa5, 0xe5, 0x12, 0xd4,
	0x1e, 0x08, 0x03, 0xab, 0x6d, 0x89, 0x0c, 0xb8, 0xc0, 0xc9, 0x94, 0x7c, 0x1e, 0xb3, 0x84, 0x79,
	0x50, 0xce, 0x73, 0xcc, 0x3a, 0xcf, 0x3a, 0xb3, 0xe9, 0x4f, 0x61, 0x4a, 0x06, 0x41, 0x0b, 0x70,
	0x4e, 0x86, 0x29, 0xe1, 0x6a, 0xd5, 0x23, 0xbe, 0x2f, 0xef, 0xfc, 0xac, 0xdc, 0x5e, 0x17, 0xbb,
	0x68, 0x25, 0xfc, 0x04, 0x8c, 0x72, 0x60, 0x97, 0x53, 0x9e, 0x05, 0xcf, 0xd4, 0x7e, 0xf9, 0x3a,
	0x81, 0x99, 0xc8, 0x3e, 0xba, 0x04, 0x19, 0xd9, 0x8c, 0xec, 0xa4, 0xba, 0xae, 0xc1, 0x19, 0x01,
	0x5d, 0x12, 0x91, 0x0c, 0x66, 0xc5, 0xa6, 0xa0, 0x10, 0x5c, 0x41, 0x95, 0xb8, 0xb4, 0xce, 0xef,
	0x2b, 0x63, 0x89, 0x85, 0x7e, 0x3f, 0xac, 0x2e, 0xb7, 0x7b, 0x48, 0x18, 0xb6, 0x1d, 0xbf, 0xd8,
	0xfa, 0xc0, 0x8f, 0x7d, 0x1a, 0xe2, 0x24, 0xd5, 0x52, 0xff, 0x4a, 0x03, 0xbd, 0x97, 0xbf, 0xbc,
	0x9e, 0x94, 0x42, 0x6b, 0x29, 0x85, 0x7e, 0xe5, 0xa2, 0xad, 0x85, 0x6c, 0x22, 0xe7, 0x71, 0x45,
	0xf5, 0xec, 0x46, 0x1f, 0x87, 0x74, 0xba, 0x05, 0x90, 0x74, 0x74, 0x88, 0x95, 0x96, 0x47, 0x19,
	0x4f, 0x2b, 0xf7, 0x68, 0xa4, 0xdc, 0xcb, 0x2f, 0xcf, 0xc2, 0x04, 0x4f, 0x80, 0xbe, 0xd0, 0x60,
	0x52, 0x34, 0x77, 0x74, 0x2d, 0x41, 0x2e, 0x39, 0x41, 0xe4, 0xaf, 0xf7, 0x36, 0x12, 0xc8, 0xf4,
	0xa5, 0xcf, 0x5f, 0xfe, 0xfd, 0xcd, 0xe8, 0x6d, 0x74, 0xcb, 0xc4, 0xb6, 0x57, 0xd9, 0xc7, 0xb6,
	0xeb, 0xbf, 0xee, 0x12, 0xf6, 0x29, 0xf5, 0x0e, 0xcc, 0xee, 0xa3, 0x0f, 0xfa, 0x43, 0x83, 0x5c,
	0xda, 0x04, 0x80, 0xde, 0xe8, 0x9e, 0xb5, 0xcf, 0xcc, 0x91, 0x5f, 0x19, 0xd6, 0x4d, 0xc2, 0x7f,
	0x97, 0xc3, 0xdf, 0x42, 0x1b, 0x03, 0xc0, 0xaf, 0x04, 0xc1, 0x4a, 0xb2, 0x47, 0xa9, 0xe1, 0x84,
	0x87, 0x33, 0x0f, 0xe5, 0xee, 0x11, 0xfa, 0x49, 0x83, 0x33, 0xb1, 0xc9, 0x02, 0x2d, 0x76, 0x87,
	0xd6, 0x6d, 0x6e, 0xc9, 0xdf, 0x1e, 0xc8, 0x56, 0x62, 0x7f, 0x87, 0x63, 0x5f, 0x43, 0xf7, 0x07,
	0xc0, 0x5e, 0x23, 0xac, 0xa4, 0x9e, 0xb3, 0xbb, 0x47, 0xcd, 0x43, 0x25, 0xc0, 0x23, 0xf4, 0xad,
	0x06, 0x10, 0x4e, 0x12, 0x68, 0xa1, 0x0f, 0x84, 0xb6, 0x3e, 0x6e, 0xf6, 0x37, 0x94, 0x40, 0x57,
	0x38, 0xd0, 0x3b, 0xc8, 0x18, 0x0a, 0xa8, 0x8f, 0x7e, 0xd3, 0x00, 0x25, 0x47, 0x00, 0x64, 0xf6,
	0x49, 0xdc, 0x39, 0x68, 0xe4, 0xef, 0x0c, 0xee, 0x20, 0x11, 0x3f, 0xe6, 0x88, 0x1f, 0xa2, 0xe2,
	0x70, 0xa5, 0x2d, 0xb7, 0x94, 0x3c, 0x22, 0x8a, 0xf8, 0x45, 0x83, 0xd9, 0xe8, 0x48, 0x80, 0x6e,
	0xa5, 0xc2, 0xe9, 0x1c, 0x44, 0xf2, 0x8b, 0x83, 0x98, 0x4a, 0xcc, 0xdb, 0x1c, 0xf3, 0x26, 0x7a,
	0x34, 0x20, 0x66, 0xde, 0x6b, 0x3b, 0xd5, 0x60, 0x1e, 0xca, 0x69, 0xa6, 0xad, 0xe4, 0xb0, 0xa7,
	0xf7, 0x50, 0x72, 0x62, 0x36, 0xe9, 0xa1, 0xe4, 0xe4, 0x90, 0x30, 0xb4, 0x92, 0xb1, 0xe3, 0x08,
	0xf8, 0xc4, 0x8f, 0x2a, 0xf9, 0x57, 0x0d, 0xb2, 0xdd, 0x9a, 0x36, 0x5a, 0x4a, 0x05, 0x93, 0x36,
	0x05, 0xe4, 0x97, 0x87, 0x71, 0x91, 0x34, 0x8a, 0x9c, 0xc6, 0x5b, 0x68, 0x75, 0x40, 0x1a, 0x5d,
	0x3a, 0x14, 0x3a, 0xd6, 0xe0, 0x7f, 0x5d, 0x5b, 0x1b, 0x4a, 0x47, 0x94, 0xda, 0x47, 0xf3, 0x77,
	0x87, 0xf2, 0x79, 0x45, 0x21, 0x71, 0x02, 0xa5, 0xaa, 0x88, 0x15, 0xbc, 0x81, 0xa6, 0x1f, 0x3c,
	0x00, 0xd9, 0xb1, 0x8f, 0x14, 0xa5, 0x64, 0x7b, 0xeb, 0x41, 0x29, 0xb5, 0x99, 0xf6, 0xa0, 0x94,
	0xde, 0x3f, 0x87, 0xa6, 0x24, 0xdf, 0x73, 0xec, 0x6a, 0x22, 0x4a, 0x2b, 0x6e, 0xbf, 0x38, 0x29,
	0x68, 0xc7, 0x27, 0x05, 0xed, 0xaf, 0x93, 0x82, 0xf6, 0xf5, 0x69, 0x61, 0xe4, 0xf8, 0xb4, 0x30,
	0xf2, 0xfb, 0x69, 0x61, 0xe4, 0xc3, 0x7b, 0x35, 0x9b, 0xed, 0x37, 0xcb, 0x46, 0x85, 0xd6, 0x7b,
	0xe5, 0xfa, 0x4c, 0x65, 0x63, 0xad, 0x06, 0xf1, 0xcb, 0x93, 0xfc, 0x4f, 0xf9, 0xbb, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x58, 0x01, 0x02, 0x34, 0xcf, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of CheckMonikerAvailability items.
	CheckMonikerAvailability(ctx context.Context, in *QueryCheckMonikerAvailabilityRequest, opts ...grpc.CallOption) (*QueryCheckMonikerAvailabilityResponse, error)
	// Queries a list of GetRollupInfo items.
	GetRollupInfo(ctx context.Context, in *QueryGetRollupInfoRequest, opts ...grpc.CallOption) (*QueryGetRollupInfoResponse, error)
	// Queries a list of GetRollups items.
	GetRollups(ctx context.Context, in *QueryGetRollupsRequest, opts ...grpc.CallOption) (*QueryGetRollupsResponse, error)
	// Queries a list of GetRollupByMoniker items.
	GetRollupByMoniker(ctx context.Context, in *QueryGetRollupByMonikerRequest, opts ...grpc.CallOption) (*QueryGetRollupByMonikerResponse, error)
	// Queries a list of GetBatchInfo items.
	GetBatchInfo(ctx context.Context, in *QueryGetBatchInfoRequest, opts ...grpc.CallOption) (*QueryGetBatchInfoResponse, error)
	// Queries a list of GetAllBatches items.
	GetAllBatches(ctx context.Context, in *QueryGetAllBatchesRequest, opts ...grpc.CallOption) (*QueryGetAllBatchesResponse, error)
	// Queries a list of GetTotalStakedAmount items.
	GetTotalStakedAmount(ctx context.Context, in *QueryGetTotalStakedAmountRequest, opts ...grpc.CallOption) (*QueryGetTotalStakedAmountResponse, error)
	// Queries a list of GetStakeDetailsByUser items.
	GetStakeDetailsByUser(ctx context.Context, in *QueryGetStakeDetailsByUserRequest, opts ...grpc.CallOption) (*QueryGetStakeDetailsByUserResponse, error)
	// Queries a list of GetRollupStakedAmount items.
	GetRollupStakedAmount(ctx context.Context, in *QueryGetRollupStakedAmountRequest, opts ...grpc.CallOption) (*QueryGetRollupStakedAmountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckMonikerAvailability(ctx context.Context, in *QueryCheckMonikerAvailabilityRequest, opts ...grpc.CallOption) (*QueryCheckMonikerAvailabilityResponse, error) {
	out := new(QueryCheckMonikerAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/CheckMonikerAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollupInfo(ctx context.Context, in *QueryGetRollupInfoRequest, opts ...grpc.CallOption) (*QueryGetRollupInfoResponse, error) {
	out := new(QueryGetRollupInfoResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetRollupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollups(ctx context.Context, in *QueryGetRollupsRequest, opts ...grpc.CallOption) (*QueryGetRollupsResponse, error) {
	out := new(QueryGetRollupsResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetRollups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollupByMoniker(ctx context.Context, in *QueryGetRollupByMonikerRequest, opts ...grpc.CallOption) (*QueryGetRollupByMonikerResponse, error) {
	out := new(QueryGetRollupByMonikerResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetRollupByMoniker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBatchInfo(ctx context.Context, in *QueryGetBatchInfoRequest, opts ...grpc.CallOption) (*QueryGetBatchInfoResponse, error) {
	out := new(QueryGetBatchInfoResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetBatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllBatches(ctx context.Context, in *QueryGetAllBatchesRequest, opts ...grpc.CallOption) (*QueryGetAllBatchesResponse, error) {
	out := new(QueryGetAllBatchesResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetAllBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalStakedAmount(ctx context.Context, in *QueryGetTotalStakedAmountRequest, opts ...grpc.CallOption) (*QueryGetTotalStakedAmountResponse, error) {
	out := new(QueryGetTotalStakedAmountResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetTotalStakedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeDetailsByUser(ctx context.Context, in *QueryGetStakeDetailsByUserRequest, opts ...grpc.CallOption) (*QueryGetStakeDetailsByUserResponse, error) {
	out := new(QueryGetStakeDetailsByUserResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetStakeDetailsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollupStakedAmount(ctx context.Context, in *QueryGetRollupStakedAmountRequest, opts ...grpc.CallOption) (*QueryGetRollupStakedAmountResponse, error) {
	out := new(QueryGetRollupStakedAmountResponse)
	err := c.cc.Invoke(ctx, "/junction.rollup.Query/GetRollupStakedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of CheckMonikerAvailability items.
	CheckMonikerAvailability(context.Context, *QueryCheckMonikerAvailabilityRequest) (*QueryCheckMonikerAvailabilityResponse, error)
	// Queries a list of GetRollupInfo items.
	GetRollupInfo(context.Context, *QueryGetRollupInfoRequest) (*QueryGetRollupInfoResponse, error)
	// Queries a list of GetRollups items.
	GetRollups(context.Context, *QueryGetRollupsRequest) (*QueryGetRollupsResponse, error)
	// Queries a list of GetRollupByMoniker items.
	GetRollupByMoniker(context.Context, *QueryGetRollupByMonikerRequest) (*QueryGetRollupByMonikerResponse, error)
	// Queries a list of GetBatchInfo items.
	GetBatchInfo(context.Context, *QueryGetBatchInfoRequest) (*QueryGetBatchInfoResponse, error)
	// Queries a list of GetAllBatches items.
	GetAllBatches(context.Context, *QueryGetAllBatchesRequest) (*QueryGetAllBatchesResponse, error)
	// Queries a list of GetTotalStakedAmount items.
	GetTotalStakedAmount(context.Context, *QueryGetTotalStakedAmountRequest) (*QueryGetTotalStakedAmountResponse, error)
	// Queries a list of GetStakeDetailsByUser items.
	GetStakeDetailsByUser(context.Context, *QueryGetStakeDetailsByUserRequest) (*QueryGetStakeDetailsByUserResponse, error)
	// Queries a list of GetRollupStakedAmount items.
	GetRollupStakedAmount(context.Context, *QueryGetRollupStakedAmountRequest) (*QueryGetRollupStakedAmountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CheckMonikerAvailability(ctx context.Context, req *QueryCheckMonikerAvailabilityRequest) (*QueryCheckMonikerAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMonikerAvailability not implemented")
}
func (*UnimplementedQueryServer) GetRollupInfo(ctx context.Context, req *QueryGetRollupInfoRequest) (*QueryGetRollupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollupInfo not implemented")
}
func (*UnimplementedQueryServer) GetRollups(ctx context.Context, req *QueryGetRollupsRequest) (*QueryGetRollupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollups not implemented")
}
func (*UnimplementedQueryServer) GetRollupByMoniker(ctx context.Context, req *QueryGetRollupByMonikerRequest) (*QueryGetRollupByMonikerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollupByMoniker not implemented")
}
func (*UnimplementedQueryServer) GetBatchInfo(ctx context.Context, req *QueryGetBatchInfoRequest) (*QueryGetBatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchInfo not implemented")
}
func (*UnimplementedQueryServer) GetAllBatches(ctx context.Context, req *QueryGetAllBatchesRequest) (*QueryGetAllBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBatches not implemented")
}
func (*UnimplementedQueryServer) GetTotalStakedAmount(ctx context.Context, req *QueryGetTotalStakedAmountRequest) (*QueryGetTotalStakedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStakedAmount not implemented")
}
func (*UnimplementedQueryServer) GetStakeDetailsByUser(ctx context.Context, req *QueryGetStakeDetailsByUserRequest) (*QueryGetStakeDetailsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeDetailsByUser not implemented")
}
func (*UnimplementedQueryServer) GetRollupStakedAmount(ctx context.Context, req *QueryGetRollupStakedAmountRequest) (*QueryGetRollupStakedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollupStakedAmount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckMonikerAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckMonikerAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckMonikerAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/CheckMonikerAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckMonikerAvailability(ctx, req.(*QueryCheckMonikerAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetRollupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollupInfo(ctx, req.(*QueryGetRollupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetRollups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollups(ctx, req.(*QueryGetRollupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollupByMoniker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupByMonikerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollupByMoniker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetRollupByMoniker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollupByMoniker(ctx, req.(*QueryGetRollupByMonikerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetBatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBatchInfo(ctx, req.(*QueryGetBatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetAllBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBatches(ctx, req.(*QueryGetAllBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalStakedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTotalStakedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalStakedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetTotalStakedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalStakedAmount(ctx, req.(*QueryGetTotalStakedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeDetailsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakeDetailsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeDetailsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetStakeDetailsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeDetailsByUser(ctx, req.(*QueryGetStakeDetailsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollupStakedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupStakedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollupStakedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.rollup.Query/GetRollupStakedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollupStakedAmount(ctx, req.(*QueryGetRollupStakedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junction.rollup.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CheckMonikerAvailability",
			Handler:    _Query_CheckMonikerAvailability_Handler,
		},
		{
			MethodName: "GetRollupInfo",
			Handler:    _Query_GetRollupInfo_Handler,
		},
		{
			MethodName: "GetRollups",
			Handler:    _Query_GetRollups_Handler,
		},
		{
			MethodName: "GetRollupByMoniker",
			Handler:    _Query_GetRollupByMoniker_Handler,
		},
		{
			MethodName: "GetBatchInfo",
			Handler:    _Query_GetBatchInfo_Handler,
		},
		{
			MethodName: "GetAllBatches",
			Handler:    _Query_GetAllBatches_Handler,
		},
		{
			MethodName: "GetTotalStakedAmount",
			Handler:    _Query_GetTotalStakedAmount_Handler,
		},
		{
			MethodName: "GetStakeDetailsByUser",
			Handler:    _Query_GetStakeDetailsByUser_Handler,
		},
		{
			MethodName: "GetRollupStakedAmount",
			Handler:    _Query_GetRollupStakedAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/rollup/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckMonikerAvailabilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckMonikerAvailabilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckMonikerAvailabilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckMonikerAvailabilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckMonikerAvailabilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckMonikerAvailabilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAvailable {
		i--
		if m.IsAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RollupInfo != nil {
		{
			size, err := m.RollupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rollups) > 0 {
		for iNdEx := len(m.Rollups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupByMonikerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupByMonikerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupByMonikerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupByMonikerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupByMonikerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupByMonikerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RollupInfo != nil {
		{
			size, err := m.RollupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBatchInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBatchInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBatchInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNo != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNo))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBatchInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBatchInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBatchInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchInfo != nil {
		{
			size, err := m.BatchInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllBatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XOrder != nil {
		{
			size := m.XOrder.Size()
			i -= size
			if _, err := m.XOrder.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XLimit != nil {
		{
			size := m.XLimit.Size()
			i -= size
			if _, err := m.XLimit.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XOffset != nil {
		{
			size := m.XOffset.Size()
			i -= size
			if _, err := m.XOffset.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllBatchesRequest_Offset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBatchesRequest_Offset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.Offset))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryGetAllBatchesRequest_Limit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBatchesRequest_Limit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *QueryGetAllBatchesRequest_Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBatchesRequest_Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Order)
	copy(dAtA[i:], m.Order)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.Order)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *QueryGetAllBatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Batch) > 0 {
		for iNdEx := len(m.Batch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalStakedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalStakedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalStakedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalStakedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalStakedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalStakedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStakedAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalStakedAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creators) > 0 {
		for iNdEx := len(m.Creators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Creators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Creator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Creator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Creator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rollups) > 0 {
		for iNdEx := len(m.Rollups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollupStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AmountStaked != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AmountStaked))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeDetailsByUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeDetailsByUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeDetailsByUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeDetailsByUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeDetailsByUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeDetailsByUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rollups) > 0 {
		for iNdEx := len(m.Rollups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalStakedAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalStakedAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupStakedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupStakedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupStakedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollupId) > 0 {
		i -= len(m.RollupId)
		copy(dAtA[i:], m.RollupId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRollupStakedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRollupStakedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRollupStakedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.AmountStaked != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AmountStaked))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckMonikerAvailabilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckMonikerAvailabilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAvailable {
		n += 2
	}
	return n
}

func (m *QueryGetRollupInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRollupInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RollupInfo != nil {
		l = m.RollupInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRollupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRollupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rollups) > 0 {
		for _, e := range m.Rollups {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRollupByMonikerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRollupByMonikerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RollupInfo != nil {
		l = m.RollupInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBatchInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BatchNo != 0 {
		n += 1 + sovQuery(uint64(m.BatchNo))
	}
	return n
}

func (m *QueryGetBatchInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchInfo != nil {
		l = m.BatchInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllBatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.XOffset != nil {
		n += m.XOffset.Size()
	}
	if m.XLimit != nil {
		n += m.XLimit.Size()
	}
	if m.XOrder != nil {
		n += m.XOrder.Size()
	}
	return n
}

func (m *QueryGetAllBatchesRequest_Offset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.Offset))
	return n
}
func (m *QueryGetAllBatchesRequest_Limit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.Limit))
	return n
}
func (m *QueryGetAllBatchesRequest_Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Order)
	n += 1 + l + sovQuery(uint64(l))
	return n
}
func (m *QueryGetAllBatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batch) > 0 {
		for _, e := range m.Batch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	if m.Offset != 0 {
		n += 1 + sovQuery(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTotalStakedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTotalStakedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Creators) > 0 {
		for _, e := range m.Creators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalStakedAmount != 0 {
		n += 1 + sovQuery(uint64(m.TotalStakedAmount))
	}
	return n
}

func (m *Creator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Rollups) > 0 {
		for _, e := range m.Rollups {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RollupStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AmountStaked != 0 {
		n += 1 + sovQuery(uint64(m.AmountStaked))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakeDetailsByUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakeDetailsByUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalStakedAmount != 0 {
		n += 1 + sovQuery(uint64(m.TotalStakedAmount))
	}
	if len(m.Rollups) > 0 {
		for _, e := range m.Rollups {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetRollupStakedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRollupStakedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AmountStaked != 0 {
		n += 1 + sovQuery(uint64(m.AmountStaked))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckMonikerAvailabilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckMonikerAvailabilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckMonikerAvailabilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckMonikerAvailabilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckMonikerAvailabilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckMonikerAvailabilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollupInfo == nil {
				m.RollupInfo = &RollupMetadata{}
			}
			if err := m.RollupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollups = append(m.Rollups, RollupMetadata{})
			if err := m.Rollups[len(m.Rollups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupByMonikerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupByMonikerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupByMonikerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupByMonikerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupByMonikerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupByMonikerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollupInfo == nil {
				m.RollupInfo = &RollupMetadata{}
			}
			if err := m.RollupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBatchInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBatchInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBatchInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNo", wireType)
			}
			m.BatchNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBatchInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBatchInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBatchInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchInfo == nil {
				m.BatchInfo = &Batch{}
			}
			if err := m.BatchInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllBatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XOffset = &QueryGetAllBatchesRequest_Offset{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XLimit = &QueryGetAllBatchesRequest_Limit{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOrder = &QueryGetAllBatchesRequest_Order{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllBatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batch = append(m.Batch, Batch{})
			if err := m.Batch[len(m.Batch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalStakedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalStakedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalStakedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalStakedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalStakedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalStakedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creators = append(m.Creators, &Creator{})
			if err := m.Creators[len(m.Creators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedAmount", wireType)
			}
			m.TotalStakedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStakedAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Creator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Creator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Creator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollups = append(m.Rollups, &RollupStake{})
			if err := m.Rollups[len(m.Rollups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollupStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountStaked", wireType)
			}
			m.AmountStaked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountStaked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeDetailsByUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeDetailsByUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeDetailsByUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeDetailsByUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeDetailsByUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeDetailsByUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedAmount", wireType)
			}
			m.TotalStakedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStakedAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollups = append(m.Rollups, &RollupStake{})
			if err := m.Rollups[len(m.Rollups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupStakedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupStakedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupStakedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRollupStakedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRollupStakedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRollupStakedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountStaked", wireType)
			}
			m.AmountStaked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountStaked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
