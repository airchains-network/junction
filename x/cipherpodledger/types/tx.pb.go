// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/cipherpodledger/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgRegisterFhvm struct {
	Creator                       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId                       string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ChainName                     string `protobuf:"bytes,3,opt,name=chainName,proto3" json:"chainName,omitempty"`
	ProofType                     string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
	ProvingNetworkVerificationKey []byte `protobuf:"bytes,5,opt,name=provingNetworkVerificationKey,proto3" json:"provingNetworkVerificationKey,omitempty"`
	DaProvider                    string `protobuf:"bytes,6,opt,name=daProvider,proto3" json:"daProvider,omitempty"`
	DaBlobId                      string `protobuf:"bytes,7,opt,name=daBlobId,proto3" json:"daBlobId,omitempty"`
	RelayerGaddress               string `protobuf:"bytes,8,opt,name=relayerGaddress,proto3" json:"relayerGaddress,omitempty"`
	RelayerAscAddress             string `protobuf:"bytes,9,opt,name=relayerAscAddress,proto3" json:"relayerAscAddress,omitempty"`
	PicContractAddress            string `protobuf:"bytes,10,opt,name=picContractAddress,proto3" json:"picContractAddress,omitempty"`
	AclContractAddress            string `protobuf:"bytes,11,opt,name=aclContractAddress,proto3" json:"aclContractAddress,omitempty"`
	TfheExecutorContractAddress   string `protobuf:"bytes,12,opt,name=tfheExecutorContractAddress,proto3" json:"tfheExecutorContractAddress,omitempty"`
	KmsVerifierContractAddress    string `protobuf:"bytes,13,opt,name=kmsVerifierContractAddress,proto3" json:"kmsVerifierContractAddress,omitempty"`
	GatewayContractAddress        string `protobuf:"bytes,14,opt,name=gatewayContractAddress,proto3" json:"gatewayContractAddress,omitempty"`
	AscChildContractAddress       string `protobuf:"bytes,15,opt,name=ascChildContractAddress,proto3" json:"ascChildContractAddress,omitempty"`
}

func (m *MsgRegisterFhvm) Reset()         { *m = MsgRegisterFhvm{} }
func (m *MsgRegisterFhvm) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFhvm) ProtoMessage()    {}
func (*MsgRegisterFhvm) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{2}
}
func (m *MsgRegisterFhvm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFhvm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFhvm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFhvm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFhvm.Merge(m, src)
}
func (m *MsgRegisterFhvm) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFhvm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFhvm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFhvm proto.InternalMessageInfo

func (m *MsgRegisterFhvm) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterFhvm) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgRegisterFhvm) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *MsgRegisterFhvm) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgRegisterFhvm) GetProvingNetworkVerificationKey() []byte {
	if m != nil {
		return m.ProvingNetworkVerificationKey
	}
	return nil
}

func (m *MsgRegisterFhvm) GetDaProvider() string {
	if m != nil {
		return m.DaProvider
	}
	return ""
}

func (m *MsgRegisterFhvm) GetDaBlobId() string {
	if m != nil {
		return m.DaBlobId
	}
	return ""
}

func (m *MsgRegisterFhvm) GetRelayerGaddress() string {
	if m != nil {
		return m.RelayerGaddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetRelayerAscAddress() string {
	if m != nil {
		return m.RelayerAscAddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetPicContractAddress() string {
	if m != nil {
		return m.PicContractAddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetAclContractAddress() string {
	if m != nil {
		return m.AclContractAddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetTfheExecutorContractAddress() string {
	if m != nil {
		return m.TfheExecutorContractAddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetKmsVerifierContractAddress() string {
	if m != nil {
		return m.KmsVerifierContractAddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetGatewayContractAddress() string {
	if m != nil {
		return m.GatewayContractAddress
	}
	return ""
}

func (m *MsgRegisterFhvm) GetAscChildContractAddress() string {
	if m != nil {
		return m.AscChildContractAddress
	}
	return ""
}

type MsgRegisterFhvmResponse struct {
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgRegisterFhvmResponse) Reset()         { *m = MsgRegisterFhvmResponse{} }
func (m *MsgRegisterFhvmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFhvmResponse) ProtoMessage()    {}
func (*MsgRegisterFhvmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{3}
}
func (m *MsgRegisterFhvmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFhvmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFhvmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFhvmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFhvmResponse.Merge(m, src)
}
func (m *MsgRegisterFhvmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFhvmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFhvmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFhvmResponse proto.InternalMessageInfo

func (m *MsgRegisterFhvmResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type MsgSubmitPod struct {
	SubmittedBy             string `protobuf:"bytes,1,opt,name=submittedBy,proto3" json:"submittedBy,omitempty"`
	AscChildContractAddress string `protobuf:"bytes,2,opt,name=ascChildContractAddress,proto3" json:"ascChildContractAddress,omitempty"`
	PodNumber               uint64 `protobuf:"varint,3,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
	StationId               string `protobuf:"bytes,4,opt,name=stationId,proto3" json:"stationId,omitempty"`
	DaBlobId                string `protobuf:"bytes,5,opt,name=daBlobId,proto3" json:"daBlobId,omitempty"`
	Timestamp               int32  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProvingNetwork          string `protobuf:"bytes,7,opt,name=provingNetwork,proto3" json:"provingNetwork,omitempty"`
	ZkFhepublicWitness      []byte `protobuf:"bytes,9,opt,name=zkFhepublicWitness,proto3" json:"zkFhepublicWitness,omitempty"`
}

func (m *MsgSubmitPod) Reset()         { *m = MsgSubmitPod{} }
func (m *MsgSubmitPod) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPod) ProtoMessage()    {}
func (*MsgSubmitPod) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{4}
}
func (m *MsgSubmitPod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPod.Merge(m, src)
}
func (m *MsgSubmitPod) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPod proto.InternalMessageInfo

func (m *MsgSubmitPod) GetSubmittedBy() string {
	if m != nil {
		return m.SubmittedBy
	}
	return ""
}

func (m *MsgSubmitPod) GetAscChildContractAddress() string {
	if m != nil {
		return m.AscChildContractAddress
	}
	return ""
}

func (m *MsgSubmitPod) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *MsgSubmitPod) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *MsgSubmitPod) GetDaBlobId() string {
	if m != nil {
		return m.DaBlobId
	}
	return ""
}

func (m *MsgSubmitPod) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgSubmitPod) GetProvingNetwork() string {
	if m != nil {
		return m.ProvingNetwork
	}
	return ""
}

func (m *MsgSubmitPod) GetZkFhepublicWitness() []byte {
	if m != nil {
		return m.ZkFhepublicWitness
	}
	return nil
}

type MsgSubmitPodResponse struct {
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgSubmitPodResponse) Reset()         { *m = MsgSubmitPodResponse{} }
func (m *MsgSubmitPodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPodResponse) ProtoMessage()    {}
func (*MsgSubmitPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{5}
}
func (m *MsgSubmitPodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPodResponse.Merge(m, src)
}
func (m *MsgSubmitPodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPodResponse proto.InternalMessageInfo

func (m *MsgSubmitPodResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type MsgVerifyPod struct {
	SubmittedBy    string `protobuf:"bytes,1,opt,name=submittedBy,proto3" json:"submittedBy,omitempty"`
	StationId      string `protobuf:"bytes,2,opt,name=stationId,proto3" json:"stationId,omitempty"`
	PodNumber      uint64 `protobuf:"varint,3,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
	ProvingNetwork string `protobuf:"bytes,4,opt,name=provingNetwork,proto3" json:"provingNetwork,omitempty"`
	ZkFheproof     []byte `protobuf:"bytes,5,opt,name=zkFheproof,proto3" json:"zkFheproof,omitempty"`
}

func (m *MsgVerifyPod) Reset()         { *m = MsgVerifyPod{} }
func (m *MsgVerifyPod) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyPod) ProtoMessage()    {}
func (*MsgVerifyPod) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{6}
}
func (m *MsgVerifyPod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyPod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyPod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyPod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyPod.Merge(m, src)
}
func (m *MsgVerifyPod) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyPod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyPod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyPod proto.InternalMessageInfo

func (m *MsgVerifyPod) GetSubmittedBy() string {
	if m != nil {
		return m.SubmittedBy
	}
	return ""
}

func (m *MsgVerifyPod) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *MsgVerifyPod) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *MsgVerifyPod) GetProvingNetwork() string {
	if m != nil {
		return m.ProvingNetwork
	}
	return ""
}

func (m *MsgVerifyPod) GetZkFheproof() []byte {
	if m != nil {
		return m.ZkFheproof
	}
	return nil
}

type MsgVerifyPodResponse struct {
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgVerifyPodResponse) Reset()         { *m = MsgVerifyPodResponse{} }
func (m *MsgVerifyPodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyPodResponse) ProtoMessage()    {}
func (*MsgVerifyPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{7}
}
func (m *MsgVerifyPodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyPodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyPodResponse.Merge(m, src)
}
func (m *MsgVerifyPodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyPodResponse proto.InternalMessageInfo

func (m *MsgVerifyPodResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type MsgLogBlobData struct {
	Creator   string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StationId string   `protobuf:"bytes,2,opt,name=stationId,proto3" json:"stationId,omitempty"`
	PodBundle string   `protobuf:"bytes,3,opt,name=podBundle,proto3" json:"podBundle,omitempty"`
	PodRange  []uint64 `protobuf:"varint,4,rep,packed,name=podRange,proto3" json:"podRange,omitempty"`
}

func (m *MsgLogBlobData) Reset()         { *m = MsgLogBlobData{} }
func (m *MsgLogBlobData) String() string { return proto.CompactTextString(m) }
func (*MsgLogBlobData) ProtoMessage()    {}
func (*MsgLogBlobData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{8}
}
func (m *MsgLogBlobData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogBlobData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogBlobData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogBlobData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogBlobData.Merge(m, src)
}
func (m *MsgLogBlobData) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogBlobData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogBlobData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogBlobData proto.InternalMessageInfo

func (m *MsgLogBlobData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLogBlobData) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *MsgLogBlobData) GetPodBundle() string {
	if m != nil {
		return m.PodBundle
	}
	return ""
}

func (m *MsgLogBlobData) GetPodRange() []uint64 {
	if m != nil {
		return m.PodRange
	}
	return nil
}

type MsgLogBlobDataResponse struct {
}

func (m *MsgLogBlobDataResponse) Reset()         { *m = MsgLogBlobDataResponse{} }
func (m *MsgLogBlobDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLogBlobDataResponse) ProtoMessage()    {}
func (*MsgLogBlobDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfab6966ce45ab39, []int{9}
}
func (m *MsgLogBlobDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogBlobDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogBlobDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogBlobDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogBlobDataResponse.Merge(m, src)
}
func (m *MsgLogBlobDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogBlobDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogBlobDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogBlobDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "junction.cipherpodledger.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "junction.cipherpodledger.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgRegisterFhvm)(nil), "junction.cipherpodledger.MsgRegisterFhvm")
	proto.RegisterType((*MsgRegisterFhvmResponse)(nil), "junction.cipherpodledger.MsgRegisterFhvmResponse")
	proto.RegisterType((*MsgSubmitPod)(nil), "junction.cipherpodledger.MsgSubmitPod")
	proto.RegisterType((*MsgSubmitPodResponse)(nil), "junction.cipherpodledger.MsgSubmitPodResponse")
	proto.RegisterType((*MsgVerifyPod)(nil), "junction.cipherpodledger.MsgVerifyPod")
	proto.RegisterType((*MsgVerifyPodResponse)(nil), "junction.cipherpodledger.MsgVerifyPodResponse")
	proto.RegisterType((*MsgLogBlobData)(nil), "junction.cipherpodledger.MsgLogBlobData")
	proto.RegisterType((*MsgLogBlobDataResponse)(nil), "junction.cipherpodledger.MsgLogBlobDataResponse")
}

func init() { proto.RegisterFile("junction/cipherpodledger/tx.proto", fileDescriptor_cfab6966ce45ab39) }

var fileDescriptor_cfab6966ce45ab39 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0x76, 0x1a, 0xbf, 0x98, 0x84, 0x8e, 0xa2, 0x64, 0x6b, 0x8a, 0x31, 0x96, 0xa8,
	0x4c, 0x44, 0x6d, 0x52, 0xa4, 0x0a, 0x45, 0x2a, 0xa2, 0x4e, 0x29, 0xaa, 0x20, 0x51, 0xb4, 0x05,
	0x2a, 0x71, 0x41, 0xe3, 0xdd, 0xc9, 0x7a, 0xc8, 0xee, 0xce, 0x6a, 0x66, 0x36, 0x8d, 0x39, 0x21,
	0x8e, 0x9c, 0xfa, 0x0f, 0x70, 0xe7, 0x98, 0x03, 0x57, 0xae, 0xa8, 0x42, 0x42, 0x8a, 0x38, 0x71,
	0x42, 0x28, 0x39, 0xe4, 0xdf, 0x40, 0x33, 0xfb, 0xc3, 0xeb, 0x75, 0xbc, 0xf1, 0x25, 0xf1, 0x7b,
	0xdf, 0xf7, 0xe6, 0xcd, 0x7b, 0xfb, 0xbd, 0x99, 0x81, 0x77, 0xbf, 0x8f, 0x02, 0x5b, 0x52, 0x16,
	0xf4, 0x6c, 0x1a, 0x0e, 0x09, 0x0f, 0x99, 0xe3, 0x11, 0xc7, 0x25, 0xbc, 0x27, 0x4f, 0xbb, 0x21,
	0x67, 0x92, 0x21, 0x33, 0xa5, 0x74, 0x0b, 0x94, 0xc6, 0x6d, 0xec, 0xd3, 0x80, 0xf5, 0xf4, 0xdf,
	0x98, 0xdc, 0xd8, 0xb2, 0x99, 0xf0, 0x99, 0xe8, 0xf9, 0xc2, 0xed, 0x9d, 0xec, 0xa8, 0x7f, 0x09,
	0x70, 0x27, 0x06, 0xbe, 0xd3, 0x56, 0x2f, 0x36, 0x12, 0x68, 0xc3, 0x65, 0x2e, 0x8b, 0xfd, 0xea,
	0x57, 0xe2, 0x7d, 0x6f, 0xe6, 0xce, 0x42, 0xcc, 0xb1, 0x9f, 0x04, 0xb7, 0xff, 0x32, 0x60, 0x7d,
	0x5f, 0xb8, 0x5f, 0x87, 0x0e, 0x96, 0xe4, 0x50, 0x23, 0xe8, 0x21, 0xd4, 0x70, 0x24, 0x87, 0x8c,
	0x53, 0x39, 0x32, 0x8d, 0x96, 0xd1, 0xa9, 0xf5, 0xcd, 0xbf, 0x7f, 0xbb, 0xbf, 0x91, 0x64, 0x7d,
	0xec, 0x38, 0x9c, 0x08, 0xf1, 0x5c, 0x72, 0x1a, 0xb8, 0xd6, 0x98, 0x8a, 0xf6, 0x60, 0x39, 0x5e,
	0xdb, 0x5c, 0x6c, 0x19, 0x9d, 0xd5, 0x07, 0xad, 0xee, 0xac, 0xd2, 0xbb, 0x71, 0xa6, 0x7e, 0xed,
	0xf5, 0xbf, 0xef, 0x2c, 0xfc, 0x7a, 0x75, 0xb6, 0x6d, 0x58, 0x49, 0xe8, 0xee, 0xa3, 0x9f, 0xae,
	0xce, 0xb6, 0xc7, 0x8b, 0xfe, 0x7c, 0x75, 0xb6, 0xbd, 0x9d, 0x95, 0x72, 0x3a, 0x55, 0x4c, 0x61,
	0xef, 0xed, 0x3b, 0xb0, 0x55, 0x70, 0x59, 0x44, 0x84, 0x2c, 0x10, 0xa4, 0xfd, 0x7b, 0x55, 0x97,
	0x6a, 0x11, 0x97, 0x0a, 0x49, 0xf8, 0xd3, 0xe1, 0x89, 0x8f, 0x4c, 0xb8, 0x65, 0x73, 0x82, 0x25,
	0xe3, 0x71, 0xa1, 0x56, 0x6a, 0x6a, 0x64, 0x88, 0x69, 0xf0, 0xcc, 0xd1, 0xd5, 0x28, 0x24, 0x36,
	0xd1, 0x5d, 0xa8, 0xe9, 0x9f, 0x07, 0xd8, 0x27, 0xe6, 0x92, 0xc6, 0xc6, 0x0e, 0x85, 0x86, 0x9c,
	0xb1, 0xa3, 0xaf, 0x46, 0x21, 0x31, 0x2b, 0x31, 0x9a, 0x39, 0xd0, 0x13, 0x78, 0x3b, 0xe4, 0xec,
	0x84, 0x06, 0xee, 0x01, 0x91, 0x2f, 0x19, 0x3f, 0xfe, 0x86, 0x70, 0x7a, 0x44, 0x6d, 0xac, 0xca,
	0xfb, 0x82, 0x8c, 0xcc, 0x6a, 0xcb, 0xe8, 0xd4, 0xad, 0x72, 0x12, 0x6a, 0x02, 0x38, 0xf8, 0x50,
	0x51, 0x1c, 0xc2, 0xcd, 0x65, 0x9d, 0x24, 0xe7, 0x41, 0x0d, 0x58, 0x71, 0x70, 0xdf, 0x63, 0x83,
	0x67, 0x8e, 0x79, 0x4b, 0xa3, 0x99, 0x8d, 0x3a, 0xb0, 0xce, 0x89, 0x87, 0x47, 0x84, 0x7f, 0x8e,
	0xe3, 0x0f, 0x69, 0xae, 0x68, 0x4a, 0xd1, 0x8d, 0x3e, 0x80, 0xdb, 0x89, 0xeb, 0xb1, 0xb0, 0x93,
	0x8f, 0x6e, 0xd6, 0x34, 0x77, 0x1a, 0x40, 0x5d, 0x40, 0x21, 0xb5, 0xf7, 0x58, 0x20, 0x39, 0xb6,
	0x65, 0x4a, 0x07, 0x4d, 0xbf, 0x06, 0x51, 0x7c, 0x6c, 0x7b, 0x45, 0xfe, 0x6a, 0xcc, 0x9f, 0x46,
	0xd0, 0xa7, 0xf0, 0x96, 0x3c, 0x1a, 0x92, 0xcf, 0x4e, 0x89, 0x1d, 0x49, 0xc6, 0x8b, 0x81, 0x75,
	0x1d, 0x58, 0x46, 0x41, 0x9f, 0x40, 0xe3, 0xd8, 0x17, 0x71, 0x2f, 0xc9, 0xd4, 0x02, 0x6f, 0xe8,
	0x05, 0x4a, 0x18, 0xe8, 0x21, 0x6c, 0xba, 0x58, 0x92, 0x97, 0x78, 0x54, 0x8c, 0x5d, 0xd3, 0xb1,
	0x33, 0x50, 0xf4, 0x31, 0x6c, 0x61, 0x61, 0xef, 0x0d, 0xa9, 0xe7, 0x14, 0x03, 0xd7, 0x75, 0xe0,
	0x2c, 0x78, 0xb7, 0xae, 0x66, 0x21, 0x55, 0x64, 0x7b, 0x47, 0x4b, 0x3b, 0x2f, 0xdf, 0x54, 0xda,
	0x68, 0x13, 0x96, 0x85, 0xc4, 0x32, 0x12, 0x5a, 0xc5, 0x2b, 0x56, 0x62, 0xb5, 0xff, 0x5c, 0x84,
	0xfa, 0xbe, 0x70, 0x9f, 0x47, 0x03, 0x9f, 0xca, 0x43, 0xe6, 0xa0, 0x16, 0xac, 0x0a, 0x6d, 0x48,
	0xe2, 0xf4, 0x93, 0xe1, 0xb6, 0xf2, 0xae, 0xb2, 0xdd, 0x2e, 0x96, 0xee, 0x56, 0x2b, 0x9f, 0x39,
	0x07, 0x91, 0x3f, 0x20, 0x5c, 0xcf, 0x45, 0xc5, 0x1a, 0x3b, 0x14, 0xaa, 0x36, 0x45, 0x99, 0x9a,
	0xa8, 0x64, 0x2e, 0x32, 0xc7, 0x84, 0x62, 0xab, 0x05, 0xc5, 0xde, 0x85, 0x9a, 0xa4, 0x3e, 0x11,
	0x12, 0xfb, 0xa1, 0x16, 0x7b, 0xd5, 0x1a, 0x3b, 0xd0, 0x3d, 0x58, 0x9b, 0x1c, 0x96, 0x44, 0xf1,
	0x05, 0xaf, 0xd2, 0xdb, 0x0f, 0xc7, 0x4f, 0x87, 0x24, 0x8c, 0x06, 0x1e, 0xb5, 0x5f, 0x50, 0x19,
	0xa4, 0x72, 0xae, 0x5b, 0xd7, 0x20, 0xbb, 0x6f, 0xaa, 0xde, 0xe7, 0x3b, 0xd3, 0xee, 0xc2, 0x46,
	0xbe, 0x97, 0x37, 0x36, 0xff, 0x0f, 0x43, 0x37, 0x5f, 0xcb, 0x69, 0x34, 0x5f, 0xf3, 0x27, 0x9a,
	0xb4, 0x58, 0x6c, 0x52, 0x79, 0x83, 0xa7, 0x1b, 0x51, 0xb9, 0xb6, 0x11, 0x4d, 0x80, 0xb8, 0x5c,
	0x75, 0x28, 0x25, 0xe7, 0x4d, 0xce, 0x33, 0xb3, 0xf0, 0xac, 0x8e, 0x1b, 0x0b, 0x7f, 0x65, 0xc0,
	0xda, 0xbe, 0x70, 0xbf, 0x64, 0xae, 0xfa, 0x82, 0x4f, 0xb0, 0xc4, 0x25, 0xe7, 0xec, 0x3c, 0x25,
	0xf7, 0xa3, 0xc0, 0xf1, 0xb2, 0xb3, 0x36, 0x73, 0x28, 0xd5, 0x84, 0xcc, 0xb1, 0x70, 0xe0, 0xaa,
	0xa3, 0x76, 0xa9, 0x53, 0xb1, 0x32, 0xbb, 0x30, 0x3b, 0x26, 0x6c, 0x4e, 0xee, 0x28, 0x2d, 0xe2,
	0xc1, 0x2f, 0x15, 0x58, 0xda, 0x17, 0x2e, 0xf2, 0xa0, 0x3e, 0x71, 0x09, 0xbe, 0x3f, 0xfb, 0xf2,
	0x2a, 0x5c, 0x30, 0x8d, 0x9d, 0xb9, 0xa9, 0x59, 0xeb, 0x3c, 0xa8, 0x4f, 0xdc, 0x43, 0xe5, 0xd9,
	0xf2, 0xd4, 0x1b, 0xb2, 0x5d, 0x7b, 0x3c, 0xd8, 0x50, 0x1b, 0x1f, 0x01, 0xf7, 0x4a, 0xe3, 0x33,
	0x5e, 0xa3, 0x3b, 0x1f, 0x2f, 0x9f, 0x64, 0x2c, 0xf5, 0xf2, 0x24, 0x19, 0xef, 0x86, 0x24, 0xd3,
	0x92, 0xa3, 0xb0, 0x9a, 0x97, 0x55, 0xa7, 0x34, 0x3c, 0xc7, 0x6c, 0x7c, 0x38, 0x2f, 0x33, 0x4d,
	0xd5, 0xa8, 0xfe, 0xa8, 0xde, 0x25, 0xfd, 0x17, 0xaf, 0x2f, 0x9a, 0xc6, 0xf9, 0x45, 0xd3, 0xf8,
	0xef, 0xa2, 0x69, 0xbc, 0xba, 0x6c, 0x2e, 0x9c, 0x5f, 0x36, 0x17, 0xfe, 0xb9, 0x6c, 0x2e, 0x7c,
	0xfb, 0xc8, 0xa5, 0x72, 0x18, 0x0d, 0xba, 0x36, 0xf3, 0x7b, 0x98, 0x72, 0xfd, 0x04, 0x10, 0xf7,
	0x83, 0x78, 0xcc, 0x7a, 0x25, 0x6f, 0x16, 0x39, 0x0a, 0x89, 0x18, 0x2c, 0xeb, 0x07, 0xd8, 0x47,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x5c, 0x31, 0x20, 0x43, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RegisterFhvm(ctx context.Context, in *MsgRegisterFhvm, opts ...grpc.CallOption) (*MsgRegisterFhvmResponse, error)
	SubmitPod(ctx context.Context, in *MsgSubmitPod, opts ...grpc.CallOption) (*MsgSubmitPodResponse, error)
	VerifyPod(ctx context.Context, in *MsgVerifyPod, opts ...grpc.CallOption) (*MsgVerifyPodResponse, error)
	LogBlobData(ctx context.Context, in *MsgLogBlobData, opts ...grpc.CallOption) (*MsgLogBlobDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterFhvm(ctx context.Context, in *MsgRegisterFhvm, opts ...grpc.CallOption) (*MsgRegisterFhvmResponse, error) {
	out := new(MsgRegisterFhvmResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Msg/RegisterFhvm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPod(ctx context.Context, in *MsgSubmitPod, opts ...grpc.CallOption) (*MsgSubmitPodResponse, error) {
	out := new(MsgSubmitPodResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Msg/SubmitPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyPod(ctx context.Context, in *MsgVerifyPod, opts ...grpc.CallOption) (*MsgVerifyPodResponse, error) {
	out := new(MsgVerifyPodResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Msg/VerifyPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogBlobData(ctx context.Context, in *MsgLogBlobData, opts ...grpc.CallOption) (*MsgLogBlobDataResponse, error) {
	out := new(MsgLogBlobDataResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Msg/LogBlobData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RegisterFhvm(context.Context, *MsgRegisterFhvm) (*MsgRegisterFhvmResponse, error)
	SubmitPod(context.Context, *MsgSubmitPod) (*MsgSubmitPodResponse, error)
	VerifyPod(context.Context, *MsgVerifyPod) (*MsgVerifyPodResponse, error)
	LogBlobData(context.Context, *MsgLogBlobData) (*MsgLogBlobDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RegisterFhvm(ctx context.Context, req *MsgRegisterFhvm) (*MsgRegisterFhvmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFhvm not implemented")
}
func (*UnimplementedMsgServer) SubmitPod(ctx context.Context, req *MsgSubmitPod) (*MsgSubmitPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPod not implemented")
}
func (*UnimplementedMsgServer) VerifyPod(ctx context.Context, req *MsgVerifyPod) (*MsgVerifyPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPod not implemented")
}
func (*UnimplementedMsgServer) LogBlobData(ctx context.Context, req *MsgLogBlobData) (*MsgLogBlobDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogBlobData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterFhvm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterFhvm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterFhvm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Msg/RegisterFhvm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterFhvm(ctx, req.(*MsgRegisterFhvm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Msg/SubmitPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPod(ctx, req.(*MsgSubmitPod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyPod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Msg/VerifyPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyPod(ctx, req.(*MsgVerifyPod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogBlobData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogBlobData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogBlobData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Msg/LogBlobData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogBlobData(ctx, req.(*MsgLogBlobData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junction.cipherpodledger.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterFhvm",
			Handler:    _Msg_RegisterFhvm_Handler,
		},
		{
			MethodName: "SubmitPod",
			Handler:    _Msg_SubmitPod_Handler,
		},
		{
			MethodName: "VerifyPod",
			Handler:    _Msg_VerifyPod_Handler,
		},
		{
			MethodName: "LogBlobData",
			Handler:    _Msg_LogBlobData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/cipherpodledger/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFhvm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFhvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFhvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AscChildContractAddress) > 0 {
		i -= len(m.AscChildContractAddress)
		copy(dAtA[i:], m.AscChildContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AscChildContractAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.GatewayContractAddress) > 0 {
		i -= len(m.GatewayContractAddress)
		copy(dAtA[i:], m.GatewayContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayContractAddress)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.KmsVerifierContractAddress) > 0 {
		i -= len(m.KmsVerifierContractAddress)
		copy(dAtA[i:], m.KmsVerifierContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KmsVerifierContractAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TfheExecutorContractAddress) > 0 {
		i -= len(m.TfheExecutorContractAddress)
		copy(dAtA[i:], m.TfheExecutorContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TfheExecutorContractAddress)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AclContractAddress) > 0 {
		i -= len(m.AclContractAddress)
		copy(dAtA[i:], m.AclContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AclContractAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PicContractAddress) > 0 {
		i -= len(m.PicContractAddress)
		copy(dAtA[i:], m.PicContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PicContractAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RelayerAscAddress) > 0 {
		i -= len(m.RelayerAscAddress)
		copy(dAtA[i:], m.RelayerAscAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerAscAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RelayerGaddress) > 0 {
		i -= len(m.RelayerGaddress)
		copy(dAtA[i:], m.RelayerGaddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerGaddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DaBlobId) > 0 {
		i -= len(m.DaBlobId)
		copy(dAtA[i:], m.DaBlobId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DaBlobId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DaProvider) > 0 {
		i -= len(m.DaProvider)
		copy(dAtA[i:], m.DaProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DaProvider)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProvingNetworkVerificationKey) > 0 {
		i -= len(m.ProvingNetworkVerificationKey)
		copy(dAtA[i:], m.ProvingNetworkVerificationKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProvingNetworkVerificationKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFhvmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFhvmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFhvmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZkFhepublicWitness) > 0 {
		i -= len(m.ZkFhepublicWitness)
		copy(dAtA[i:], m.ZkFhepublicWitness)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ZkFhepublicWitness)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProvingNetwork) > 0 {
		i -= len(m.ProvingNetwork)
		copy(dAtA[i:], m.ProvingNetwork)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProvingNetwork)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DaBlobId) > 0 {
		i -= len(m.DaBlobId)
		copy(dAtA[i:], m.DaBlobId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DaBlobId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.PodNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AscChildContractAddress) > 0 {
		i -= len(m.AscChildContractAddress)
		copy(dAtA[i:], m.AscChildContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AscChildContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubmittedBy) > 0 {
		i -= len(m.SubmittedBy)
		copy(dAtA[i:], m.SubmittedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubmittedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyPod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyPod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyPod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZkFheproof) > 0 {
		i -= len(m.ZkFheproof)
		copy(dAtA[i:], m.ZkFheproof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ZkFheproof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProvingNetwork) > 0 {
		i -= len(m.ProvingNetwork)
		copy(dAtA[i:], m.ProvingNetwork)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProvingNetwork)))
		i--
		dAtA[i] = 0x22
	}
	if m.PodNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubmittedBy) > 0 {
		i -= len(m.SubmittedBy)
		copy(dAtA[i:], m.SubmittedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubmittedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyPodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyPodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyPodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogBlobData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogBlobData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogBlobData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodRange) > 0 {
		dAtA3 := make([]byte, len(m.PodRange)*10)
		var j2 int
		for _, num := range m.PodRange {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PodBundle) > 0 {
		i -= len(m.PodBundle)
		copy(dAtA[i:], m.PodBundle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PodBundle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogBlobDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogBlobDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogBlobDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterFhvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProvingNetworkVerificationKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DaProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DaBlobId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerGaddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerAscAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PicContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AclContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TfheExecutorContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KmsVerifierContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AscChildContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterFhvmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	return n
}

func (m *MsgSubmitPod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmittedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AscChildContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovTx(uint64(m.PodNumber))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DaBlobId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	l = len(m.ProvingNetwork)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ZkFhepublicWitness)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitPodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	return n
}

func (m *MsgVerifyPod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmittedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovTx(uint64(m.PodNumber))
	}
	l = len(m.ProvingNetwork)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ZkFheproof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyPodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	return n
}

func (m *MsgLogBlobData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PodBundle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PodRange) > 0 {
		l = 0
		for _, e := range m.PodRange {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgLogBlobDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFhvm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFhvm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFhvm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvingNetworkVerificationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvingNetworkVerificationKey = append(m.ProvingNetworkVerificationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ProvingNetworkVerificationKey == nil {
				m.ProvingNetworkVerificationKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaBlobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaBlobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerGaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerGaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAscAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAscAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AclContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfheExecutorContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfheExecutorContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsVerifierContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsVerifierContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscChildContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AscChildContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFhvmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFhvmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFhvmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmittedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscChildContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AscChildContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaBlobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaBlobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvingNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvingNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkFhepublicWitness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkFhepublicWitness = append(m.ZkFhepublicWitness[:0], dAtA[iNdEx:postIndex]...)
			if m.ZkFhepublicWitness == nil {
				m.ZkFhepublicWitness = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyPod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyPod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyPod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmittedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvingNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvingNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkFheproof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkFheproof = append(m.ZkFheproof[:0], dAtA[iNdEx:postIndex]...)
			if m.ZkFheproof == nil {
				m.ZkFheproof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyPodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyPodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyPodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogBlobData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogBlobData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogBlobData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodBundle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodBundle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PodRange = append(m.PodRange, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PodRange) == 0 {
					m.PodRange = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PodRange = append(m.PodRange, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PodRange", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogBlobDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogBlobDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogBlobDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
