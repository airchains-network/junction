// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/cipherpodledger/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPodRequest struct {
	StationId string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
	PodNumber uint64 `protobuf:"varint,2,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
}

func (m *QueryGetPodRequest) Reset()         { *m = QueryGetPodRequest{} }
func (m *QueryGetPodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPodRequest) ProtoMessage()    {}
func (*QueryGetPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{2}
}
func (m *QueryGetPodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPodRequest.Merge(m, src)
}
func (m *QueryGetPodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPodRequest proto.InternalMessageInfo

func (m *QueryGetPodRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *QueryGetPodRequest) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

type QueryGetPodResponse struct {
	Pod *PodData `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
}

func (m *QueryGetPodResponse) Reset()         { *m = QueryGetPodResponse{} }
func (m *QueryGetPodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPodResponse) ProtoMessage()    {}
func (*QueryGetPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{3}
}
func (m *QueryGetPodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPodResponse.Merge(m, src)
}
func (m *QueryGetPodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPodResponse proto.InternalMessageInfo

func (m *QueryGetPodResponse) GetPod() *PodData {
	if m != nil {
		return m.Pod
	}
	return nil
}

type QueryGetPodsRequest struct {
	StationId string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
	Offset    uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Order     string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryGetPodsRequest) Reset()         { *m = QueryGetPodsRequest{} }
func (m *QueryGetPodsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPodsRequest) ProtoMessage()    {}
func (*QueryGetPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{4}
}
func (m *QueryGetPodsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPodsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPodsRequest.Merge(m, src)
}
func (m *QueryGetPodsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPodsRequest proto.InternalMessageInfo

func (m *QueryGetPodsRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *QueryGetPodsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QueryGetPodsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryGetPodsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type QueryGetPodsResponse struct {
	Pods       []PodData                      `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods"`
	Pagination *TraditionalPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetPodsResponse) Reset()         { *m = QueryGetPodsResponse{} }
func (m *QueryGetPodsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPodsResponse) ProtoMessage()    {}
func (*QueryGetPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{5}
}
func (m *QueryGetPodsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPodsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPodsResponse.Merge(m, src)
}
func (m *QueryGetPodsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPodsResponse proto.InternalMessageInfo

func (m *QueryGetPodsResponse) GetPods() []PodData {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *QueryGetPodsResponse) GetPagination() *TraditionalPaginationResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStationMetricsRequest struct {
	StationId string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
}

func (m *QueryGetStationMetricsRequest) Reset()         { *m = QueryGetStationMetricsRequest{} }
func (m *QueryGetStationMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationMetricsRequest) ProtoMessage()    {}
func (*QueryGetStationMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{6}
}
func (m *QueryGetStationMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationMetricsRequest.Merge(m, src)
}
func (m *QueryGetStationMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationMetricsRequest proto.InternalMessageInfo

func (m *QueryGetStationMetricsRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

type QueryGetStationMetricsResponse struct {
	TotalFinalizedPodCount uint64     `protobuf:"varint,1,opt,name=totalFinalizedPodCount,proto3" json:"totalFinalizedPodCount,omitempty"`
	TotalSubmittedPodCount uint64     `protobuf:"varint,2,opt,name=totalSubmittedPodCount,proto3" json:"totalSubmittedPodCount,omitempty"`
	TotalVerifiedPodCount  uint64     `protobuf:"varint,3,opt,name=totalVerifiedPodCount,proto3" json:"totalVerifiedPodCount,omitempty"`
	StationDetails         *FhvmsMeta `protobuf:"bytes,4,opt,name=stationDetails,proto3" json:"stationDetails,omitempty"`
}

func (m *QueryGetStationMetricsResponse) Reset()         { *m = QueryGetStationMetricsResponse{} }
func (m *QueryGetStationMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationMetricsResponse) ProtoMessage()    {}
func (*QueryGetStationMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6efd6b5c68d7774, []int{7}
}
func (m *QueryGetStationMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationMetricsResponse.Merge(m, src)
}
func (m *QueryGetStationMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationMetricsResponse proto.InternalMessageInfo

func (m *QueryGetStationMetricsResponse) GetTotalFinalizedPodCount() uint64 {
	if m != nil {
		return m.TotalFinalizedPodCount
	}
	return 0
}

func (m *QueryGetStationMetricsResponse) GetTotalSubmittedPodCount() uint64 {
	if m != nil {
		return m.TotalSubmittedPodCount
	}
	return 0
}

func (m *QueryGetStationMetricsResponse) GetTotalVerifiedPodCount() uint64 {
	if m != nil {
		return m.TotalVerifiedPodCount
	}
	return 0
}

func (m *QueryGetStationMetricsResponse) GetStationDetails() *FhvmsMeta {
	if m != nil {
		return m.StationDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "junction.cipherpodledger.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "junction.cipherpodledger.QueryParamsResponse")
	proto.RegisterType((*QueryGetPodRequest)(nil), "junction.cipherpodledger.QueryGetPodRequest")
	proto.RegisterType((*QueryGetPodResponse)(nil), "junction.cipherpodledger.QueryGetPodResponse")
	proto.RegisterType((*QueryGetPodsRequest)(nil), "junction.cipherpodledger.QueryGetPodsRequest")
	proto.RegisterType((*QueryGetPodsResponse)(nil), "junction.cipherpodledger.QueryGetPodsResponse")
	proto.RegisterType((*QueryGetStationMetricsRequest)(nil), "junction.cipherpodledger.QueryGetStationMetricsRequest")
	proto.RegisterType((*QueryGetStationMetricsResponse)(nil), "junction.cipherpodledger.QueryGetStationMetricsResponse")
}

func init() {
	proto.RegisterFile("junction/cipherpodledger/query.proto", fileDescriptor_a6efd6b5c68d7774)
}

var fileDescriptor_a6efd6b5c68d7774 = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0x96, 0x52, 0xc3, 0x90, 0x98, 0x30, 0x56, 0xd2, 0x34, 0x58, 0x71, 0xd5, 0x88, 0x44,
	0xba, 0xa1, 0x10, 0x31, 0x1a, 0x8c, 0x29, 0x04, 0xff, 0x10, 0x4c, 0x5d, 0x8c, 0x24, 0x5c, 0x9a,
	0x69, 0x67, 0xba, 0x1d, 0xed, 0xee, 0x2c, 0x3b, 0xb3, 0x20, 0x12, 0x2e, 0x7e, 0x02, 0x13, 0x3e,
	0x81, 0x37, 0x0f, 0x1e, 0x8c, 0x47, 0x3f, 0x01, 0x47, 0x12, 0x2f, 0x26, 0x26, 0xc6, 0x80, 0x89,
	0x1f, 0xc2, 0x8b, 0xd9, 0xd9, 0xe9, 0x3f, 0xca, 0xd2, 0xa2, 0x97, 0xa6, 0xfb, 0xde, 0xef, 0xf7,
	0x7b, 0xbf, 0xf7, 0x66, 0xde, 0x2e, 0xb8, 0xf6, 0xd2, 0x77, 0x2a, 0x82, 0x32, 0xc7, 0xa8, 0x50,
	0xb7, 0x46, 0x3c, 0x97, 0xe1, 0x3a, 0xc1, 0x16, 0xf1, 0x8c, 0x0d, 0x9f, 0x78, 0xdb, 0x39, 0xd7,
	0x63, 0x82, 0xc1, 0x74, 0x03, 0x95, 0x3b, 0x86, 0xca, 0x8c, 0x20, 0x9b, 0x3a, 0xcc, 0x90, 0xbf,
	0x21, 0x38, 0x93, 0xb2, 0x98, 0xc5, 0xe4, 0x5f, 0x23, 0xf8, 0xa7, 0xa2, 0x63, 0x16, 0x63, 0x56,
	0x9d, 0x18, 0xc8, 0xa5, 0x06, 0x72, 0x1c, 0x26, 0x50, 0xa0, 0xc7, 0x55, 0x76, 0xb2, 0xc2, 0xb8,
	0xcd, 0xb8, 0x51, 0x46, 0x9c, 0x84, 0x95, 0x8d, 0xcd, 0xe9, 0x32, 0x11, 0x68, 0xda, 0x70, 0x91,
	0x45, 0x1d, 0x09, 0x56, 0xd8, 0xeb, 0x91, 0x96, 0x5d, 0xe4, 0x21, 0xbb, 0x21, 0x79, 0x23, 0x1a,
	0xc6, 0x70, 0x09, 0x23, 0x81, 0x14, 0xf0, 0x7e, 0x24, 0x50, 0x78, 0x08, 0xd3, 0x20, 0x83, 0xea,
	0xa5, 0x96, 0x8d, 0x92, 0x47, 0xb8, 0xcb, 0x1c, 0x4e, 0x14, 0xff, 0x66, 0x24, 0xbf, 0x5a, 0xdb,
	0xb4, 0x79, 0xc9, 0x26, 0x8d, 0x52, 0x7a, 0x0a, 0xc0, 0x67, 0x41, 0x73, 0x45, 0x69, 0xd4, 0x24,
	0x1b, 0x3e, 0xe1, 0x42, 0x5f, 0x07, 0x17, 0x3a, 0xa2, 0xa1, 0x3a, 0x5c, 0x00, 0xc9, 0xb0, 0xa1,
	0xb4, 0x36, 0xae, 0x4d, 0x0c, 0xe7, 0xc7, 0x73, 0x51, 0xa7, 0x90, 0x0b, 0x99, 0x85, 0xa1, 0xfd,
	0x1f, 0x97, 0x63, 0x1f, 0x7e, 0x7f, 0x9a, 0xd4, 0x4c, 0x45, 0xd5, 0x8b, 0xaa, 0xe2, 0x43, 0x22,
	0x8a, 0x0c, 0xab, 0x8a, 0x70, 0x0c, 0x0c, 0xf1, 0xf0, 0x00, 0x1e, 0x63, 0xa9, 0x3e, 0x64, 0xb6,
	0x02, 0x41, 0xd6, 0x65, 0xf8, 0xa9, 0x6f, 0x97, 0x89, 0x97, 0x8e, 0x8f, 0x6b, 0x13, 0x09, 0xb3,
	0x15, 0xd0, 0x9f, 0x28, 0xb7, 0x0d, 0x45, 0xe5, 0x76, 0x06, 0x0c, 0xb8, 0x0c, 0x2b, 0xab, 0x57,
	0x4e, 0xb1, 0xca, 0xf0, 0x22, 0x12, 0xc8, 0x0c, 0xd0, 0xfa, 0x56, 0x87, 0x16, 0xef, 0xcf, 0xde,
	0x28, 0x48, 0xb2, 0x6a, 0x95, 0x13, 0xa1, 0xbc, 0xa9, 0x27, 0x98, 0x02, 0x83, 0x75, 0x6a, 0x53,
	0x91, 0x1e, 0x90, 0xe1, 0xf0, 0x21, 0x88, 0x32, 0x0f, 0x13, 0x2f, 0x9d, 0x90, 0x3a, 0xe1, 0x83,
	0xfe, 0x51, 0x03, 0xa9, 0xce, 0xca, 0xaa, 0x8d, 0x7b, 0x20, 0xe1, 0x32, 0x1c, 0x8c, 0x7c, 0xa0,
	0xaf, 0x3e, 0x0a, 0x89, 0x60, 0xe6, 0xa6, 0x24, 0xc1, 0x35, 0x00, 0x5a, 0xd7, 0x44, 0xba, 0x1b,
	0xce, 0xcf, 0x45, 0x4b, 0x3c, 0x6f, 0x5d, 0xaf, 0x62, 0x93, 0xd6, 0x70, 0x62, 0xb6, 0x49, 0xe9,
	0xf3, 0xe0, 0x52, 0xc3, 0xed, 0x6a, 0x38, 0x87, 0x15, 0x22, 0x3c, 0x5a, 0xe9, 0x6f, 0x62, 0xfa,
	0x5e, 0x1c, 0x64, 0xa3, 0xf8, 0xaa, 0xef, 0xdb, 0x60, 0x54, 0x30, 0x81, 0xea, 0x4b, 0xd4, 0x41,
	0x75, 0xfa, 0x86, 0xe0, 0x22, 0xc3, 0x0b, 0xcc, 0x77, 0x84, 0x54, 0x4b, 0x98, 0x11, 0xd9, 0x26,
	0x6f, 0xd5, 0x2f, 0xdb, 0x54, 0x88, 0x36, 0x5e, 0xbc, 0x8d, 0xd7, 0x95, 0x85, 0xb3, 0xe0, 0xa2,
	0xcc, 0xbc, 0x20, 0x1e, 0xad, 0xd2, 0x36, 0x5a, 0x78, 0x78, 0x27, 0x27, 0xe1, 0x32, 0x38, 0xaf,
	0xba, 0x5a, 0x24, 0x02, 0xd1, 0x3a, 0x97, 0xa7, 0x3a, 0x9c, 0xbf, 0x1a, 0x3d, 0xe4, 0xa5, 0x60,
	0x07, 0x57, 0x88, 0x40, 0xe6, 0x31, 0x6a, 0xfe, 0xcf, 0x20, 0x18, 0x94, 0x53, 0x81, 0xef, 0x35,
	0x90, 0x0c, 0x57, 0x08, 0xde, 0x8a, 0x56, 0xea, 0xde, 0xdc, 0xcc, 0x54, 0x9f, 0xe8, 0x70, 0xc8,
	0xfa, 0xdd, 0xb7, 0x5f, 0x7f, 0xed, 0xc5, 0x67, 0x61, 0xde, 0x40, 0xd4, 0xab, 0xd4, 0x10, 0x75,
	0xf8, 0x94, 0x43, 0xc4, 0x16, 0xf3, 0x5e, 0x19, 0x3d, 0x5e, 0x6a, 0xf0, 0x8b, 0x06, 0x92, 0xe1,
	0x65, 0xed, 0xe9, 0xb1, 0x63, 0xd7, 0x7b, 0x7a, 0xec, 0xdc, 0x63, 0x7d, 0x55, 0x7a, 0x5c, 0x81,
	0xcb, 0x67, 0xf1, 0x68, 0x11, 0x51, 0x72, 0x19, 0x36, 0x76, 0x9a, 0x77, 0x6e, 0xd7, 0xd8, 0x69,
	0xbe, 0x32, 0x76, 0xe1, 0x67, 0x0d, 0x9c, 0x53, 0x9b, 0x06, 0xfb, 0xf3, 0xd3, 0x1c, 0x71, 0xae,
	0x5f, 0xb8, 0xf2, 0xff, 0x48, 0xfa, 0x2f, 0xc0, 0x07, 0xff, 0xe0, 0x9f, 0xb7, 0x37, 0x00, 0xbf,
	0x6b, 0x60, 0xa4, 0x6b, 0x61, 0xe0, 0x5c, 0x6f, 0x3f, 0x27, 0xae, 0x68, 0xe6, 0xce, 0xd9, 0x89,
	0xff, 0x7b, 0x24, 0xaa, 0x99, 0xe0, 0x0b, 0x14, 0x08, 0xb6, 0x77, 0x57, 0x58, 0xdb, 0x3f, 0xcc,
	0x6a, 0x07, 0x87, 0x59, 0xed, 0xe7, 0x61, 0x56, 0x7b, 0x77, 0x94, 0x8d, 0x1d, 0x1c, 0x65, 0x63,
	0xdf, 0x8e, 0xb2, 0xb1, 0xf5, 0x79, 0x8b, 0x8a, 0x9a, 0x5f, 0xce, 0x55, 0x98, 0x7d, 0x5a, 0xc1,
	0xd7, 0xdd, 0x9f, 0xcb, 0x6d, 0x97, 0xf0, 0x72, 0x52, 0x7e, 0xea, 0x66, 0xfe, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x98, 0x33, 0x6b, 0x01, 0x5a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetPod items.
	GetPod(ctx context.Context, in *QueryGetPodRequest, opts ...grpc.CallOption) (*QueryGetPodResponse, error)
	// Queries a list of GetPods items.
	GetPods(ctx context.Context, in *QueryGetPodsRequest, opts ...grpc.CallOption) (*QueryGetPodsResponse, error)
	// Queries a list of GetStationMetrics items.
	GetStationMetrics(ctx context.Context, in *QueryGetStationMetricsRequest, opts ...grpc.CallOption) (*QueryGetStationMetricsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPod(ctx context.Context, in *QueryGetPodRequest, opts ...grpc.CallOption) (*QueryGetPodResponse, error) {
	out := new(QueryGetPodResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Query/GetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPods(ctx context.Context, in *QueryGetPodsRequest, opts ...grpc.CallOption) (*QueryGetPodsResponse, error) {
	out := new(QueryGetPodsResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Query/GetPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStationMetrics(ctx context.Context, in *QueryGetStationMetricsRequest, opts ...grpc.CallOption) (*QueryGetStationMetricsResponse, error) {
	out := new(QueryGetStationMetricsResponse)
	err := c.cc.Invoke(ctx, "/junction.cipherpodledger.Query/GetStationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetPod items.
	GetPod(context.Context, *QueryGetPodRequest) (*QueryGetPodResponse, error)
	// Queries a list of GetPods items.
	GetPods(context.Context, *QueryGetPodsRequest) (*QueryGetPodsResponse, error)
	// Queries a list of GetStationMetrics items.
	GetStationMetrics(context.Context, *QueryGetStationMetricsRequest) (*QueryGetStationMetricsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetPod(ctx context.Context, req *QueryGetPodRequest) (*QueryGetPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (*UnimplementedQueryServer) GetPods(ctx context.Context, req *QueryGetPodsRequest) (*QueryGetPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (*UnimplementedQueryServer) GetStationMetrics(ctx context.Context, req *QueryGetStationMetricsRequest) (*QueryGetStationMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationMetrics not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Query/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPod(ctx, req.(*QueryGetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Query/GetPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPods(ctx, req.(*QueryGetPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.cipherpodledger.Query/GetStationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStationMetrics(ctx, req.(*QueryGetStationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junction.cipherpodledger.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _Query_GetPod_Handler,
		},
		{
			MethodName: "GetPods",
			Handler:    _Query_GetPods_Handler,
		},
		{
			MethodName: "GetStationMetrics",
			Handler:    _Query_GetStationMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/cipherpodledger/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPodsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPodsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x22
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPodsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPodsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPodsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pods) > 0 {
		for iNdEx := len(m.Pods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StationDetails != nil {
		{
			size, err := m.StationDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TotalVerifiedPodCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalVerifiedPodCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalSubmittedPodCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalSubmittedPodCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalFinalizedPodCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalFinalizedPodCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovQuery(uint64(m.PodNumber))
	}
	return n
}

func (m *QueryGetPodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPodsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovQuery(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPodsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalFinalizedPodCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalFinalizedPodCount))
	}
	if m.TotalSubmittedPodCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalSubmittedPodCount))
	}
	if m.TotalVerifiedPodCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalVerifiedPodCount))
	}
	if m.StationDetails != nil {
		l = m.StationDetails.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pod == nil {
				m.Pod = &PodData{}
			}
			if err := m.Pod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPodsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPodsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPodsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPodsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, PodData{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &TraditionalPaginationResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFinalizedPodCount", wireType)
			}
			m.TotalFinalizedPodCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFinalizedPodCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubmittedPodCount", wireType)
			}
			m.TotalSubmittedPodCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSubmittedPodCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVerifiedPodCount", wireType)
			}
			m.TotalVerifiedPodCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVerifiedPodCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StationDetails == nil {
				m.StationDetails = &FhvmsMeta{}
			}
			if err := m.StationDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
