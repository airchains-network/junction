// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/vrf/collection.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Collection struct {
	CollectionOwner    string   `protobuf:"bytes,1,opt,name=collectionOwner,proto3" json:"collectionOwner,omitempty"`
	CollectionName     string   `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	CollectionId       string   `protobuf:"bytes,3,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	Members            []string `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	Offset             uint32   `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Index              uint32   `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	GreyListed         bool     `protobuf:"varint,7,opt,name=greyListed,proto3" json:"greyListed,omitempty"`
	DisputeVoteYesHash string   `protobuf:"bytes,8,opt,name=disputeVoteYesHash,proto3" json:"disputeVoteYesHash,omitempty"`
	DisputeVoteNoHash  string   `protobuf:"bytes,9,opt,name=disputeVoteNoHash,proto3" json:"disputeVoteNoHash,omitempty"`
}

func (m *Collection) Reset()         { *m = Collection{} }
func (m *Collection) String() string { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()    {}
func (*Collection) Descriptor() ([]byte, []int) {
	return fileDescriptor_140dffbc9a46e6c8, []int{0}
}
func (m *Collection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Collection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Collection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Collection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collection.Merge(m, src)
}
func (m *Collection) XXX_Size() int {
	return m.Size()
}
func (m *Collection) XXX_DiscardUnknown() {
	xxx_messageInfo_Collection.DiscardUnknown(m)
}

var xxx_messageInfo_Collection proto.InternalMessageInfo

func (m *Collection) GetCollectionOwner() string {
	if m != nil {
		return m.CollectionOwner
	}
	return ""
}

func (m *Collection) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *Collection) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *Collection) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Collection) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Collection) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Collection) GetGreyListed() bool {
	if m != nil {
		return m.GreyListed
	}
	return false
}

func (m *Collection) GetDisputeVoteYesHash() string {
	if m != nil {
		return m.DisputeVoteYesHash
	}
	return ""
}

func (m *Collection) GetDisputeVoteNoHash() string {
	if m != nil {
		return m.DisputeVoteNoHash
	}
	return ""
}

func init() {
	proto.RegisterType((*Collection)(nil), "junction.vrf.Collection")
}

func init() { proto.RegisterFile("junction/vrf/collection.proto", fileDescriptor_140dffbc9a46e6c8) }

var fileDescriptor_140dffbc9a46e6c8 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x3b, 0xad, 0xfd, 0xbb, 0x54, 0xc5, 0x41, 0x64, 0x36, 0x0e, 0xa1, 0x0b, 0xc9, 0x42,
	0x13, 0xc4, 0x37, 0xd0, 0x8d, 0xa2, 0x54, 0xc8, 0x42, 0xd0, 0x5d, 0x9a, 0xdc, 0xb4, 0xa3, 0xcd,
	0x4c, 0x99, 0x99, 0xfe, 0xbd, 0x85, 0x8f, 0xd5, 0x65, 0x97, 0x2e, 0xa5, 0x7d, 0x11, 0x61, 0xb4,
	0x4d, 0xad, 0x2e, 0xcf, 0x77, 0xbe, 0x0b, 0x17, 0x0e, 0x9c, 0xbe, 0x8e, 0x64, 0x62, 0x85, 0x92,
	0xe1, 0x58, 0x67, 0x61, 0xa2, 0x06, 0x03, 0x74, 0x31, 0x18, 0x6a, 0x65, 0x15, 0x6d, 0xad, 0xeb,
	0x60, 0xac, 0xb3, 0xf6, 0xbc, 0x0c, 0x70, 0xb3, 0x51, 0xa8, 0x0f, 0x87, 0xc5, 0xc1, 0xe3, 0x44,
	0xa2, 0x66, 0xc4, 0x23, 0x7e, 0x33, 0xda, 0xc5, 0xf4, 0x0c, 0x0e, 0x0a, 0xd4, 0x89, 0x73, 0x64,
	0x65, 0x27, 0xee, 0x50, 0xda, 0x86, 0x56, 0x41, 0xee, 0x52, 0x56, 0x71, 0xd6, 0x2f, 0x46, 0x19,
	0xd4, 0x73, 0xcc, 0xbb, 0xa8, 0x0d, 0xdb, 0xf3, 0x2a, 0x7e, 0x33, 0x5a, 0x47, 0x7a, 0x02, 0x35,
	0x95, 0x65, 0x06, 0x2d, 0xab, 0x7a, 0xc4, 0xdf, 0x8f, 0x7e, 0x12, 0x3d, 0x86, 0xaa, 0x90, 0x29,
	0x4e, 0x59, 0xcd, 0xe1, 0xef, 0x40, 0x39, 0x40, 0x4f, 0xe3, 0xec, 0x41, 0x18, 0x8b, 0x29, 0xab,
	0x7b, 0xc4, 0x6f, 0x44, 0x5b, 0x84, 0x06, 0x40, 0x53, 0x61, 0x86, 0x23, 0x8b, 0x4f, 0xca, 0xe2,
	0x33, 0x9a, 0xdb, 0xd8, 0xf4, 0x59, 0xc3, 0x7d, 0xf4, 0x4f, 0x43, 0xcf, 0xe1, 0x68, 0x8b, 0x76,
	0x94, 0xd3, 0x9b, 0x4e, 0xff, 0x5b, 0x5c, 0xdf, 0xcf, 0x97, 0x9c, 0x2c, 0x96, 0x9c, 0x7c, 0x2e,
	0x39, 0x79, 0x5f, 0xf1, 0xd2, 0x62, 0xc5, 0x4b, 0x1f, 0x2b, 0x5e, 0x7a, 0xb9, 0xec, 0x09, 0xdb,
	0x1f, 0x75, 0x83, 0x44, 0xe5, 0x61, 0x2c, 0x74, 0xd2, 0x8f, 0x85, 0x34, 0x17, 0x12, 0xed, 0x44,
	0xe9, 0xb7, 0x70, 0x33, 0xd7, 0xd4, 0x0d, 0x66, 0x67, 0x43, 0x34, 0xdd, 0x9a, 0x1b, 0xeb, 0xea,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x4b, 0x7e, 0x9a, 0xcd, 0x01, 0x00, 0x00,
}

func (m *Collection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Collection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Collection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeVoteNoHash) > 0 {
		i -= len(m.DisputeVoteNoHash)
		copy(dAtA[i:], m.DisputeVoteNoHash)
		i = encodeVarintCollection(dAtA, i, uint64(len(m.DisputeVoteNoHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DisputeVoteYesHash) > 0 {
		i -= len(m.DisputeVoteYesHash)
		copy(dAtA[i:], m.DisputeVoteYesHash)
		i = encodeVarintCollection(dAtA, i, uint64(len(m.DisputeVoteYesHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.GreyListed {
		i--
		if m.GreyListed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Index != 0 {
		i = encodeVarintCollection(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x30
	}
	if m.Offset != 0 {
		i = encodeVarintCollection(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintCollection(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintCollection(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionName) > 0 {
		i -= len(m.CollectionName)
		copy(dAtA[i:], m.CollectionName)
		i = encodeVarintCollection(dAtA, i, uint64(len(m.CollectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionOwner) > 0 {
		i -= len(m.CollectionOwner)
		copy(dAtA[i:], m.CollectionOwner)
		i = encodeVarintCollection(dAtA, i, uint64(len(m.CollectionOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollection(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Collection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionOwner)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	l = len(m.CollectionName)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovCollection(uint64(l))
		}
	}
	if m.Offset != 0 {
		n += 1 + sovCollection(uint64(m.Offset))
	}
	if m.Index != 0 {
		n += 1 + sovCollection(uint64(m.Index))
	}
	if m.GreyListed {
		n += 2
	}
	l = len(m.DisputeVoteYesHash)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	l = len(m.DisputeVoteNoHash)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	return n
}

func sovCollection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollection(x uint64) (n int) {
	return sovCollection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Collection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GreyListed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GreyListed = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeVoteYesHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeVoteYesHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeVoteNoHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeVoteNoHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollection = fmt.Errorf("proto: unexpected end of group")
)
