// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/junction/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStationRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetStationRequest) Reset()         { *m = QueryGetStationRequest{} }
func (m *QueryGetStationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationRequest) ProtoMessage()    {}
func (*QueryGetStationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{2}
}
func (m *QueryGetStationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationRequest.Merge(m, src)
}
func (m *QueryGetStationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationRequest proto.InternalMessageInfo

func (m *QueryGetStationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetStationResponse struct {
	Stations *Stations `protobuf:"bytes,1,opt,name=stations,proto3" json:"stations,omitempty"`
}

func (m *QueryGetStationResponse) Reset()         { *m = QueryGetStationResponse{} }
func (m *QueryGetStationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationResponse) ProtoMessage()    {}
func (*QueryGetStationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{3}
}
func (m *QueryGetStationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationResponse.Merge(m, src)
}
func (m *QueryGetStationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationResponse proto.InternalMessageInfo

func (m *QueryGetStationResponse) GetStations() *Stations {
	if m != nil {
		return m.Stations
	}
	return nil
}

type QueryListStationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListStationsRequest) Reset()         { *m = QueryListStationsRequest{} }
func (m *QueryListStationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListStationsRequest) ProtoMessage()    {}
func (*QueryListStationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{4}
}
func (m *QueryListStationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListStationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListStationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListStationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListStationsRequest.Merge(m, src)
}
func (m *QueryListStationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListStationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListStationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListStationsRequest proto.InternalMessageInfo

func (m *QueryListStationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListStationsResponse struct {
	StationsList []Stations          `protobuf:"bytes,1,rep,name=stationsList,proto3" json:"stationsList"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListStationsResponse) Reset()         { *m = QueryListStationsResponse{} }
func (m *QueryListStationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListStationsResponse) ProtoMessage()    {}
func (*QueryListStationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{5}
}
func (m *QueryListStationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListStationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListStationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListStationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListStationsResponse.Merge(m, src)
}
func (m *QueryListStationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListStationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListStationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListStationsResponse proto.InternalMessageInfo

func (m *QueryListStationsResponse) GetStationsList() []Stations {
	if m != nil {
		return m.StationsList
	}
	return nil
}

func (m *QueryListStationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStationDetailsByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetStationDetailsByAddressRequest) Reset() {
	*m = QueryGetStationDetailsByAddressRequest{}
}
func (m *QueryGetStationDetailsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationDetailsByAddressRequest) ProtoMessage()    {}
func (*QueryGetStationDetailsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{6}
}
func (m *QueryGetStationDetailsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationDetailsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationDetailsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationDetailsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationDetailsByAddressRequest.Merge(m, src)
}
func (m *QueryGetStationDetailsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationDetailsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationDetailsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationDetailsByAddressRequest proto.InternalMessageInfo

func (m *QueryGetStationDetailsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetStationDetailsByAddressResponse struct {
	Stations   []Stations          `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStationDetailsByAddressResponse) Reset() {
	*m = QueryGetStationDetailsByAddressResponse{}
}
func (m *QueryGetStationDetailsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStationDetailsByAddressResponse) ProtoMessage()    {}
func (*QueryGetStationDetailsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{7}
}
func (m *QueryGetStationDetailsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStationDetailsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStationDetailsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStationDetailsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStationDetailsByAddressResponse.Merge(m, src)
}
func (m *QueryGetStationDetailsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStationDetailsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStationDetailsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStationDetailsByAddressResponse proto.InternalMessageInfo

func (m *QueryGetStationDetailsByAddressResponse) GetStations() []Stations {
	if m != nil {
		return m.Stations
	}
	return nil
}

func (m *QueryGetStationDetailsByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPodRequest struct {
	StationId string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
	PodNumber uint64 `protobuf:"varint,2,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
}

func (m *QueryGetPodRequest) Reset()         { *m = QueryGetPodRequest{} }
func (m *QueryGetPodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPodRequest) ProtoMessage()    {}
func (*QueryGetPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{8}
}
func (m *QueryGetPodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPodRequest.Merge(m, src)
}
func (m *QueryGetPodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPodRequest proto.InternalMessageInfo

func (m *QueryGetPodRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *QueryGetPodRequest) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

type QueryGetPodResponse struct {
	Pod *Pods `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
}

func (m *QueryGetPodResponse) Reset()         { *m = QueryGetPodResponse{} }
func (m *QueryGetPodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPodResponse) ProtoMessage()    {}
func (*QueryGetPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{9}
}
func (m *QueryGetPodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPodResponse.Merge(m, src)
}
func (m *QueryGetPodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPodResponse proto.InternalMessageInfo

func (m *QueryGetPodResponse) GetPod() *Pods {
	if m != nil {
		return m.Pod
	}
	return nil
}

type QueryGetLatestSubmittedPodNumberRequest struct {
	StationId string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
}

func (m *QueryGetLatestSubmittedPodNumberRequest) Reset() {
	*m = QueryGetLatestSubmittedPodNumberRequest{}
}
func (m *QueryGetLatestSubmittedPodNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestSubmittedPodNumberRequest) ProtoMessage()    {}
func (*QueryGetLatestSubmittedPodNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{10}
}
func (m *QueryGetLatestSubmittedPodNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestSubmittedPodNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestSubmittedPodNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestSubmittedPodNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestSubmittedPodNumberRequest.Merge(m, src)
}
func (m *QueryGetLatestSubmittedPodNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestSubmittedPodNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestSubmittedPodNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestSubmittedPodNumberRequest proto.InternalMessageInfo

func (m *QueryGetLatestSubmittedPodNumberRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

type QueryGetLatestSubmittedPodNumberResponse struct {
	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PodNumber uint64 `protobuf:"varint,2,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
}

func (m *QueryGetLatestSubmittedPodNumberResponse) Reset() {
	*m = QueryGetLatestSubmittedPodNumberResponse{}
}
func (m *QueryGetLatestSubmittedPodNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestSubmittedPodNumberResponse) ProtoMessage()    {}
func (*QueryGetLatestSubmittedPodNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{11}
}
func (m *QueryGetLatestSubmittedPodNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestSubmittedPodNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestSubmittedPodNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestSubmittedPodNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestSubmittedPodNumberResponse.Merge(m, src)
}
func (m *QueryGetLatestSubmittedPodNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestSubmittedPodNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestSubmittedPodNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestSubmittedPodNumberResponse proto.InternalMessageInfo

func (m *QueryGetLatestSubmittedPodNumberResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryGetLatestSubmittedPodNumberResponse) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

type QueryGetLatestVerifiedPodNumberRequest struct {
	StationId string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
}

func (m *QueryGetLatestVerifiedPodNumberRequest) Reset() {
	*m = QueryGetLatestVerifiedPodNumberRequest{}
}
func (m *QueryGetLatestVerifiedPodNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestVerifiedPodNumberRequest) ProtoMessage()    {}
func (*QueryGetLatestVerifiedPodNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{12}
}
func (m *QueryGetLatestVerifiedPodNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestVerifiedPodNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestVerifiedPodNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestVerifiedPodNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestVerifiedPodNumberRequest.Merge(m, src)
}
func (m *QueryGetLatestVerifiedPodNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestVerifiedPodNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestVerifiedPodNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestVerifiedPodNumberRequest proto.InternalMessageInfo

func (m *QueryGetLatestVerifiedPodNumberRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

type QueryGetLatestVerifiedPodNumberResponse struct {
	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PodNumber uint64 `protobuf:"varint,2,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
}

func (m *QueryGetLatestVerifiedPodNumberResponse) Reset() {
	*m = QueryGetLatestVerifiedPodNumberResponse{}
}
func (m *QueryGetLatestVerifiedPodNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestVerifiedPodNumberResponse) ProtoMessage()    {}
func (*QueryGetLatestVerifiedPodNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{13}
}
func (m *QueryGetLatestVerifiedPodNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestVerifiedPodNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestVerifiedPodNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestVerifiedPodNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestVerifiedPodNumberResponse.Merge(m, src)
}
func (m *QueryGetLatestVerifiedPodNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestVerifiedPodNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestVerifiedPodNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestVerifiedPodNumberResponse proto.InternalMessageInfo

func (m *QueryGetLatestVerifiedPodNumberResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryGetLatestVerifiedPodNumberResponse) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

type QueryFetchVrnRequest struct {
	PodNumber uint64 `protobuf:"varint,1,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
	StationId string `protobuf:"bytes,2,opt,name=stationId,proto3" json:"stationId,omitempty"`
}

func (m *QueryFetchVrnRequest) Reset()         { *m = QueryFetchVrnRequest{} }
func (m *QueryFetchVrnRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFetchVrnRequest) ProtoMessage()    {}
func (*QueryFetchVrnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{14}
}
func (m *QueryFetchVrnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchVrnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchVrnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchVrnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchVrnRequest.Merge(m, src)
}
func (m *QueryFetchVrnRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchVrnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchVrnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchVrnRequest proto.InternalMessageInfo

func (m *QueryFetchVrnRequest) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *QueryFetchVrnRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

type QueryFetchVrnResponse struct {
	Details *VrfRecord `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryFetchVrnResponse) Reset()         { *m = QueryFetchVrnResponse{} }
func (m *QueryFetchVrnResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFetchVrnResponse) ProtoMessage()    {}
func (*QueryFetchVrnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{15}
}
func (m *QueryFetchVrnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchVrnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchVrnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchVrnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchVrnResponse.Merge(m, src)
}
func (m *QueryFetchVrnResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchVrnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchVrnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchVrnResponse proto.InternalMessageInfo

func (m *QueryFetchVrnResponse) GetDetails() *VrfRecord {
	if m != nil {
		return m.Details
	}
	return nil
}

type QueryGetTracksRequest struct {
	StationId  string             `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTracksRequest) Reset()         { *m = QueryGetTracksRequest{} }
func (m *QueryGetTracksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTracksRequest) ProtoMessage()    {}
func (*QueryGetTracksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{16}
}
func (m *QueryGetTracksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTracksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTracksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTracksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTracksRequest.Merge(m, src)
}
func (m *QueryGetTracksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTracksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTracksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTracksRequest proto.InternalMessageInfo

func (m *QueryGetTracksRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *QueryGetTracksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTracksResponse struct {
	Tracks     []string            `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTracksResponse) Reset()         { *m = QueryGetTracksResponse{} }
func (m *QueryGetTracksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTracksResponse) ProtoMessage()    {}
func (*QueryGetTracksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{17}
}
func (m *QueryGetTracksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTracksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTracksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTracksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTracksResponse.Merge(m, src)
}
func (m *QueryGetTracksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTracksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTracksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTracksResponse proto.InternalMessageInfo

func (m *QueryGetTracksResponse) GetTracks() []string {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *QueryGetTracksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIsTrackMemberRequest struct {
	TrackAddress string `protobuf:"bytes,1,opt,name=trackAddress,proto3" json:"trackAddress,omitempty"`
	StationId    string `protobuf:"bytes,2,opt,name=stationId,proto3" json:"stationId,omitempty"`
}

func (m *QueryIsTrackMemberRequest) Reset()         { *m = QueryIsTrackMemberRequest{} }
func (m *QueryIsTrackMemberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsTrackMemberRequest) ProtoMessage()    {}
func (*QueryIsTrackMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{18}
}
func (m *QueryIsTrackMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsTrackMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsTrackMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsTrackMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsTrackMemberRequest.Merge(m, src)
}
func (m *QueryIsTrackMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsTrackMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsTrackMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsTrackMemberRequest proto.InternalMessageInfo

func (m *QueryIsTrackMemberRequest) GetTrackAddress() string {
	if m != nil {
		return m.TrackAddress
	}
	return ""
}

func (m *QueryIsTrackMemberRequest) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

type QueryIsTrackMemberResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryIsTrackMemberResponse) Reset()         { *m = QueryIsTrackMemberResponse{} }
func (m *QueryIsTrackMemberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsTrackMemberResponse) ProtoMessage()    {}
func (*QueryIsTrackMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6eb67fc8cb2f8ec, []int{19}
}
func (m *QueryIsTrackMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsTrackMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsTrackMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsTrackMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsTrackMemberResponse.Merge(m, src)
}
func (m *QueryIsTrackMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsTrackMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsTrackMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsTrackMemberResponse proto.InternalMessageInfo

func (m *QueryIsTrackMemberResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "junction.junction.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "junction.junction.QueryParamsResponse")
	proto.RegisterType((*QueryGetStationRequest)(nil), "junction.junction.QueryGetStationRequest")
	proto.RegisterType((*QueryGetStationResponse)(nil), "junction.junction.QueryGetStationResponse")
	proto.RegisterType((*QueryListStationsRequest)(nil), "junction.junction.QueryListStationsRequest")
	proto.RegisterType((*QueryListStationsResponse)(nil), "junction.junction.QueryListStationsResponse")
	proto.RegisterType((*QueryGetStationDetailsByAddressRequest)(nil), "junction.junction.QueryGetStationDetailsByAddressRequest")
	proto.RegisterType((*QueryGetStationDetailsByAddressResponse)(nil), "junction.junction.QueryGetStationDetailsByAddressResponse")
	proto.RegisterType((*QueryGetPodRequest)(nil), "junction.junction.QueryGetPodRequest")
	proto.RegisterType((*QueryGetPodResponse)(nil), "junction.junction.QueryGetPodResponse")
	proto.RegisterType((*QueryGetLatestSubmittedPodNumberRequest)(nil), "junction.junction.QueryGetLatestSubmittedPodNumberRequest")
	proto.RegisterType((*QueryGetLatestSubmittedPodNumberResponse)(nil), "junction.junction.QueryGetLatestSubmittedPodNumberResponse")
	proto.RegisterType((*QueryGetLatestVerifiedPodNumberRequest)(nil), "junction.junction.QueryGetLatestVerifiedPodNumberRequest")
	proto.RegisterType((*QueryGetLatestVerifiedPodNumberResponse)(nil), "junction.junction.QueryGetLatestVerifiedPodNumberResponse")
	proto.RegisterType((*QueryFetchVrnRequest)(nil), "junction.junction.QueryFetchVrnRequest")
	proto.RegisterType((*QueryFetchVrnResponse)(nil), "junction.junction.QueryFetchVrnResponse")
	proto.RegisterType((*QueryGetTracksRequest)(nil), "junction.junction.QueryGetTracksRequest")
	proto.RegisterType((*QueryGetTracksResponse)(nil), "junction.junction.QueryGetTracksResponse")
	proto.RegisterType((*QueryIsTrackMemberRequest)(nil), "junction.junction.QueryIsTrackMemberRequest")
	proto.RegisterType((*QueryIsTrackMemberResponse)(nil), "junction.junction.QueryIsTrackMemberResponse")
}

func init() { proto.RegisterFile("junction/junction/query.proto", fileDescriptor_e6eb67fc8cb2f8ec) }

var fileDescriptor_e6eb67fc8cb2f8ec = []byte{
	// 1141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x6f, 0xdb, 0x54,
	0x14, 0xae, 0xb3, 0x91, 0x36, 0x97, 0x32, 0x69, 0x97, 0xb2, 0x65, 0x5e, 0x09, 0x95, 0x25, 0xda,
	0xb4, 0x30, 0x9b, 0x6e, 0xa8, 0x53, 0x07, 0x88, 0x2d, 0x8c, 0x86, 0xd2, 0x6e, 0x4b, 0xdd, 0xa9,
	0x48, 0x48, 0x28, 0x72, 0xe2, 0xdb, 0xd4, 0x2c, 0xf1, 0xf5, 0x7c, 0x6f, 0x0a, 0x51, 0xd5, 0x17,
	0x9e, 0x78, 0x44, 0xe2, 0x1d, 0x69, 0x6f, 0x20, 0x5e, 0xe0, 0x8f, 0x40, 0xda, 0xe3, 0x24, 0x24,
	0xc4, 0x13, 0x42, 0x2d, 0x02, 0x1e, 0xf8, 0x23, 0x90, 0xaf, 0x8f, 0xe3, 0x38, 0xb1, 0x63, 0xb7,
	0xeb, 0x4b, 0x75, 0x7d, 0xef, 0xf9, 0xf1, 0x7d, 0xe7, 0x9c, 0x7b, 0xbf, 0x06, 0xbd, 0xfa, 0x79,
	0xd7, 0x6e, 0x72, 0x8b, 0xda, 0x5a, 0x7f, 0xf1, 0xb8, 0x4b, 0xdc, 0x9e, 0xea, 0xb8, 0x94, 0x53,
	0x7c, 0x31, 0xd8, 0x55, 0x83, 0x85, 0x7c, 0xd1, 0xe8, 0x58, 0x36, 0xd5, 0xc4, 0x5f, 0xdf, 0x4a,
	0x9e, 0x69, 0xd1, 0x16, 0x15, 0x4b, 0xcd, 0x5b, 0xc1, 0xee, 0x6c, 0x8b, 0xd2, 0x56, 0x9b, 0x68,
	0x86, 0x63, 0x69, 0x86, 0x6d, 0x53, 0x6e, 0x78, 0xfe, 0x0c, 0x4e, 0x97, 0x9a, 0x94, 0x75, 0x28,
	0xd3, 0x1a, 0x06, 0x23, 0x7e, 0x4a, 0x6d, 0x7f, 0xb9, 0x41, 0xb8, 0xb1, 0xac, 0x39, 0x46, 0xcb,
	0xb2, 0x85, 0x31, 0xd8, 0x96, 0x46, 0x41, 0x3a, 0x86, 0x6b, 0x74, 0x82, 0x58, 0x73, 0xa3, 0xe7,
	0x2c, 0x9a, 0x6d, 0x36, 0x26, 0x02, 0x35, 0x83, 0x53, 0x65, 0xf4, 0x74, 0xdf, 0xdd, 0xad, 0xbb,
	0xa4, 0x49, 0x5d, 0xd3, 0xb7, 0x51, 0x66, 0x10, 0xde, 0xf2, 0x50, 0xd6, 0x44, 0x62, 0x9d, 0x3c,
	0xee, 0x12, 0xc6, 0x95, 0x6d, 0xf4, 0x72, 0x64, 0x97, 0x39, 0xd4, 0x66, 0x04, 0xbf, 0x8b, 0xf2,
	0x3e, 0xc0, 0xa2, 0x34, 0x27, 0x95, 0x5f, 0xbc, 0x7e, 0x45, 0x1d, 0xa9, 0xa3, 0xea, 0xbb, 0x54,
	0x0a, 0x4f, 0xff, 0x78, 0x6d, 0xe2, 0xfb, 0x7f, 0x7e, 0x5a, 0x92, 0x74, 0xf0, 0x51, 0xca, 0xe8,
	0x92, 0x08, 0x5a, 0x25, 0x7c, 0xdb, 0xa7, 0x01, 0xe9, 0xf0, 0x05, 0x94, 0xb3, 0x4c, 0x11, 0xb3,
	0xa0, 0xe7, 0x2c, 0x53, 0xd1, 0xd1, 0xe5, 0x11, 0x4b, 0x80, 0x70, 0x13, 0x4d, 0x05, 0x35, 0x00,
	0x10, 0x57, 0x63, 0x40, 0x80, 0x17, 0xd3, 0xfb, 0xc6, 0x4a, 0x03, 0x15, 0x45, 0xcc, 0x4d, 0x8b,
	0xf1, 0xfe, 0x31, 0xe4, 0x5f, 0x43, 0x28, 0x6c, 0x0e, 0x84, 0x9d, 0x57, 0xfd, 0x4e, 0xaa, 0x5e,
	0x27, 0x55, 0x7f, 0x78, 0xa0, 0x93, 0x6a, 0xcd, 0x68, 0x11, 0xf0, 0xd5, 0x07, 0x3c, 0x95, 0x1f,
	0x25, 0x74, 0x25, 0x26, 0x09, 0x40, 0xff, 0x10, 0x4d, 0x07, 0x68, 0xbc, 0xf3, 0xa2, 0x34, 0x77,
	0x2e, 0x05, 0x7e, 0xe5, 0xbc, 0x57, 0x45, 0x3d, 0xe2, 0x86, 0xab, 0x11, 0xb0, 0x39, 0x01, 0x76,
	0x21, 0x15, 0xac, 0x8f, 0x21, 0x82, 0xb6, 0x82, 0xe6, 0x87, 0xaa, 0x7c, 0x97, 0x70, 0xc3, 0x6a,
	0xb3, 0x4a, 0xef, 0x8e, 0x69, 0xba, 0x84, 0xf5, 0xeb, 0x53, 0x44, 0x93, 0x86, 0xbf, 0x03, 0x4d,
	0x0a, 0x3e, 0x95, 0x9f, 0x25, 0xb4, 0x90, 0x1a, 0x04, 0xf8, 0xbf, 0x17, 0x69, 0x5d, 0x46, 0xee,
	0x7d, 0x97, 0xb3, 0xe3, 0x5d, 0x83, 0x91, 0xaf, 0x12, 0x5e, 0xa3, 0x66, 0xc0, 0x71, 0x16, 0x15,
	0x20, 0xd5, 0x7a, 0x30, 0x8a, 0xe1, 0x86, 0x77, 0xea, 0x50, 0xf3, 0x7e, 0xb7, 0xd3, 0x20, 0xae,
	0xc8, 0x7d, 0x5e, 0x0f, 0x37, 0x94, 0xdb, 0x70, 0x5d, 0x82, 0x88, 0x40, 0x78, 0x11, 0x9d, 0x73,
	0xa8, 0x09, 0xf3, 0x74, 0x39, 0xee, 0xae, 0x50, 0x93, 0xe9, 0x9e, 0x8d, 0x52, 0x0d, 0xcb, 0xb8,
	0x69, 0x70, 0xc2, 0xf8, 0x76, 0xb7, 0xd1, 0xb1, 0x38, 0x27, 0x66, 0x2d, 0xc8, 0x92, 0x09, 0xa8,
	0xd2, 0x40, 0xe5, 0xf4, 0x40, 0x80, 0xaf, 0x88, 0x26, 0x3b, 0x84, 0x31, 0xa3, 0x45, 0x82, 0xb6,
	0xc2, 0x67, 0x0a, 0xdd, 0xb5, 0x70, 0x70, 0xfc, 0x1c, 0x3b, 0xc4, 0xb5, 0x76, 0xad, 0x13, 0x63,
	0x35, 0x86, 0x49, 0xc7, 0xc4, 0x79, 0x4e, 0xa8, 0x3a, 0x9a, 0x11, 0x29, 0xd6, 0x08, 0x6f, 0xee,
	0xed, 0xb8, 0xf6, 0x00, 0xb0, 0xd0, 0x4b, 0x1a, 0xf2, 0x8a, 0xc2, 0xce, 0x0d, 0xc3, 0x7e, 0x80,
	0x5e, 0x19, 0x8a, 0x09, 0x20, 0x57, 0xd0, 0xa4, 0xe9, 0x0f, 0x3f, 0xf4, 0x7c, 0x36, 0xa6, 0xe7,
	0x3b, 0xee, 0xae, 0x2e, 0x1e, 0x60, 0x3d, 0x30, 0x56, 0x0e, 0x21, 0x60, 0x95, 0xf0, 0x87, 0xae,
	0xd1, 0x7c, 0xc4, 0xb2, 0xcd, 0xe4, 0x5a, 0xcc, 0x85, 0x38, 0xcd, 0xab, 0xd5, 0x0b, 0xdf, 0xe5,
	0x20, 0x3d, 0x10, 0xba, 0x84, 0xf2, 0x5c, 0xec, 0x88, 0xfb, 0x5a, 0xd0, 0xe1, 0xeb, 0xec, 0xae,
	0xe2, 0x67, 0xf0, 0x5e, 0xae, 0x33, 0x91, 0xf9, 0x1e, 0x19, 0x1c, 0x1e, 0x05, 0x4d, 0x8b, 0x7c,
	0x77, 0x22, 0x4f, 0x4f, 0x64, 0x2f, 0xa5, 0x53, 0x6f, 0x23, 0x39, 0x2e, 0x7c, 0xc8, 0xce, 0x25,
	0xac, 0xdb, 0xe6, 0x22, 0xf2, 0x94, 0x0e, 0x5f, 0xd7, 0x7f, 0xbb, 0x80, 0x5e, 0x10, 0x6e, 0xf8,
	0x6b, 0x09, 0xe5, 0x7d, 0x3d, 0xc3, 0xaf, 0xc7, 0xb4, 0x72, 0x54, 0x38, 0xe5, 0xf9, 0x34, 0x33,
	0x3f, 0xb7, 0xa2, 0x7d, 0xf5, 0xeb, 0x5f, 0xdf, 0xe6, 0x16, 0xf1, 0x82, 0xf6, 0x01, 0xed, 0x38,
	0x5d, 0x4e, 0xdc, 0x0d, 0x42, 0x4c, 0x43, 0x4b, 0xfa, 0x8f, 0x00, 0x7f, 0x27, 0x21, 0x14, 0xbe,
	0xb1, 0x78, 0x31, 0x29, 0xcf, 0x88, 0xb8, 0xca, 0x4b, 0x59, 0x4c, 0x01, 0xd6, 0xaa, 0x80, 0x75,
	0x03, 0x2f, 0xa7, 0xc2, 0x6a, 0x11, 0x5e, 0x87, 0x42, 0x6b, 0x07, 0x96, 0x79, 0x88, 0x9f, 0x48,
	0x68, 0x7a, 0x50, 0xf6, 0xf0, 0x1b, 0x49, 0x79, 0x63, 0x14, 0x58, 0x7e, 0x33, 0x9b, 0x31, 0xc0,
	0x5c, 0x11, 0x30, 0xdf, 0xc2, 0x6a, 0x2a, 0xcc, 0xb6, 0xc5, 0xfa, 0x38, 0x19, 0xfe, 0x5b, 0x42,
	0x72, 0xb2, 0x50, 0xe1, 0xd5, 0xf4, 0x4a, 0x25, 0x28, 0xa4, 0x7c, 0xeb, 0x34, 0xae, 0xc0, 0x66,
	0x4b, 0xb0, 0xd9, 0xc0, 0xeb, 0x27, 0x29, 0x7a, 0x1d, 0x1e, 0x8f, 0x7a, 0xa3, 0x57, 0x07, 0x31,
	0xd6, 0x0e, 0x60, 0x21, 0x9a, 0x91, 0xf7, 0xc5, 0x28, 0x79, 0x70, 0x23, 0xf2, 0x97, 0x3c, 0xb8,
	0x51, 0x4d, 0x53, 0x3e, 0x12, 0x60, 0x2b, 0xf8, 0x76, 0x26, 0xb0, 0x0e, 0x35, 0xb5, 0x83, 0xfe,
	0x7d, 0x3c, 0xd4, 0x0e, 0xfa, 0x6f, 0xec, 0x21, 0xfe, 0x4f, 0x42, 0x57, 0xc7, 0xa8, 0x14, 0x1e,
	0x57, 0xd2, 0x14, 0x8d, 0x94, 0xdf, 0x39, 0x95, 0x2f, 0x50, 0x7c, 0x28, 0x28, 0xde, 0xc7, 0x9b,
	0x99, 0x28, 0xb6, 0x45, 0xb8, 0x3a, 0x0b, 0xe2, 0x79, 0x9c, 0xeb, 0xb6, 0x88, 0x38, 0x48, 0x1d,
	0xff, 0xeb, 0xcf, 0x5e, 0x82, 0xd0, 0x8d, 0x9d, 0xbd, 0xf1, 0x22, 0x2b, 0xdf, 0x3a, 0x8d, 0x2b,
	0x70, 0xdd, 0x16, 0x5c, 0xef, 0xe1, 0x8d, 0x93, 0x70, 0xdd, 0x87, 0x70, 0x49, 0x54, 0x7f, 0x90,
	0xd0, 0x54, 0x20, 0x8e, 0x78, 0x21, 0x09, 0xdd, 0x90, 0x24, 0xcb, 0xe5, 0x74, 0x43, 0x00, 0xfd,
	0xb1, 0x00, 0x7d, 0x17, 0x57, 0x52, 0x41, 0xef, 0x7a, 0xae, 0xf5, 0x7d, 0xd7, 0x1e, 0x9c, 0xbc,
	0x08, 0xd6, 0x27, 0x12, 0x2a, 0xf4, 0x85, 0x0f, 0x97, 0xc7, 0x94, 0x32, 0x22, 0xcd, 0xf2, 0x62,
	0x06, 0x4b, 0x80, 0xfb, 0xbe, 0x80, 0xbb, 0x8a, 0x6f, 0x66, 0xaa, 0xb1, 0x2f, 0xb1, 0x11, 0x8c,
	0xbf, 0x48, 0xe8, 0xa5, 0x88, 0x84, 0xe1, 0xc4, 0xe7, 0x32, 0x4e, 0x48, 0xe5, 0x6b, 0x19, 0xad,
	0x01, 0xef, 0x27, 0x02, 0xef, 0x16, 0x7e, 0xa0, 0x19, 0x96, 0xdb, 0xdc, 0x33, 0x2c, 0x9b, 0x5d,
	0xb3, 0x09, 0xff, 0x82, 0xba, 0x8f, 0x62, 0x30, 0x5b, 0xcc, 0x87, 0x5c, 0xef, 0x10, 0x7f, 0x10,
	0x06, 0xf5, 0x39, 0x52, 0xeb, 0x4a, 0xed, 0xe9, 0x51, 0x49, 0x7a, 0x76, 0x54, 0x92, 0xfe, 0x3c,
	0x2a, 0x49, 0xdf, 0x1c, 0x97, 0x26, 0x9e, 0x1d, 0x97, 0x26, 0x7e, 0x3f, 0x2e, 0x4d, 0x7c, 0xba,
	0xd2, 0xb2, 0xf8, 0x5e, 0xb7, 0xa1, 0x36, 0x69, 0x67, 0x5c, 0xd2, 0x2f, 0xc3, 0x25, 0xef, 0x39,
	0x84, 0x35, 0xf2, 0xe2, 0x47, 0xec, 0x8d, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x1a, 0xf8,
	0xe7, 0xef, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetStation items.
	GetStation(ctx context.Context, in *QueryGetStationRequest, opts ...grpc.CallOption) (*QueryGetStationResponse, error)
	// Queries a list of ListStations items.
	ListStations(ctx context.Context, in *QueryListStationsRequest, opts ...grpc.CallOption) (*QueryListStationsResponse, error)
	// Queries a list of GetStationDetailsByAddress items.
	GetStationDetailsByAddress(ctx context.Context, in *QueryGetStationDetailsByAddressRequest, opts ...grpc.CallOption) (*QueryGetStationDetailsByAddressResponse, error)
	// Queries a list of GetPod items.
	GetPod(ctx context.Context, in *QueryGetPodRequest, opts ...grpc.CallOption) (*QueryGetPodResponse, error)
	// Queries a list of GetLatestSubmittedPodNumber items.
	GetLatestSubmittedPodNumber(ctx context.Context, in *QueryGetLatestSubmittedPodNumberRequest, opts ...grpc.CallOption) (*QueryGetLatestSubmittedPodNumberResponse, error)
	// Queries a list of GetLatestVerifiedPodNumber items.
	GetLatestVerifiedPodNumber(ctx context.Context, in *QueryGetLatestVerifiedPodNumberRequest, opts ...grpc.CallOption) (*QueryGetLatestVerifiedPodNumberResponse, error)
	// Queries a list of FetchVrn items.
	FetchVrn(ctx context.Context, in *QueryFetchVrnRequest, opts ...grpc.CallOption) (*QueryFetchVrnResponse, error)
	// Queries a list of GetTracks items.
	GetTracks(ctx context.Context, in *QueryGetTracksRequest, opts ...grpc.CallOption) (*QueryGetTracksResponse, error)
	// Queries a list of IsTrackMember items.
	IsTrackMember(ctx context.Context, in *QueryIsTrackMemberRequest, opts ...grpc.CallOption) (*QueryIsTrackMemberResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStation(ctx context.Context, in *QueryGetStationRequest, opts ...grpc.CallOption) (*QueryGetStationResponse, error) {
	out := new(QueryGetStationResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/GetStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListStations(ctx context.Context, in *QueryListStationsRequest, opts ...grpc.CallOption) (*QueryListStationsResponse, error) {
	out := new(QueryListStationsResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/ListStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStationDetailsByAddress(ctx context.Context, in *QueryGetStationDetailsByAddressRequest, opts ...grpc.CallOption) (*QueryGetStationDetailsByAddressResponse, error) {
	out := new(QueryGetStationDetailsByAddressResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/GetStationDetailsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPod(ctx context.Context, in *QueryGetPodRequest, opts ...grpc.CallOption) (*QueryGetPodResponse, error) {
	out := new(QueryGetPodResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/GetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestSubmittedPodNumber(ctx context.Context, in *QueryGetLatestSubmittedPodNumberRequest, opts ...grpc.CallOption) (*QueryGetLatestSubmittedPodNumberResponse, error) {
	out := new(QueryGetLatestSubmittedPodNumberResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/GetLatestSubmittedPodNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestVerifiedPodNumber(ctx context.Context, in *QueryGetLatestVerifiedPodNumberRequest, opts ...grpc.CallOption) (*QueryGetLatestVerifiedPodNumberResponse, error) {
	out := new(QueryGetLatestVerifiedPodNumberResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/GetLatestVerifiedPodNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FetchVrn(ctx context.Context, in *QueryFetchVrnRequest, opts ...grpc.CallOption) (*QueryFetchVrnResponse, error) {
	out := new(QueryFetchVrnResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/FetchVrn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTracks(ctx context.Context, in *QueryGetTracksRequest, opts ...grpc.CallOption) (*QueryGetTracksResponse, error) {
	out := new(QueryGetTracksResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/GetTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsTrackMember(ctx context.Context, in *QueryIsTrackMemberRequest, opts ...grpc.CallOption) (*QueryIsTrackMemberResponse, error) {
	out := new(QueryIsTrackMemberResponse)
	err := c.cc.Invoke(ctx, "/junction.junction.Query/IsTrackMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetStation items.
	GetStation(context.Context, *QueryGetStationRequest) (*QueryGetStationResponse, error)
	// Queries a list of ListStations items.
	ListStations(context.Context, *QueryListStationsRequest) (*QueryListStationsResponse, error)
	// Queries a list of GetStationDetailsByAddress items.
	GetStationDetailsByAddress(context.Context, *QueryGetStationDetailsByAddressRequest) (*QueryGetStationDetailsByAddressResponse, error)
	// Queries a list of GetPod items.
	GetPod(context.Context, *QueryGetPodRequest) (*QueryGetPodResponse, error)
	// Queries a list of GetLatestSubmittedPodNumber items.
	GetLatestSubmittedPodNumber(context.Context, *QueryGetLatestSubmittedPodNumberRequest) (*QueryGetLatestSubmittedPodNumberResponse, error)
	// Queries a list of GetLatestVerifiedPodNumber items.
	GetLatestVerifiedPodNumber(context.Context, *QueryGetLatestVerifiedPodNumberRequest) (*QueryGetLatestVerifiedPodNumberResponse, error)
	// Queries a list of FetchVrn items.
	FetchVrn(context.Context, *QueryFetchVrnRequest) (*QueryFetchVrnResponse, error)
	// Queries a list of GetTracks items.
	GetTracks(context.Context, *QueryGetTracksRequest) (*QueryGetTracksResponse, error)
	// Queries a list of IsTrackMember items.
	IsTrackMember(context.Context, *QueryIsTrackMemberRequest) (*QueryIsTrackMemberResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetStation(ctx context.Context, req *QueryGetStationRequest) (*QueryGetStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (*UnimplementedQueryServer) ListStations(ctx context.Context, req *QueryListStationsRequest) (*QueryListStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStations not implemented")
}
func (*UnimplementedQueryServer) GetStationDetailsByAddress(ctx context.Context, req *QueryGetStationDetailsByAddressRequest) (*QueryGetStationDetailsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationDetailsByAddress not implemented")
}
func (*UnimplementedQueryServer) GetPod(ctx context.Context, req *QueryGetPodRequest) (*QueryGetPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (*UnimplementedQueryServer) GetLatestSubmittedPodNumber(ctx context.Context, req *QueryGetLatestSubmittedPodNumberRequest) (*QueryGetLatestSubmittedPodNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSubmittedPodNumber not implemented")
}
func (*UnimplementedQueryServer) GetLatestVerifiedPodNumber(ctx context.Context, req *QueryGetLatestVerifiedPodNumberRequest) (*QueryGetLatestVerifiedPodNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestVerifiedPodNumber not implemented")
}
func (*UnimplementedQueryServer) FetchVrn(ctx context.Context, req *QueryFetchVrnRequest) (*QueryFetchVrnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchVrn not implemented")
}
func (*UnimplementedQueryServer) GetTracks(ctx context.Context, req *QueryGetTracksRequest) (*QueryGetTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracks not implemented")
}
func (*UnimplementedQueryServer) IsTrackMember(ctx context.Context, req *QueryIsTrackMemberRequest) (*QueryIsTrackMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTrackMember not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/GetStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStation(ctx, req.(*QueryGetStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/ListStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListStations(ctx, req.(*QueryListStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStationDetailsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStationDetailsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStationDetailsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/GetStationDetailsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStationDetailsByAddress(ctx, req.(*QueryGetStationDetailsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPod(ctx, req.(*QueryGetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestSubmittedPodNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestSubmittedPodNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestSubmittedPodNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/GetLatestSubmittedPodNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestSubmittedPodNumber(ctx, req.(*QueryGetLatestSubmittedPodNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestVerifiedPodNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestVerifiedPodNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestVerifiedPodNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/GetLatestVerifiedPodNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestVerifiedPodNumber(ctx, req.(*QueryGetLatestVerifiedPodNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FetchVrn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFetchVrnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FetchVrn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/FetchVrn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FetchVrn(ctx, req.(*QueryFetchVrnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/GetTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTracks(ctx, req.(*QueryGetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsTrackMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsTrackMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsTrackMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.junction.Query/IsTrackMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsTrackMember(ctx, req.(*QueryIsTrackMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junction.junction.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _Query_GetStation_Handler,
		},
		{
			MethodName: "ListStations",
			Handler:    _Query_ListStations_Handler,
		},
		{
			MethodName: "GetStationDetailsByAddress",
			Handler:    _Query_GetStationDetailsByAddress_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _Query_GetPod_Handler,
		},
		{
			MethodName: "GetLatestSubmittedPodNumber",
			Handler:    _Query_GetLatestSubmittedPodNumber_Handler,
		},
		{
			MethodName: "GetLatestVerifiedPodNumber",
			Handler:    _Query_GetLatestVerifiedPodNumber_Handler,
		},
		{
			MethodName: "FetchVrn",
			Handler:    _Query_FetchVrn_Handler,
		},
		{
			MethodName: "GetTracks",
			Handler:    _Query_GetTracks_Handler,
		},
		{
			MethodName: "IsTrackMember",
			Handler:    _Query_IsTrackMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/junction/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stations != nil {
		{
			size, err := m.Stations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListStationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListStationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListStationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListStationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListStationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListStationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StationsList) > 0 {
		for iNdEx := len(m.StationsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StationsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationDetailsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationDetailsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationDetailsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStationDetailsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStationDetailsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStationDetailsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stations) > 0 {
		for iNdEx := len(m.Stations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestSubmittedPodNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestSubmittedPodNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestSubmittedPodNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestSubmittedPodNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestSubmittedPodNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestSubmittedPodNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestVerifiedPodNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestVerifiedPodNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestVerifiedPodNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestVerifiedPodNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestVerifiedPodNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestVerifiedPodNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PodNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchVrnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchVrnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchVrnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.PodNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchVrnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchVrnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchVrnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTracksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTracksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTracksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTracksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTracksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTracksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tracks) > 0 {
		for iNdEx := len(m.Tracks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tracks[iNdEx])
			copy(dAtA[i:], m.Tracks[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Tracks[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsTrackMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsTrackMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsTrackMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TrackAddress) > 0 {
		i -= len(m.TrackAddress)
		copy(dAtA[i:], m.TrackAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrackAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsTrackMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsTrackMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsTrackMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stations != nil {
		l = m.Stations.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListStationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListStationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StationsList) > 0 {
		for _, e := range m.StationsList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationDetailsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStationDetailsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for _, e := range m.Stations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovQuery(uint64(m.PodNumber))
	}
	return n
}

func (m *QueryGetPodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLatestSubmittedPodNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLatestSubmittedPodNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovQuery(uint64(m.PodNumber))
	}
	return n
}

func (m *QueryGetLatestVerifiedPodNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLatestVerifiedPodNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PodNumber != 0 {
		n += 1 + sovQuery(uint64(m.PodNumber))
	}
	return n
}

func (m *QueryFetchVrnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodNumber != 0 {
		n += 1 + sovQuery(uint64(m.PodNumber))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFetchVrnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTracksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTracksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tracks) > 0 {
		for _, s := range m.Tracks {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsTrackMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrackAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsTrackMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stations == nil {
				m.Stations = &Stations{}
			}
			if err := m.Stations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListStationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListStationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListStationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListStationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListStationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListStationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationsList = append(m.StationsList, Stations{})
			if err := m.StationsList[len(m.StationsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationDetailsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationDetailsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationDetailsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStationDetailsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStationDetailsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStationDetailsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stations = append(m.Stations, Stations{})
			if err := m.Stations[len(m.Stations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pod == nil {
				m.Pod = &Pods{}
			}
			if err := m.Pod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestSubmittedPodNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestSubmittedPodNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestSubmittedPodNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestSubmittedPodNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestSubmittedPodNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestSubmittedPodNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestVerifiedPodNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestVerifiedPodNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestVerifiedPodNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestVerifiedPodNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestVerifiedPodNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestVerifiedPodNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchVrnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchVrnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchVrnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchVrnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchVrnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchVrnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &VrfRecord{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTracksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTracksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTracksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTracksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTracksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTracksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracks = append(m.Tracks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsTrackMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsTrackMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsTrackMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsTrackMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsTrackMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsTrackMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
