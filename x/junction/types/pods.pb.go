// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/junction/pods.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pods struct {
	PodNumber              uint64 `protobuf:"varint,1,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
	MerkleRootHash         string `protobuf:"bytes,2,opt,name=merkleRootHash,proto3" json:"merkleRootHash,omitempty"`
	PreviousMerkleRootHash string `protobuf:"bytes,3,opt,name=previousMerkleRootHash,proto3" json:"previousMerkleRootHash,omitempty"`
	ZkProof                []byte `protobuf:"bytes,4,opt,name=zkProof,proto3" json:"zkProof,omitempty"`
	Witness                []byte `protobuf:"bytes,5,opt,name=witness,proto3" json:"witness,omitempty"`
	Timestamp              string `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsVerified             bool   `protobuf:"varint,7,opt,name=isVerified,proto3" json:"isVerified,omitempty"`
}

func (m *Pods) Reset()         { *m = Pods{} }
func (m *Pods) String() string { return proto.CompactTextString(m) }
func (*Pods) ProtoMessage()    {}
func (*Pods) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e65d13ccefe661, []int{0}
}
func (m *Pods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pods.Merge(m, src)
}
func (m *Pods) XXX_Size() int {
	return m.Size()
}
func (m *Pods) XXX_DiscardUnknown() {
	xxx_messageInfo_Pods.DiscardUnknown(m)
}

var xxx_messageInfo_Pods proto.InternalMessageInfo

func (m *Pods) GetPodNumber() uint64 {
	if m != nil {
		return m.PodNumber
	}
	return 0
}

func (m *Pods) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *Pods) GetPreviousMerkleRootHash() string {
	if m != nil {
		return m.PreviousMerkleRootHash
	}
	return ""
}

func (m *Pods) GetZkProof() []byte {
	if m != nil {
		return m.ZkProof
	}
	return nil
}

func (m *Pods) GetWitness() []byte {
	if m != nil {
		return m.Witness
	}
	return nil
}

func (m *Pods) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Pods) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func init() {
	proto.RegisterType((*Pods)(nil), "junction.junction.Pods")
}

func init() { proto.RegisterFile("junction/junction/pods.proto", fileDescriptor_14e65d13ccefe661) }

var fileDescriptor_14e65d13ccefe661 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x6b, 0x08, 0x2d, 0xb5, 0x10, 0x12, 0x1e, 0x90, 0x87, 0xca, 0x8a, 0x18, 0x50, 0x16,
	0xd2, 0x01, 0xa9, 0x0f, 0xc0, 0xc4, 0x02, 0x8a, 0x32, 0x30, 0xb0, 0xe5, 0xc7, 0x25, 0x26, 0xc4,
	0xd7, 0xf2, 0x75, 0x28, 0xf0, 0x14, 0x3c, 0x16, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x03, 0x33, 0x6a,
	0x20, 0x04, 0x90, 0xd8, 0xce, 0xf9, 0xce, 0xd1, 0xd5, 0xd5, 0xa1, 0xb3, 0xdb, 0x5a, 0x67, 0x4e,
	0x81, 0x9e, 0x7f, 0x0b, 0x03, 0x39, 0x86, 0xc6, 0x82, 0x03, 0x76, 0xd0, 0xc3, 0xb0, 0x17, 0x47,
	0xef, 0x84, 0x7a, 0x11, 0xe4, 0xc8, 0x66, 0x74, 0x6a, 0x20, 0xbf, 0xac, 0xab, 0x54, 0x5a, 0x4e,
	0x7c, 0x12, 0x78, 0xf1, 0x00, 0xd8, 0x31, 0xdd, 0xaf, 0xa4, 0x2d, 0xef, 0x64, 0x0c, 0xe0, 0xce,
	0x13, 0x2c, 0xf8, 0x96, 0x4f, 0x82, 0x69, 0xfc, 0x87, 0xb2, 0x05, 0x3d, 0x34, 0x56, 0xde, 0x2b,
	0xa8, 0xf1, 0xe2, 0x77, 0x7f, 0xbb, 0xeb, 0xff, 0x93, 0x32, 0x4e, 0x27, 0x4f, 0x65, 0x64, 0x01,
	0x96, 0xdc, 0xf3, 0x49, 0xb0, 0x17, 0xf7, 0x76, 0x93, 0xac, 0x94, 0xd3, 0x12, 0x91, 0xef, 0x7c,
	0x26, 0x5f, 0x76, 0xf3, 0xb1, 0x53, 0x95, 0x44, 0x97, 0x54, 0x86, 0x8f, 0xbb, 0xf3, 0x03, 0x60,
	0x82, 0x52, 0x85, 0x57, 0xd2, 0xaa, 0xa5, 0x92, 0x39, 0x9f, 0xf8, 0x24, 0xd8, 0x8d, 0x7f, 0x90,
	0xb3, 0xe8, 0xa5, 0x11, 0x64, 0xdd, 0x08, 0xf2, 0xd6, 0x08, 0xf2, 0xdc, 0x8a, 0xd1, 0xba, 0x15,
	0xa3, 0xd7, 0x56, 0x8c, 0xae, 0x17, 0x37, 0xca, 0x15, 0x75, 0x1a, 0x66, 0x50, 0xcd, 0x13, 0x65,
	0xb3, 0x22, 0x51, 0x1a, 0x4f, 0xb4, 0x74, 0x2b, 0xb0, 0xe5, 0xb0, 0xeb, 0xc3, 0x20, 0xdd, 0xa3,
	0x91, 0x98, 0x8e, 0xbb, 0x91, 0x4f, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x5b, 0xab, 0x10,
	0x84, 0x01, 0x00, 0x00,
}

func (m *Pods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintPods(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Witness) > 0 {
		i -= len(m.Witness)
		copy(dAtA[i:], m.Witness)
		i = encodeVarintPods(dAtA, i, uint64(len(m.Witness)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ZkProof) > 0 {
		i -= len(m.ZkProof)
		copy(dAtA[i:], m.ZkProof)
		i = encodeVarintPods(dAtA, i, uint64(len(m.ZkProof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreviousMerkleRootHash) > 0 {
		i -= len(m.PreviousMerkleRootHash)
		copy(dAtA[i:], m.PreviousMerkleRootHash)
		i = encodeVarintPods(dAtA, i, uint64(len(m.PreviousMerkleRootHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MerkleRootHash) > 0 {
		i -= len(m.MerkleRootHash)
		copy(dAtA[i:], m.MerkleRootHash)
		i = encodeVarintPods(dAtA, i, uint64(len(m.MerkleRootHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.PodNumber != 0 {
		i = encodeVarintPods(dAtA, i, uint64(m.PodNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPods(dAtA []byte, offset int, v uint64) int {
	offset -= sovPods(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodNumber != 0 {
		n += 1 + sovPods(uint64(m.PodNumber))
	}
	l = len(m.MerkleRootHash)
	if l > 0 {
		n += 1 + l + sovPods(uint64(l))
	}
	l = len(m.PreviousMerkleRootHash)
	if l > 0 {
		n += 1 + l + sovPods(uint64(l))
	}
	l = len(m.ZkProof)
	if l > 0 {
		n += 1 + l + sovPods(uint64(l))
	}
	l = len(m.Witness)
	if l > 0 {
		n += 1 + l + sovPods(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovPods(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	return n
}

func sovPods(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPods(x uint64) (n int) {
	return sovPods(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			m.PodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousMerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousMerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPods
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkProof = append(m.ZkProof[:0], dAtA[iNdEx:postIndex]...)
			if m.ZkProof == nil {
				m.ZkProof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPods
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Witness = append(m.Witness[:0], dAtA[iNdEx:postIndex]...)
			if m.Witness == nil {
				m.Witness = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPods(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPods
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPods
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPods
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPods
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPods        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPods          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPods = fmt.Errorf("proto: unexpected end of group")
)
