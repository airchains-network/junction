// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/zksequencer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCollegeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCollegeRequest) Reset()         { *m = QueryGetCollegeRequest{} }
func (m *QueryGetCollegeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCollegeRequest) ProtoMessage()    {}
func (*QueryGetCollegeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{2}
}
func (m *QueryGetCollegeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCollegeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCollegeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCollegeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCollegeRequest.Merge(m, src)
}
func (m *QueryGetCollegeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCollegeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCollegeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCollegeRequest proto.InternalMessageInfo

func (m *QueryGetCollegeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCollegeResponse struct {
	College College `protobuf:"bytes,1,opt,name=College,proto3" json:"College"`
}

func (m *QueryGetCollegeResponse) Reset()         { *m = QueryGetCollegeResponse{} }
func (m *QueryGetCollegeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCollegeResponse) ProtoMessage()    {}
func (*QueryGetCollegeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{3}
}
func (m *QueryGetCollegeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCollegeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCollegeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCollegeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCollegeResponse.Merge(m, src)
}
func (m *QueryGetCollegeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCollegeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCollegeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCollegeResponse proto.InternalMessageInfo

func (m *QueryGetCollegeResponse) GetCollege() College {
	if m != nil {
		return m.College
	}
	return College{}
}

type QueryAllCollegeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCollegeRequest) Reset()         { *m = QueryAllCollegeRequest{} }
func (m *QueryAllCollegeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollegeRequest) ProtoMessage()    {}
func (*QueryAllCollegeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{4}
}
func (m *QueryAllCollegeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollegeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollegeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollegeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollegeRequest.Merge(m, src)
}
func (m *QueryAllCollegeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollegeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollegeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollegeRequest proto.InternalMessageInfo

func (m *QueryAllCollegeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCollegeResponse struct {
	College    []College           `protobuf:"bytes,1,rep,name=College,proto3" json:"College"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCollegeResponse) Reset()         { *m = QueryAllCollegeResponse{} }
func (m *QueryAllCollegeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollegeResponse) ProtoMessage()    {}
func (*QueryAllCollegeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{5}
}
func (m *QueryAllCollegeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollegeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollegeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollegeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollegeResponse.Merge(m, src)
}
func (m *QueryAllCollegeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollegeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollegeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollegeResponse proto.InternalMessageInfo

func (m *QueryAllCollegeResponse) GetCollege() []College {
	if m != nil {
		return m.College
	}
	return nil
}

func (m *QueryAllCollegeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryQueryVrfStudentRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryQueryVrfStudentRequest) Reset()         { *m = QueryQueryVrfStudentRequest{} }
func (m *QueryQueryVrfStudentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueryVrfStudentRequest) ProtoMessage()    {}
func (*QueryQueryVrfStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{6}
}
func (m *QueryQueryVrfStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryVrfStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryVrfStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryVrfStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryVrfStudentRequest.Merge(m, src)
}
func (m *QueryQueryVrfStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryVrfStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryVrfStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryVrfStudentRequest proto.InternalMessageInfo

func (m *QueryQueryVrfStudentRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryQueryVrfStudentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryQueryVrfStudentRequest) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type QueryQueryVrfStudentResponse struct {
}

func (m *QueryQueryVrfStudentResponse) Reset()         { *m = QueryQueryVrfStudentResponse{} }
func (m *QueryQueryVrfStudentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueryVrfStudentResponse) ProtoMessage()    {}
func (*QueryQueryVrfStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{7}
}
func (m *QueryQueryVrfStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryVrfStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryVrfStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryVrfStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryVrfStudentResponse.Merge(m, src)
}
func (m *QueryQueryVrfStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryVrfStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryVrfStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryVrfStudentResponse proto.InternalMessageInfo

type QueryQueryVrfStudent2Request struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryQueryVrfStudent2Request) Reset()         { *m = QueryQueryVrfStudent2Request{} }
func (m *QueryQueryVrfStudent2Request) String() string { return proto.CompactTextString(m) }
func (*QueryQueryVrfStudent2Request) ProtoMessage()    {}
func (*QueryQueryVrfStudent2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{8}
}
func (m *QueryQueryVrfStudent2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryVrfStudent2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryVrfStudent2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryVrfStudent2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryVrfStudent2Request.Merge(m, src)
}
func (m *QueryQueryVrfStudent2Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryVrfStudent2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryVrfStudent2Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryVrfStudent2Request proto.InternalMessageInfo

func (m *QueryQueryVrfStudent2Request) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryQueryVrfStudent2Response struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryQueryVrfStudent2Response) Reset()         { *m = QueryQueryVrfStudent2Response{} }
func (m *QueryQueryVrfStudent2Response) String() string { return proto.CompactTextString(m) }
func (*QueryQueryVrfStudent2Response) ProtoMessage()    {}
func (*QueryQueryVrfStudent2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10378e8b232945d, []int{9}
}
func (m *QueryQueryVrfStudent2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryVrfStudent2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryVrfStudent2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryVrfStudent2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryVrfStudent2Response.Merge(m, src)
}
func (m *QueryQueryVrfStudent2Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryVrfStudent2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryVrfStudent2Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryVrfStudent2Response proto.InternalMessageInfo

func (m *QueryQueryVrfStudent2Response) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryQueryVrfStudent2Response) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "junction.zksequencer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "junction.zksequencer.QueryParamsResponse")
	proto.RegisterType((*QueryGetCollegeRequest)(nil), "junction.zksequencer.QueryGetCollegeRequest")
	proto.RegisterType((*QueryGetCollegeResponse)(nil), "junction.zksequencer.QueryGetCollegeResponse")
	proto.RegisterType((*QueryAllCollegeRequest)(nil), "junction.zksequencer.QueryAllCollegeRequest")
	proto.RegisterType((*QueryAllCollegeResponse)(nil), "junction.zksequencer.QueryAllCollegeResponse")
	proto.RegisterType((*QueryQueryVrfStudentRequest)(nil), "junction.zksequencer.QueryQueryVrfStudentRequest")
	proto.RegisterType((*QueryQueryVrfStudentResponse)(nil), "junction.zksequencer.QueryQueryVrfStudentResponse")
	proto.RegisterType((*QueryQueryVrfStudent2Request)(nil), "junction.zksequencer.QueryQueryVrfStudent2Request")
	proto.RegisterType((*QueryQueryVrfStudent2Response)(nil), "junction.zksequencer.QueryQueryVrfStudent2Response")
}

func init() { proto.RegisterFile("junction/zksequencer/query.proto", fileDescriptor_a10378e8b232945d) }

var fileDescriptor_a10378e8b232945d = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0x33, 0x69, 0xbe, 0x54, 0x9d, 0x4f, 0xe2, 0x67, 0x88, 0x20, 0x32, 0x89, 0x5b, 0xac,
	0x02, 0x21, 0x02, 0x0f, 0x49, 0xa5, 0xee, 0xaa, 0xaa, 0x41, 0xd0, 0x15, 0x52, 0x31, 0x52, 0x85,
	0x60, 0x11, 0x26, 0xc9, 0xd4, 0x32, 0x38, 0x1e, 0xd7, 0x76, 0x2a, 0x4a, 0x94, 0x0d, 0xdc, 0x40,
	0x05, 0x57, 0xc0, 0x8e, 0x0d, 0x12, 0x12, 0x17, 0xc0, 0xb6, 0xcb, 0x4a, 0x6c, 0x58, 0x21, 0x94,
	0x20, 0x71, 0x1b, 0xc8, 0x33, 0xe3, 0x90, 0x1f, 0xc7, 0x24, 0x1b, 0x6b, 0x32, 0x7e, 0xcf, 0x7b,
	0x9e, 0x99, 0x73, 0x4e, 0x0c, 0xd7, 0x5e, 0x74, 0x9c, 0x66, 0x60, 0x31, 0x07, 0xbf, 0x7e, 0xe9,
	0xd3, 0xc3, 0x0e, 0x75, 0x9a, 0xd4, 0xc3, 0x87, 0x1d, 0xea, 0x1d, 0xeb, 0xae, 0xc7, 0x02, 0x86,
	0x72, 0x91, 0x42, 0x1f, 0x51, 0x28, 0x17, 0x49, 0xdb, 0x72, 0x18, 0xe6, 0x4f, 0x21, 0x54, 0x72,
	0x26, 0x33, 0x19, 0x5f, 0xe2, 0x70, 0x25, 0x77, 0x0b, 0x26, 0x63, 0xa6, 0x4d, 0x31, 0x71, 0x2d,
	0x4c, 0x1c, 0x87, 0x05, 0x24, 0xf4, 0xf2, 0xe5, 0xdb, 0x72, 0x93, 0xf9, 0x6d, 0xe6, 0xe3, 0x06,
	0xf1, 0xa9, 0xc8, 0x8a, 0x8f, 0x2a, 0x0d, 0x1a, 0x90, 0x0a, 0x76, 0x89, 0x69, 0x39, 0x5c, 0x2c,
	0xb5, 0xd7, 0x62, 0x51, 0x5d, 0xe2, 0x91, 0x76, 0x64, 0xa7, 0xc5, 0x4a, 0x9a, 0xcc, 0xb6, 0xa9,
	0x49, 0x85, 0x46, 0xcb, 0x41, 0xf4, 0x28, 0x4c, 0xb4, 0xc7, 0x03, 0x8d, 0x50, 0xe5, 0x07, 0xda,
	0x3e, 0xbc, 0x34, 0xb6, 0xeb, 0xbb, 0xcc, 0xf1, 0x29, 0xda, 0x86, 0x59, 0x91, 0x20, 0x0f, 0xd6,
	0x40, 0xe9, 0xff, 0x6a, 0x41, 0x8f, 0xbb, 0x0d, 0x5d, 0x44, 0xd5, 0x56, 0x4e, 0x7f, 0xac, 0xa6,
	0x3e, 0xfe, 0xfe, 0x5c, 0x06, 0x86, 0x0c, 0xd3, 0x4a, 0xf0, 0x32, 0xf7, 0xdd, 0xa5, 0xc1, 0x3d,
	0x81, 0x21, 0x33, 0xa2, 0x73, 0x30, 0x6d, 0xb5, 0xb8, 0x6d, 0xc6, 0x48, 0x5b, 0x2d, 0xed, 0x09,
	0xbc, 0x32, 0xa5, 0x94, 0x14, 0x5b, 0x70, 0x59, 0x6e, 0x49, 0x8c, 0x62, 0x3c, 0x86, 0x14, 0xd5,
	0x32, 0x21, 0x87, 0x11, 0xc5, 0x68, 0xcf, 0x25, 0xc3, 0x8e, 0x6d, 0x4f, 0x30, 0x3c, 0x80, 0xf0,
	0xef, 0x35, 0x4b, 0xef, 0x1b, 0xba, 0xa8, 0x89, 0x1e, 0xd6, 0x44, 0x17, 0x9d, 0x20, 0x6b, 0xa2,
	0xef, 0x91, 0x61, 0xac, 0x31, 0x12, 0xa9, 0x7d, 0x00, 0x12, 0x7e, 0x34, 0x45, 0x1c, 0xfc, 0xd2,
	0xa2, 0xf0, 0x68, 0x77, 0x0c, 0x31, 0xcd, 0x11, 0x6f, 0xfe, 0x13, 0x51, 0xe4, 0x1e, 0x63, 0x7c,
	0x06, 0xaf, 0x72, 0x44, 0xfe, 0xd8, 0xf7, 0x0e, 0x1e, 0x07, 0x9d, 0x16, 0x75, 0x82, 0x19, 0xe5,
	0x40, 0x08, 0x66, 0x1c, 0xd2, 0xa6, 0x3c, 0xe3, 0x8a, 0xc1, 0xd7, 0x28, 0x0f, 0x97, 0x5b, 0x34,
	0x20, 0x96, 0xed, 0xe7, 0x97, 0xf8, 0x76, 0xf4, 0x53, 0x53, 0x61, 0x21, 0xde, 0x5c, 0x80, 0x68,
	0x7a, 0xfc, 0xfb, 0xea, 0xac, 0x66, 0x78, 0x08, 0x8b, 0x33, 0xf4, 0xf2, 0x56, 0x23, 0x3c, 0x10,
	0x8f, 0x97, 0x1e, 0xc3, 0xab, 0x7e, 0xca, 0xc2, 0xff, 0xb8, 0x15, 0x7a, 0x0b, 0x60, 0x56, 0x74,
	0x2b, 0x2a, 0xc5, 0xd7, 0x61, 0x7a, 0x38, 0x94, 0x5b, 0x73, 0x28, 0xe5, 0x41, 0xd7, 0xdf, 0x7c,
	0xfb, 0xf5, 0x3e, 0xad, 0xa2, 0x02, 0x4e, 0x98, 0x56, 0xf4, 0x0e, 0x0c, 0x9b, 0x02, 0xdd, 0x4e,
	0x30, 0x9f, 0x9a, 0x1a, 0xe5, 0xce, 0x9c, 0x6a, 0x89, 0x53, 0xe6, 0x38, 0xeb, 0x48, 0xc3, 0x49,
	0xff, 0x0c, 0xb8, 0x6b, 0xb5, 0x7a, 0xe8, 0x04, 0x40, 0x28, 0xe3, 0x77, 0x6c, 0x3b, 0x91, 0x6b,
	0x6a, 0x92, 0x12, 0xb9, 0xa6, 0x87, 0x42, 0xbb, 0xce, 0xb9, 0x56, 0x51, 0x31, 0x91, 0x0b, 0x7d,
	0x05, 0xf0, 0xfc, 0x44, 0x0b, 0xa0, 0x4a, 0x42, 0xa6, 0xf8, 0xde, 0x56, 0xaa, 0x8b, 0x84, 0x48,
	0xc2, 0xfb, 0x9c, 0x70, 0x1b, 0x6d, 0xe1, 0xd9, 0x5f, 0x88, 0xfa, 0x91, 0x77, 0x50, 0xf7, 0x45,
	0x20, 0xbf, 0x43, 0xdc, 0x0d, 0x1b, 0xb1, 0x87, 0xbb, 0xb2, 0xf1, 0x7a, 0xe8, 0x0b, 0x80, 0x17,
	0x26, 0x9b, 0x18, 0x2d, 0xc0, 0x13, 0x4d, 0x88, 0xb2, 0xb1, 0x50, 0x8c, 0x3c, 0xc4, 0x26, 0x3f,
	0xc4, 0x5d, 0xa4, 0xcf, 0x79, 0x88, 0x7a, 0x95, 0x1f, 0xa3, 0xb6, 0x79, 0xda, 0x57, 0xc1, 0x59,
	0x5f, 0x05, 0x3f, 0xfb, 0x2a, 0x38, 0x19, 0xa8, 0xa9, 0xb3, 0x81, 0x9a, 0xfa, 0x3e, 0x50, 0x53,
	0x4f, 0x0b, 0x43, 0xa3, 0x57, 0x63, 0x56, 0xc1, 0xb1, 0x4b, 0xfd, 0x46, 0x96, 0x7f, 0x62, 0x36,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63, 0x1c, 0xa6, 0x0c, 0x56, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of College items.
	College(ctx context.Context, in *QueryGetCollegeRequest, opts ...grpc.CallOption) (*QueryGetCollegeResponse, error)
	CollegeAll(ctx context.Context, in *QueryAllCollegeRequest, opts ...grpc.CallOption) (*QueryAllCollegeResponse, error)
	// Queries a list of QueryVrfStudent items.
	QueryVrfStudent(ctx context.Context, in *QueryQueryVrfStudentRequest, opts ...grpc.CallOption) (*QueryQueryVrfStudentResponse, error)
	// Queries a list of QueryVrfStudent2 items.
	QueryVrfStudent2(ctx context.Context, in *QueryQueryVrfStudent2Request, opts ...grpc.CallOption) (*QueryQueryVrfStudent2Response, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/junction.zksequencer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) College(ctx context.Context, in *QueryGetCollegeRequest, opts ...grpc.CallOption) (*QueryGetCollegeResponse, error) {
	out := new(QueryGetCollegeResponse)
	err := c.cc.Invoke(ctx, "/junction.zksequencer.Query/College", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollegeAll(ctx context.Context, in *QueryAllCollegeRequest, opts ...grpc.CallOption) (*QueryAllCollegeResponse, error) {
	out := new(QueryAllCollegeResponse)
	err := c.cc.Invoke(ctx, "/junction.zksequencer.Query/CollegeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVrfStudent(ctx context.Context, in *QueryQueryVrfStudentRequest, opts ...grpc.CallOption) (*QueryQueryVrfStudentResponse, error) {
	out := new(QueryQueryVrfStudentResponse)
	err := c.cc.Invoke(ctx, "/junction.zksequencer.Query/QueryVrfStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVrfStudent2(ctx context.Context, in *QueryQueryVrfStudent2Request, opts ...grpc.CallOption) (*QueryQueryVrfStudent2Response, error) {
	out := new(QueryQueryVrfStudent2Response)
	err := c.cc.Invoke(ctx, "/junction.zksequencer.Query/QueryVrfStudent2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of College items.
	College(context.Context, *QueryGetCollegeRequest) (*QueryGetCollegeResponse, error)
	CollegeAll(context.Context, *QueryAllCollegeRequest) (*QueryAllCollegeResponse, error)
	// Queries a list of QueryVrfStudent items.
	QueryVrfStudent(context.Context, *QueryQueryVrfStudentRequest) (*QueryQueryVrfStudentResponse, error)
	// Queries a list of QueryVrfStudent2 items.
	QueryVrfStudent2(context.Context, *QueryQueryVrfStudent2Request) (*QueryQueryVrfStudent2Response, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) College(ctx context.Context, req *QueryGetCollegeRequest) (*QueryGetCollegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method College not implemented")
}
func (*UnimplementedQueryServer) CollegeAll(ctx context.Context, req *QueryAllCollegeRequest) (*QueryAllCollegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollegeAll not implemented")
}
func (*UnimplementedQueryServer) QueryVrfStudent(ctx context.Context, req *QueryQueryVrfStudentRequest) (*QueryQueryVrfStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVrfStudent not implemented")
}
func (*UnimplementedQueryServer) QueryVrfStudent2(ctx context.Context, req *QueryQueryVrfStudent2Request) (*QueryQueryVrfStudent2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVrfStudent2 not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.zksequencer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_College_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCollegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).College(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.zksequencer.Query/College",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).College(ctx, req.(*QueryGetCollegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollegeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollegeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.zksequencer.Query/CollegeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollegeAll(ctx, req.(*QueryAllCollegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVrfStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryVrfStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVrfStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.zksequencer.Query/QueryVrfStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVrfStudent(ctx, req.(*QueryQueryVrfStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVrfStudent2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryVrfStudent2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVrfStudent2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/junction.zksequencer.Query/QueryVrfStudent2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVrfStudent2(ctx, req.(*QueryQueryVrfStudent2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "junction.zksequencer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "College",
			Handler:    _Query_College_Handler,
		},
		{
			MethodName: "CollegeAll",
			Handler:    _Query_CollegeAll_Handler,
		},
		{
			MethodName: "QueryVrfStudent",
			Handler:    _Query_QueryVrfStudent_Handler,
		},
		{
			MethodName: "QueryVrfStudent2",
			Handler:    _Query_QueryVrfStudent2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/zksequencer/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCollegeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCollegeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCollegeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCollegeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCollegeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCollegeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.College.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCollegeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollegeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollegeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCollegeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollegeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollegeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.College) > 0 {
		for iNdEx := len(m.College) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.College[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryVrfStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryVrfStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryVrfStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryVrfStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryVrfStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryVrfStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQueryVrfStudent2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryVrfStudent2Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryVrfStudent2Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryVrfStudent2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryVrfStudent2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryVrfStudent2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCollegeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCollegeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.College.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCollegeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCollegeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.College) > 0 {
		for _, e := range m.College {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueryVrfStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueryVrfStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQueryVrfStudent2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryQueryVrfStudent2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCollegeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCollegeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCollegeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCollegeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCollegeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCollegeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.College.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollegeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollegeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollegeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollegeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollegeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollegeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field College", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.College = append(m.College, College{})
			if err := m.College[len(m.College)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryVrfStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryVrfStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryVrfStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryVrfStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryVrfStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryVrfStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryVrfStudent2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryVrfStudent2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryVrfStudent2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryVrfStudent2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryVrfStudent2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryVrfStudent2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
