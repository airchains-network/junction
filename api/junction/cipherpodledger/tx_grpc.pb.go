// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: junction/cipherpodledger/tx.proto

package cipherpodledger

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName   = "/junction.cipherpodledger.Msg/UpdateParams"
	Msg_RegisterFhvm_FullMethodName   = "/junction.cipherpodledger.Msg/RegisterFhvm"
	Msg_SubmitPod_FullMethodName      = "/junction.cipherpodledger.Msg/SubmitPod"
	Msg_VerifyPod_FullMethodName      = "/junction.cipherpodledger.Msg/VerifyPod"
	Msg_LogBlobData_FullMethodName    = "/junction.cipherpodledger.Msg/LogBlobData"
	Msg_IntegrityCheck_FullMethodName = "/junction.cipherpodledger.Msg/IntegrityCheck"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RegisterFhvm(ctx context.Context, in *MsgRegisterFhvm, opts ...grpc.CallOption) (*MsgRegisterFhvmResponse, error)
	SubmitPod(ctx context.Context, in *MsgSubmitPod, opts ...grpc.CallOption) (*MsgSubmitPodResponse, error)
	VerifyPod(ctx context.Context, in *MsgVerifyPod, opts ...grpc.CallOption) (*MsgVerifyPodResponse, error)
	LogBlobData(ctx context.Context, in *MsgLogBlobData, opts ...grpc.CallOption) (*MsgLogBlobDataResponse, error)
	IntegrityCheck(ctx context.Context, in *MsgIntegrityCheck, opts ...grpc.CallOption) (*MsgIntegrityCheckResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterFhvm(ctx context.Context, in *MsgRegisterFhvm, opts ...grpc.CallOption) (*MsgRegisterFhvmResponse, error) {
	out := new(MsgRegisterFhvmResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterFhvm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPod(ctx context.Context, in *MsgSubmitPod, opts ...grpc.CallOption) (*MsgSubmitPodResponse, error) {
	out := new(MsgSubmitPodResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyPod(ctx context.Context, in *MsgVerifyPod, opts ...grpc.CallOption) (*MsgVerifyPodResponse, error) {
	out := new(MsgVerifyPodResponse)
	err := c.cc.Invoke(ctx, Msg_VerifyPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogBlobData(ctx context.Context, in *MsgLogBlobData, opts ...grpc.CallOption) (*MsgLogBlobDataResponse, error) {
	out := new(MsgLogBlobDataResponse)
	err := c.cc.Invoke(ctx, Msg_LogBlobData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IntegrityCheck(ctx context.Context, in *MsgIntegrityCheck, opts ...grpc.CallOption) (*MsgIntegrityCheckResponse, error) {
	out := new(MsgIntegrityCheckResponse)
	err := c.cc.Invoke(ctx, Msg_IntegrityCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RegisterFhvm(context.Context, *MsgRegisterFhvm) (*MsgRegisterFhvmResponse, error)
	SubmitPod(context.Context, *MsgSubmitPod) (*MsgSubmitPodResponse, error)
	VerifyPod(context.Context, *MsgVerifyPod) (*MsgVerifyPodResponse, error)
	LogBlobData(context.Context, *MsgLogBlobData) (*MsgLogBlobDataResponse, error)
	IntegrityCheck(context.Context, *MsgIntegrityCheck) (*MsgIntegrityCheckResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RegisterFhvm(context.Context, *MsgRegisterFhvm) (*MsgRegisterFhvmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFhvm not implemented")
}
func (UnimplementedMsgServer) SubmitPod(context.Context, *MsgSubmitPod) (*MsgSubmitPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPod not implemented")
}
func (UnimplementedMsgServer) VerifyPod(context.Context, *MsgVerifyPod) (*MsgVerifyPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPod not implemented")
}
func (UnimplementedMsgServer) LogBlobData(context.Context, *MsgLogBlobData) (*MsgLogBlobDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogBlobData not implemented")
}
func (UnimplementedMsgServer) IntegrityCheck(context.Context, *MsgIntegrityCheck) (*MsgIntegrityCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrityCheck not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterFhvm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterFhvm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterFhvm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterFhvm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterFhvm(ctx, req.(*MsgRegisterFhvm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPod(ctx, req.(*MsgSubmitPod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyPod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_VerifyPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyPod(ctx, req.(*MsgVerifyPod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogBlobData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogBlobData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogBlobData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LogBlobData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogBlobData(ctx, req.(*MsgLogBlobData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IntegrityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIntegrityCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IntegrityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IntegrityCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IntegrityCheck(ctx, req.(*MsgIntegrityCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "junction.cipherpodledger.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterFhvm",
			Handler:    _Msg_RegisterFhvm_Handler,
		},
		{
			MethodName: "SubmitPod",
			Handler:    _Msg_SubmitPod_Handler,
		},
		{
			MethodName: "VerifyPod",
			Handler:    _Msg_VerifyPod_Handler,
		},
		{
			MethodName: "LogBlobData",
			Handler:    _Msg_LogBlobData_Handler,
		},
		{
			MethodName: "IntegrityCheck",
			Handler:    _Msg_IntegrityCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/cipherpodledger/tx.proto",
}
