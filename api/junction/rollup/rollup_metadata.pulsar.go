// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package rollup

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_RollupMetadata_8_list)(nil)

type _RollupMetadata_8_list struct {
	list *[]string
}

func (x *_RollupMetadata_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RollupMetadata_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_RollupMetadata_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RollupMetadata_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RollupMetadata_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RollupMetadata at list field Keys as it is not of Message kind"))
}

func (x *_RollupMetadata_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RollupMetadata_8_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_RollupMetadata_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_RollupMetadata_9_list)(nil)

type _RollupMetadata_9_list struct {
	list *[]uint64
}

func (x *_RollupMetadata_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RollupMetadata_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_RollupMetadata_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RollupMetadata_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RollupMetadata_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RollupMetadata at list field Supply as it is not of Message kind"))
}

func (x *_RollupMetadata_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RollupMetadata_9_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_RollupMetadata_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RollupMetadata                              protoreflect.MessageDescriptor
	fd_RollupMetadata_createdBy                    protoreflect.FieldDescriptor
	fd_RollupMetadata_rollupId                     protoreflect.FieldDescriptor
	fd_RollupMetadata_rollupLatestBatchNo          protoreflect.FieldDescriptor
	fd_RollupMetadata_rollupLatestFinalizedBatchNo protoreflect.FieldDescriptor
	fd_RollupMetadata_moniker                      protoreflect.FieldDescriptor
	fd_RollupMetadata_chainId                      protoreflect.FieldDescriptor
	fd_RollupMetadata_denomName                    protoreflect.FieldDescriptor
	fd_RollupMetadata_keys                         protoreflect.FieldDescriptor
	fd_RollupMetadata_supply                       protoreflect.FieldDescriptor
	fd_RollupMetadata_daType                       protoreflect.FieldDescriptor
	fd_RollupMetadata_daLatestHash                 protoreflect.FieldDescriptor
	fd_RollupMetadata_proverType                   protoreflect.FieldDescriptor
	fd_RollupMetadata_proverVerificationKey        protoreflect.FieldDescriptor
	fd_RollupMetadata_proverEndpoint               protoreflect.FieldDescriptor
	fd_RollupMetadata_aclContractAddress           protoreflect.FieldDescriptor
	fd_RollupMetadata_kmsVerifierAddress           protoreflect.FieldDescriptor
	fd_RollupMetadata_tfheExecutorAddress          protoreflect.FieldDescriptor
	fd_RollupMetadata_gatewayContractAddress       protoreflect.FieldDescriptor
	fd_RollupMetadata_ascContractAddress           protoreflect.FieldDescriptor
	fd_RollupMetadata_relayerGAddress              protoreflect.FieldDescriptor
	fd_RollupMetadata_relayerASCAddress            protoreflect.FieldDescriptor
)

func init() {
	file_junction_rollup_rollup_metadata_proto_init()
	md_RollupMetadata = File_junction_rollup_rollup_metadata_proto.Messages().ByName("RollupMetadata")
	fd_RollupMetadata_createdBy = md_RollupMetadata.Fields().ByName("createdBy")
	fd_RollupMetadata_rollupId = md_RollupMetadata.Fields().ByName("rollupId")
	fd_RollupMetadata_rollupLatestBatchNo = md_RollupMetadata.Fields().ByName("rollupLatestBatchNo")
	fd_RollupMetadata_rollupLatestFinalizedBatchNo = md_RollupMetadata.Fields().ByName("rollupLatestFinalizedBatchNo")
	fd_RollupMetadata_moniker = md_RollupMetadata.Fields().ByName("moniker")
	fd_RollupMetadata_chainId = md_RollupMetadata.Fields().ByName("chainId")
	fd_RollupMetadata_denomName = md_RollupMetadata.Fields().ByName("denomName")
	fd_RollupMetadata_keys = md_RollupMetadata.Fields().ByName("keys")
	fd_RollupMetadata_supply = md_RollupMetadata.Fields().ByName("supply")
	fd_RollupMetadata_daType = md_RollupMetadata.Fields().ByName("daType")
	fd_RollupMetadata_daLatestHash = md_RollupMetadata.Fields().ByName("daLatestHash")
	fd_RollupMetadata_proverType = md_RollupMetadata.Fields().ByName("proverType")
	fd_RollupMetadata_proverVerificationKey = md_RollupMetadata.Fields().ByName("proverVerificationKey")
	fd_RollupMetadata_proverEndpoint = md_RollupMetadata.Fields().ByName("proverEndpoint")
	fd_RollupMetadata_aclContractAddress = md_RollupMetadata.Fields().ByName("aclContractAddress")
	fd_RollupMetadata_kmsVerifierAddress = md_RollupMetadata.Fields().ByName("kmsVerifierAddress")
	fd_RollupMetadata_tfheExecutorAddress = md_RollupMetadata.Fields().ByName("tfheExecutorAddress")
	fd_RollupMetadata_gatewayContractAddress = md_RollupMetadata.Fields().ByName("gatewayContractAddress")
	fd_RollupMetadata_ascContractAddress = md_RollupMetadata.Fields().ByName("ascContractAddress")
	fd_RollupMetadata_relayerGAddress = md_RollupMetadata.Fields().ByName("relayerGAddress")
	fd_RollupMetadata_relayerASCAddress = md_RollupMetadata.Fields().ByName("relayerASCAddress")
}

var _ protoreflect.Message = (*fastReflection_RollupMetadata)(nil)

type fastReflection_RollupMetadata RollupMetadata

func (x *RollupMetadata) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RollupMetadata)(x)
}

func (x *RollupMetadata) slowProtoReflect() protoreflect.Message {
	mi := &file_junction_rollup_rollup_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RollupMetadata_messageType fastReflection_RollupMetadata_messageType
var _ protoreflect.MessageType = fastReflection_RollupMetadata_messageType{}

type fastReflection_RollupMetadata_messageType struct{}

func (x fastReflection_RollupMetadata_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RollupMetadata)(nil)
}
func (x fastReflection_RollupMetadata_messageType) New() protoreflect.Message {
	return new(fastReflection_RollupMetadata)
}
func (x fastReflection_RollupMetadata_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RollupMetadata
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RollupMetadata) Descriptor() protoreflect.MessageDescriptor {
	return md_RollupMetadata
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RollupMetadata) Type() protoreflect.MessageType {
	return _fastReflection_RollupMetadata_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RollupMetadata) New() protoreflect.Message {
	return new(fastReflection_RollupMetadata)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RollupMetadata) Interface() protoreflect.ProtoMessage {
	return (*RollupMetadata)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RollupMetadata) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.CreatedBy != "" {
		value := protoreflect.ValueOfString(x.CreatedBy)
		if !f(fd_RollupMetadata_createdBy, value) {
			return
		}
	}
	if x.RollupId != "" {
		value := protoreflect.ValueOfString(x.RollupId)
		if !f(fd_RollupMetadata_rollupId, value) {
			return
		}
	}
	if x.RollupLatestBatchNo != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RollupLatestBatchNo)
		if !f(fd_RollupMetadata_rollupLatestBatchNo, value) {
			return
		}
	}
	if x.RollupLatestFinalizedBatchNo != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RollupLatestFinalizedBatchNo)
		if !f(fd_RollupMetadata_rollupLatestFinalizedBatchNo, value) {
			return
		}
	}
	if x.Moniker != "" {
		value := protoreflect.ValueOfString(x.Moniker)
		if !f(fd_RollupMetadata_moniker, value) {
			return
		}
	}
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_RollupMetadata_chainId, value) {
			return
		}
	}
	if x.DenomName != "" {
		value := protoreflect.ValueOfString(x.DenomName)
		if !f(fd_RollupMetadata_denomName, value) {
			return
		}
	}
	if len(x.Keys) != 0 {
		value := protoreflect.ValueOfList(&_RollupMetadata_8_list{list: &x.Keys})
		if !f(fd_RollupMetadata_keys, value) {
			return
		}
	}
	if len(x.Supply) != 0 {
		value := protoreflect.ValueOfList(&_RollupMetadata_9_list{list: &x.Supply})
		if !f(fd_RollupMetadata_supply, value) {
			return
		}
	}
	if x.DaType != "" {
		value := protoreflect.ValueOfString(x.DaType)
		if !f(fd_RollupMetadata_daType, value) {
			return
		}
	}
	if x.DaLatestHash != "" {
		value := protoreflect.ValueOfString(x.DaLatestHash)
		if !f(fd_RollupMetadata_daLatestHash, value) {
			return
		}
	}
	if x.ProverType != "" {
		value := protoreflect.ValueOfString(x.ProverType)
		if !f(fd_RollupMetadata_proverType, value) {
			return
		}
	}
	if len(x.ProverVerificationKey) != 0 {
		value := protoreflect.ValueOfBytes(x.ProverVerificationKey)
		if !f(fd_RollupMetadata_proverVerificationKey, value) {
			return
		}
	}
	if x.ProverEndpoint != "" {
		value := protoreflect.ValueOfString(x.ProverEndpoint)
		if !f(fd_RollupMetadata_proverEndpoint, value) {
			return
		}
	}
	if x.AclContractAddress != "" {
		value := protoreflect.ValueOfString(x.AclContractAddress)
		if !f(fd_RollupMetadata_aclContractAddress, value) {
			return
		}
	}
	if x.KmsVerifierAddress != "" {
		value := protoreflect.ValueOfString(x.KmsVerifierAddress)
		if !f(fd_RollupMetadata_kmsVerifierAddress, value) {
			return
		}
	}
	if x.TfheExecutorAddress != "" {
		value := protoreflect.ValueOfString(x.TfheExecutorAddress)
		if !f(fd_RollupMetadata_tfheExecutorAddress, value) {
			return
		}
	}
	if x.GatewayContractAddress != "" {
		value := protoreflect.ValueOfString(x.GatewayContractAddress)
		if !f(fd_RollupMetadata_gatewayContractAddress, value) {
			return
		}
	}
	if x.AscContractAddress != "" {
		value := protoreflect.ValueOfString(x.AscContractAddress)
		if !f(fd_RollupMetadata_ascContractAddress, value) {
			return
		}
	}
	if x.RelayerGAddress != "" {
		value := protoreflect.ValueOfString(x.RelayerGAddress)
		if !f(fd_RollupMetadata_relayerGAddress, value) {
			return
		}
	}
	if x.RelayerASCAddress != "" {
		value := protoreflect.ValueOfString(x.RelayerASCAddress)
		if !f(fd_RollupMetadata_relayerASCAddress, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RollupMetadata) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "junction.rollup.RollupMetadata.createdBy":
		return x.CreatedBy != ""
	case "junction.rollup.RollupMetadata.rollupId":
		return x.RollupId != ""
	case "junction.rollup.RollupMetadata.rollupLatestBatchNo":
		return x.RollupLatestBatchNo != uint64(0)
	case "junction.rollup.RollupMetadata.rollupLatestFinalizedBatchNo":
		return x.RollupLatestFinalizedBatchNo != uint64(0)
	case "junction.rollup.RollupMetadata.moniker":
		return x.Moniker != ""
	case "junction.rollup.RollupMetadata.chainId":
		return x.ChainId != ""
	case "junction.rollup.RollupMetadata.denomName":
		return x.DenomName != ""
	case "junction.rollup.RollupMetadata.keys":
		return len(x.Keys) != 0
	case "junction.rollup.RollupMetadata.supply":
		return len(x.Supply) != 0
	case "junction.rollup.RollupMetadata.daType":
		return x.DaType != ""
	case "junction.rollup.RollupMetadata.daLatestHash":
		return x.DaLatestHash != ""
	case "junction.rollup.RollupMetadata.proverType":
		return x.ProverType != ""
	case "junction.rollup.RollupMetadata.proverVerificationKey":
		return len(x.ProverVerificationKey) != 0
	case "junction.rollup.RollupMetadata.proverEndpoint":
		return x.ProverEndpoint != ""
	case "junction.rollup.RollupMetadata.aclContractAddress":
		return x.AclContractAddress != ""
	case "junction.rollup.RollupMetadata.kmsVerifierAddress":
		return x.KmsVerifierAddress != ""
	case "junction.rollup.RollupMetadata.tfheExecutorAddress":
		return x.TfheExecutorAddress != ""
	case "junction.rollup.RollupMetadata.gatewayContractAddress":
		return x.GatewayContractAddress != ""
	case "junction.rollup.RollupMetadata.ascContractAddress":
		return x.AscContractAddress != ""
	case "junction.rollup.RollupMetadata.relayerGAddress":
		return x.RelayerGAddress != ""
	case "junction.rollup.RollupMetadata.relayerASCAddress":
		return x.RelayerASCAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: junction.rollup.RollupMetadata"))
		}
		panic(fmt.Errorf("message junction.rollup.RollupMetadata does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RollupMetadata) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "junction.rollup.RollupMetadata.createdBy":
		x.CreatedBy = ""
	case "junction.rollup.RollupMetadata.rollupId":
		x.RollupId = ""
	case "junction.rollup.RollupMetadata.rollupLatestBatchNo":
		x.RollupLatestBatchNo = uint64(0)
	case "junction.rollup.RollupMetadata.rollupLatestFinalizedBatchNo":
		x.RollupLatestFinalizedBatchNo = uint64(0)
	case "junction.rollup.RollupMetadata.moniker":
		x.Moniker = ""
	case "junction.rollup.RollupMetadata.chainId":
		x.ChainId = ""
	case "junction.rollup.RollupMetadata.denomName":
		x.DenomName = ""
	case "junction.rollup.RollupMetadata.keys":
		x.Keys = nil
	case "junction.rollup.RollupMetadata.supply":
		x.Supply = nil
	case "junction.rollup.RollupMetadata.daType":
		x.DaType = ""
	case "junction.rollup.RollupMetadata.daLatestHash":
		x.DaLatestHash = ""
	case "junction.rollup.RollupMetadata.proverType":
		x.ProverType = ""
	case "junction.rollup.RollupMetadata.proverVerificationKey":
		x.ProverVerificationKey = nil
	case "junction.rollup.RollupMetadata.proverEndpoint":
		x.ProverEndpoint = ""
	case "junction.rollup.RollupMetadata.aclContractAddress":
		x.AclContractAddress = ""
	case "junction.rollup.RollupMetadata.kmsVerifierAddress":
		x.KmsVerifierAddress = ""
	case "junction.rollup.RollupMetadata.tfheExecutorAddress":
		x.TfheExecutorAddress = ""
	case "junction.rollup.RollupMetadata.gatewayContractAddress":
		x.GatewayContractAddress = ""
	case "junction.rollup.RollupMetadata.ascContractAddress":
		x.AscContractAddress = ""
	case "junction.rollup.RollupMetadata.relayerGAddress":
		x.RelayerGAddress = ""
	case "junction.rollup.RollupMetadata.relayerASCAddress":
		x.RelayerASCAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: junction.rollup.RollupMetadata"))
		}
		panic(fmt.Errorf("message junction.rollup.RollupMetadata does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RollupMetadata) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "junction.rollup.RollupMetadata.createdBy":
		value := x.CreatedBy
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.rollupId":
		value := x.RollupId
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.rollupLatestBatchNo":
		value := x.RollupLatestBatchNo
		return protoreflect.ValueOfUint64(value)
	case "junction.rollup.RollupMetadata.rollupLatestFinalizedBatchNo":
		value := x.RollupLatestFinalizedBatchNo
		return protoreflect.ValueOfUint64(value)
	case "junction.rollup.RollupMetadata.moniker":
		value := x.Moniker
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.chainId":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.denomName":
		value := x.DenomName
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.keys":
		if len(x.Keys) == 0 {
			return protoreflect.ValueOfList(&_RollupMetadata_8_list{})
		}
		listValue := &_RollupMetadata_8_list{list: &x.Keys}
		return protoreflect.ValueOfList(listValue)
	case "junction.rollup.RollupMetadata.supply":
		if len(x.Supply) == 0 {
			return protoreflect.ValueOfList(&_RollupMetadata_9_list{})
		}
		listValue := &_RollupMetadata_9_list{list: &x.Supply}
		return protoreflect.ValueOfList(listValue)
	case "junction.rollup.RollupMetadata.daType":
		value := x.DaType
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.daLatestHash":
		value := x.DaLatestHash
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.proverType":
		value := x.ProverType
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.proverVerificationKey":
		value := x.ProverVerificationKey
		return protoreflect.ValueOfBytes(value)
	case "junction.rollup.RollupMetadata.proverEndpoint":
		value := x.ProverEndpoint
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.aclContractAddress":
		value := x.AclContractAddress
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.kmsVerifierAddress":
		value := x.KmsVerifierAddress
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.tfheExecutorAddress":
		value := x.TfheExecutorAddress
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.gatewayContractAddress":
		value := x.GatewayContractAddress
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.ascContractAddress":
		value := x.AscContractAddress
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.relayerGAddress":
		value := x.RelayerGAddress
		return protoreflect.ValueOfString(value)
	case "junction.rollup.RollupMetadata.relayerASCAddress":
		value := x.RelayerASCAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: junction.rollup.RollupMetadata"))
		}
		panic(fmt.Errorf("message junction.rollup.RollupMetadata does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RollupMetadata) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "junction.rollup.RollupMetadata.createdBy":
		x.CreatedBy = value.Interface().(string)
	case "junction.rollup.RollupMetadata.rollupId":
		x.RollupId = value.Interface().(string)
	case "junction.rollup.RollupMetadata.rollupLatestBatchNo":
		x.RollupLatestBatchNo = value.Uint()
	case "junction.rollup.RollupMetadata.rollupLatestFinalizedBatchNo":
		x.RollupLatestFinalizedBatchNo = value.Uint()
	case "junction.rollup.RollupMetadata.moniker":
		x.Moniker = value.Interface().(string)
	case "junction.rollup.RollupMetadata.chainId":
		x.ChainId = value.Interface().(string)
	case "junction.rollup.RollupMetadata.denomName":
		x.DenomName = value.Interface().(string)
	case "junction.rollup.RollupMetadata.keys":
		lv := value.List()
		clv := lv.(*_RollupMetadata_8_list)
		x.Keys = *clv.list
	case "junction.rollup.RollupMetadata.supply":
		lv := value.List()
		clv := lv.(*_RollupMetadata_9_list)
		x.Supply = *clv.list
	case "junction.rollup.RollupMetadata.daType":
		x.DaType = value.Interface().(string)
	case "junction.rollup.RollupMetadata.daLatestHash":
		x.DaLatestHash = value.Interface().(string)
	case "junction.rollup.RollupMetadata.proverType":
		x.ProverType = value.Interface().(string)
	case "junction.rollup.RollupMetadata.proverVerificationKey":
		x.ProverVerificationKey = value.Bytes()
	case "junction.rollup.RollupMetadata.proverEndpoint":
		x.ProverEndpoint = value.Interface().(string)
	case "junction.rollup.RollupMetadata.aclContractAddress":
		x.AclContractAddress = value.Interface().(string)
	case "junction.rollup.RollupMetadata.kmsVerifierAddress":
		x.KmsVerifierAddress = value.Interface().(string)
	case "junction.rollup.RollupMetadata.tfheExecutorAddress":
		x.TfheExecutorAddress = value.Interface().(string)
	case "junction.rollup.RollupMetadata.gatewayContractAddress":
		x.GatewayContractAddress = value.Interface().(string)
	case "junction.rollup.RollupMetadata.ascContractAddress":
		x.AscContractAddress = value.Interface().(string)
	case "junction.rollup.RollupMetadata.relayerGAddress":
		x.RelayerGAddress = value.Interface().(string)
	case "junction.rollup.RollupMetadata.relayerASCAddress":
		x.RelayerASCAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: junction.rollup.RollupMetadata"))
		}
		panic(fmt.Errorf("message junction.rollup.RollupMetadata does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RollupMetadata) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "junction.rollup.RollupMetadata.keys":
		if x.Keys == nil {
			x.Keys = []string{}
		}
		value := &_RollupMetadata_8_list{list: &x.Keys}
		return protoreflect.ValueOfList(value)
	case "junction.rollup.RollupMetadata.supply":
		if x.Supply == nil {
			x.Supply = []uint64{}
		}
		value := &_RollupMetadata_9_list{list: &x.Supply}
		return protoreflect.ValueOfList(value)
	case "junction.rollup.RollupMetadata.createdBy":
		panic(fmt.Errorf("field createdBy of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.rollupId":
		panic(fmt.Errorf("field rollupId of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.rollupLatestBatchNo":
		panic(fmt.Errorf("field rollupLatestBatchNo of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.rollupLatestFinalizedBatchNo":
		panic(fmt.Errorf("field rollupLatestFinalizedBatchNo of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.moniker":
		panic(fmt.Errorf("field moniker of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.chainId":
		panic(fmt.Errorf("field chainId of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.denomName":
		panic(fmt.Errorf("field denomName of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.daType":
		panic(fmt.Errorf("field daType of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.daLatestHash":
		panic(fmt.Errorf("field daLatestHash of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.proverType":
		panic(fmt.Errorf("field proverType of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.proverVerificationKey":
		panic(fmt.Errorf("field proverVerificationKey of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.proverEndpoint":
		panic(fmt.Errorf("field proverEndpoint of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.aclContractAddress":
		panic(fmt.Errorf("field aclContractAddress of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.kmsVerifierAddress":
		panic(fmt.Errorf("field kmsVerifierAddress of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.tfheExecutorAddress":
		panic(fmt.Errorf("field tfheExecutorAddress of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.gatewayContractAddress":
		panic(fmt.Errorf("field gatewayContractAddress of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.ascContractAddress":
		panic(fmt.Errorf("field ascContractAddress of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.relayerGAddress":
		panic(fmt.Errorf("field relayerGAddress of message junction.rollup.RollupMetadata is not mutable"))
	case "junction.rollup.RollupMetadata.relayerASCAddress":
		panic(fmt.Errorf("field relayerASCAddress of message junction.rollup.RollupMetadata is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: junction.rollup.RollupMetadata"))
		}
		panic(fmt.Errorf("message junction.rollup.RollupMetadata does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RollupMetadata) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "junction.rollup.RollupMetadata.createdBy":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.rollupId":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.rollupLatestBatchNo":
		return protoreflect.ValueOfUint64(uint64(0))
	case "junction.rollup.RollupMetadata.rollupLatestFinalizedBatchNo":
		return protoreflect.ValueOfUint64(uint64(0))
	case "junction.rollup.RollupMetadata.moniker":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.chainId":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.denomName":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.keys":
		list := []string{}
		return protoreflect.ValueOfList(&_RollupMetadata_8_list{list: &list})
	case "junction.rollup.RollupMetadata.supply":
		list := []uint64{}
		return protoreflect.ValueOfList(&_RollupMetadata_9_list{list: &list})
	case "junction.rollup.RollupMetadata.daType":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.daLatestHash":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.proverType":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.proverVerificationKey":
		return protoreflect.ValueOfBytes(nil)
	case "junction.rollup.RollupMetadata.proverEndpoint":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.aclContractAddress":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.kmsVerifierAddress":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.tfheExecutorAddress":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.gatewayContractAddress":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.ascContractAddress":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.relayerGAddress":
		return protoreflect.ValueOfString("")
	case "junction.rollup.RollupMetadata.relayerASCAddress":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: junction.rollup.RollupMetadata"))
		}
		panic(fmt.Errorf("message junction.rollup.RollupMetadata does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RollupMetadata) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in junction.rollup.RollupMetadata", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RollupMetadata) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RollupMetadata) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RollupMetadata) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RollupMetadata) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RollupMetadata)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.CreatedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RollupId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RollupLatestBatchNo != 0 {
			n += 1 + runtime.Sov(uint64(x.RollupLatestBatchNo))
		}
		if x.RollupLatestFinalizedBatchNo != 0 {
			n += 1 + runtime.Sov(uint64(x.RollupLatestFinalizedBatchNo))
		}
		l = len(x.Moniker)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DenomName)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Keys) > 0 {
			for _, s := range x.Keys {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Supply) > 0 {
			l = 0
			for _, e := range x.Supply {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.DaType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DaLatestHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProverType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProverVerificationKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProverEndpoint)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AclContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.KmsVerifierAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TfheExecutorAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GatewayContractAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AscContractAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RelayerGAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RelayerASCAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RollupMetadata)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RelayerASCAddress) > 0 {
			i -= len(x.RelayerASCAddress)
			copy(dAtA[i:], x.RelayerASCAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RelayerASCAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if len(x.RelayerGAddress) > 0 {
			i -= len(x.RelayerGAddress)
			copy(dAtA[i:], x.RelayerGAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RelayerGAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
		if len(x.AscContractAddress) > 0 {
			i -= len(x.AscContractAddress)
			copy(dAtA[i:], x.AscContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AscContractAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if len(x.GatewayContractAddress) > 0 {
			i -= len(x.GatewayContractAddress)
			copy(dAtA[i:], x.GatewayContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GatewayContractAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if len(x.TfheExecutorAddress) > 0 {
			i -= len(x.TfheExecutorAddress)
			copy(dAtA[i:], x.TfheExecutorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TfheExecutorAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.KmsVerifierAddress) > 0 {
			i -= len(x.KmsVerifierAddress)
			copy(dAtA[i:], x.KmsVerifierAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KmsVerifierAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.AclContractAddress) > 0 {
			i -= len(x.AclContractAddress)
			copy(dAtA[i:], x.AclContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AclContractAddress)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.ProverEndpoint) > 0 {
			i -= len(x.ProverEndpoint)
			copy(dAtA[i:], x.ProverEndpoint)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProverEndpoint)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.ProverVerificationKey) > 0 {
			i -= len(x.ProverVerificationKey)
			copy(dAtA[i:], x.ProverVerificationKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProverVerificationKey)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.ProverType) > 0 {
			i -= len(x.ProverType)
			copy(dAtA[i:], x.ProverType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProverType)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.DaLatestHash) > 0 {
			i -= len(x.DaLatestHash)
			copy(dAtA[i:], x.DaLatestHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DaLatestHash)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.DaType) > 0 {
			i -= len(x.DaType)
			copy(dAtA[i:], x.DaType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DaType)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Supply) > 0 {
			var pksize2 int
			for _, num := range x.Supply {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.Supply {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Keys) > 0 {
			for iNdEx := len(x.Keys) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Keys[iNdEx])
				copy(dAtA[i:], x.Keys[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Keys[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.DenomName) > 0 {
			i -= len(x.DenomName)
			copy(dAtA[i:], x.DenomName)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DenomName)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Moniker) > 0 {
			i -= len(x.Moniker)
			copy(dAtA[i:], x.Moniker)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Moniker)))
			i--
			dAtA[i] = 0x2a
		}
		if x.RollupLatestFinalizedBatchNo != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RollupLatestFinalizedBatchNo))
			i--
			dAtA[i] = 0x20
		}
		if x.RollupLatestBatchNo != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RollupLatestBatchNo))
			i--
			dAtA[i] = 0x18
		}
		if len(x.RollupId) > 0 {
			i -= len(x.RollupId)
			copy(dAtA[i:], x.RollupId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RollupId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.CreatedBy) > 0 {
			i -= len(x.CreatedBy)
			copy(dAtA[i:], x.CreatedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreatedBy)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RollupMetadata)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RollupMetadata: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RollupMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreatedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RollupId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RollupId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RollupLatestBatchNo", wireType)
				}
				x.RollupLatestBatchNo = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RollupLatestBatchNo |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RollupLatestFinalizedBatchNo", wireType)
				}
				x.RollupLatestFinalizedBatchNo = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RollupLatestFinalizedBatchNo |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Moniker = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DenomName", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DenomName = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Keys = append(x.Keys, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 9:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Supply = append(x.Supply, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Supply) == 0 {
						x.Supply = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Supply = append(x.Supply, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DaType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DaType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DaLatestHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DaLatestHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProverType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProverType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProverVerificationKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProverVerificationKey = append(x.ProverVerificationKey[:0], dAtA[iNdEx:postIndex]...)
				if x.ProverVerificationKey == nil {
					x.ProverVerificationKey = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProverEndpoint", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProverEndpoint = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AclContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AclContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KmsVerifierAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KmsVerifierAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TfheExecutorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TfheExecutorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GatewayContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GatewayContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AscContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AscContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RelayerGAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RelayerGAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 21:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RelayerASCAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RelayerASCAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: junction/rollup/rollup_metadata.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RollupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedBy                    string `protobuf:"bytes,1,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	RollupId                     string `protobuf:"bytes,2,opt,name=rollupId,proto3" json:"rollupId,omitempty"`
	RollupLatestBatchNo          uint64 `protobuf:"varint,3,opt,name=rollupLatestBatchNo,proto3" json:"rollupLatestBatchNo,omitempty"`
	RollupLatestFinalizedBatchNo uint64 `protobuf:"varint,4,opt,name=rollupLatestFinalizedBatchNo,proto3" json:"rollupLatestFinalizedBatchNo,omitempty"`
	// rollup genesis data
	Moniker   string   `protobuf:"bytes,5,opt,name=moniker,proto3" json:"moniker,omitempty"`
	ChainId   string   `protobuf:"bytes,6,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DenomName string   `protobuf:"bytes,7,opt,name=denomName,proto3" json:"denomName,omitempty"`
	Keys      []string `protobuf:"bytes,8,rep,name=keys,proto3" json:"keys,omitempty"`
	Supply    []uint64 `protobuf:"varint,9,rep,packed,name=supply,proto3" json:"supply,omitempty"`
	// da data for a rollup
	DaType       string `protobuf:"bytes,10,opt,name=daType,proto3" json:"daType,omitempty"`
	DaLatestHash string `protobuf:"bytes,11,opt,name=daLatestHash,proto3" json:"daLatestHash,omitempty"`
	// prover data for a rollup
	ProverType            string `protobuf:"bytes,12,opt,name=proverType,proto3" json:"proverType,omitempty"`
	ProverVerificationKey []byte `protobuf:"bytes,13,opt,name=proverVerificationKey,proto3" json:"proverVerificationKey,omitempty"`
	ProverEndpoint        string `protobuf:"bytes,14,opt,name=proverEndpoint,proto3" json:"proverEndpoint,omitempty"`
	// FHE data for a rollup
	AclContractAddress     string `protobuf:"bytes,15,opt,name=aclContractAddress,proto3" json:"aclContractAddress,omitempty"`
	KmsVerifierAddress     string `protobuf:"bytes,16,opt,name=kmsVerifierAddress,proto3" json:"kmsVerifierAddress,omitempty"`
	TfheExecutorAddress    string `protobuf:"bytes,17,opt,name=tfheExecutorAddress,proto3" json:"tfheExecutorAddress,omitempty"`
	GatewayContractAddress string `protobuf:"bytes,18,opt,name=gatewayContractAddress,proto3" json:"gatewayContractAddress,omitempty"`
	// junction wasm contract address
	AscContractAddress string `protobuf:"bytes,19,opt,name=ascContractAddress,proto3" json:"ascContractAddress,omitempty"`
	// relayer data
	RelayerGAddress   string `protobuf:"bytes,20,opt,name=relayerGAddress,proto3" json:"relayerGAddress,omitempty"`
	RelayerASCAddress string `protobuf:"bytes,21,opt,name=relayerASCAddress,proto3" json:"relayerASCAddress,omitempty"`
}

func (x *RollupMetadata) Reset() {
	*x = RollupMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_junction_rollup_rollup_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupMetadata) ProtoMessage() {}

// Deprecated: Use RollupMetadata.ProtoReflect.Descriptor instead.
func (*RollupMetadata) Descriptor() ([]byte, []int) {
	return file_junction_rollup_rollup_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *RollupMetadata) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *RollupMetadata) GetRollupId() string {
	if x != nil {
		return x.RollupId
	}
	return ""
}

func (x *RollupMetadata) GetRollupLatestBatchNo() uint64 {
	if x != nil {
		return x.RollupLatestBatchNo
	}
	return 0
}

func (x *RollupMetadata) GetRollupLatestFinalizedBatchNo() uint64 {
	if x != nil {
		return x.RollupLatestFinalizedBatchNo
	}
	return 0
}

func (x *RollupMetadata) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *RollupMetadata) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *RollupMetadata) GetDenomName() string {
	if x != nil {
		return x.DenomName
	}
	return ""
}

func (x *RollupMetadata) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RollupMetadata) GetSupply() []uint64 {
	if x != nil {
		return x.Supply
	}
	return nil
}

func (x *RollupMetadata) GetDaType() string {
	if x != nil {
		return x.DaType
	}
	return ""
}

func (x *RollupMetadata) GetDaLatestHash() string {
	if x != nil {
		return x.DaLatestHash
	}
	return ""
}

func (x *RollupMetadata) GetProverType() string {
	if x != nil {
		return x.ProverType
	}
	return ""
}

func (x *RollupMetadata) GetProverVerificationKey() []byte {
	if x != nil {
		return x.ProverVerificationKey
	}
	return nil
}

func (x *RollupMetadata) GetProverEndpoint() string {
	if x != nil {
		return x.ProverEndpoint
	}
	return ""
}

func (x *RollupMetadata) GetAclContractAddress() string {
	if x != nil {
		return x.AclContractAddress
	}
	return ""
}

func (x *RollupMetadata) GetKmsVerifierAddress() string {
	if x != nil {
		return x.KmsVerifierAddress
	}
	return ""
}

func (x *RollupMetadata) GetTfheExecutorAddress() string {
	if x != nil {
		return x.TfheExecutorAddress
	}
	return ""
}

func (x *RollupMetadata) GetGatewayContractAddress() string {
	if x != nil {
		return x.GatewayContractAddress
	}
	return ""
}

func (x *RollupMetadata) GetAscContractAddress() string {
	if x != nil {
		return x.AscContractAddress
	}
	return ""
}

func (x *RollupMetadata) GetRelayerGAddress() string {
	if x != nil {
		return x.RelayerGAddress
	}
	return ""
}

func (x *RollupMetadata) GetRelayerASCAddress() string {
	if x != nil {
		return x.RelayerASCAddress
	}
	return ""
}

var File_junction_rollup_rollup_metadata_proto protoreflect.FileDescriptor

var file_junction_rollup_rollup_metadata_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x22, 0xca, 0x06, 0x0a, 0x0e, 0x52, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x72,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x63, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6b, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6b, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x66, 0x68, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x66, 0x68, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x61, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x53, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x53, 0x43, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0xc2, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x42, 0x13, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x69, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0xa2,
	0x02, 0x03, 0x4a, 0x52, 0x58, 0xaa, 0x02, 0x0f, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0xca, 0x02, 0x0f, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0xe2, 0x02, 0x1b, 0x4a, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x3a, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_junction_rollup_rollup_metadata_proto_rawDescOnce sync.Once
	file_junction_rollup_rollup_metadata_proto_rawDescData = file_junction_rollup_rollup_metadata_proto_rawDesc
)

func file_junction_rollup_rollup_metadata_proto_rawDescGZIP() []byte {
	file_junction_rollup_rollup_metadata_proto_rawDescOnce.Do(func() {
		file_junction_rollup_rollup_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_junction_rollup_rollup_metadata_proto_rawDescData)
	})
	return file_junction_rollup_rollup_metadata_proto_rawDescData
}

var file_junction_rollup_rollup_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_junction_rollup_rollup_metadata_proto_goTypes = []interface{}{
	(*RollupMetadata)(nil), // 0: junction.rollup.RollupMetadata
}
var file_junction_rollup_rollup_metadata_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_junction_rollup_rollup_metadata_proto_init() }
func file_junction_rollup_rollup_metadata_proto_init() {
	if File_junction_rollup_rollup_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_junction_rollup_rollup_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollupMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_junction_rollup_rollup_metadata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_junction_rollup_rollup_metadata_proto_goTypes,
		DependencyIndexes: file_junction_rollup_rollup_metadata_proto_depIdxs,
		MessageInfos:      file_junction_rollup_rollup_metadata_proto_msgTypes,
	}.Build()
	File_junction_rollup_rollup_metadata_proto = out.File
	file_junction_rollup_rollup_metadata_proto_rawDesc = nil
	file_junction_rollup_rollup_metadata_proto_goTypes = nil
	file_junction_rollup_rollup_metadata_proto_depIdxs = nil
}
