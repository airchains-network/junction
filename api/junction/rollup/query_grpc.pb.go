// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: junction/rollup/query.proto

package rollup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                   = "/junction.rollup.Query/Params"
	Query_CheckMonikerAvailability_FullMethodName = "/junction.rollup.Query/CheckMonikerAvailability"
	Query_GetRollupInfo_FullMethodName            = "/junction.rollup.Query/GetRollupInfo"
	Query_GetRollups_FullMethodName               = "/junction.rollup.Query/GetRollups"
	Query_GetRollupByMoniker_FullMethodName       = "/junction.rollup.Query/GetRollupByMoniker"
	Query_GetBatchInfo_FullMethodName             = "/junction.rollup.Query/GetBatchInfo"
	Query_GetAllBatches_FullMethodName            = "/junction.rollup.Query/GetAllBatches"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of CheckMonikerAvailability items.
	CheckMonikerAvailability(ctx context.Context, in *QueryCheckMonikerAvailabilityRequest, opts ...grpc.CallOption) (*QueryCheckMonikerAvailabilityResponse, error)
	// Queries a list of GetRollupInfo items.
	GetRollupInfo(ctx context.Context, in *QueryGetRollupInfoRequest, opts ...grpc.CallOption) (*QueryGetRollupInfoResponse, error)
	// Queries a list of GetRollups items.
	GetRollups(ctx context.Context, in *QueryGetRollupsRequest, opts ...grpc.CallOption) (*QueryGetRollupsResponse, error)
	// Queries a list of GetRollupByMoniker items.
	GetRollupByMoniker(ctx context.Context, in *QueryGetRollupByMonikerRequest, opts ...grpc.CallOption) (*QueryGetRollupByMonikerResponse, error)
	// Queries a list of GetBatchInfo items.
	GetBatchInfo(ctx context.Context, in *QueryGetBatchInfoRequest, opts ...grpc.CallOption) (*QueryGetBatchInfoResponse, error)
	// Queries a list of GetAllBatches items.
	GetAllBatches(ctx context.Context, in *QueryGetAllBatchesRequest, opts ...grpc.CallOption) (*QueryGetAllBatchesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckMonikerAvailability(ctx context.Context, in *QueryCheckMonikerAvailabilityRequest, opts ...grpc.CallOption) (*QueryCheckMonikerAvailabilityResponse, error) {
	out := new(QueryCheckMonikerAvailabilityResponse)
	err := c.cc.Invoke(ctx, Query_CheckMonikerAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollupInfo(ctx context.Context, in *QueryGetRollupInfoRequest, opts ...grpc.CallOption) (*QueryGetRollupInfoResponse, error) {
	out := new(QueryGetRollupInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetRollupInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollups(ctx context.Context, in *QueryGetRollupsRequest, opts ...grpc.CallOption) (*QueryGetRollupsResponse, error) {
	out := new(QueryGetRollupsResponse)
	err := c.cc.Invoke(ctx, Query_GetRollups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRollupByMoniker(ctx context.Context, in *QueryGetRollupByMonikerRequest, opts ...grpc.CallOption) (*QueryGetRollupByMonikerResponse, error) {
	out := new(QueryGetRollupByMonikerResponse)
	err := c.cc.Invoke(ctx, Query_GetRollupByMoniker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBatchInfo(ctx context.Context, in *QueryGetBatchInfoRequest, opts ...grpc.CallOption) (*QueryGetBatchInfoResponse, error) {
	out := new(QueryGetBatchInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetBatchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllBatches(ctx context.Context, in *QueryGetAllBatchesRequest, opts ...grpc.CallOption) (*QueryGetAllBatchesResponse, error) {
	out := new(QueryGetAllBatchesResponse)
	err := c.cc.Invoke(ctx, Query_GetAllBatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of CheckMonikerAvailability items.
	CheckMonikerAvailability(context.Context, *QueryCheckMonikerAvailabilityRequest) (*QueryCheckMonikerAvailabilityResponse, error)
	// Queries a list of GetRollupInfo items.
	GetRollupInfo(context.Context, *QueryGetRollupInfoRequest) (*QueryGetRollupInfoResponse, error)
	// Queries a list of GetRollups items.
	GetRollups(context.Context, *QueryGetRollupsRequest) (*QueryGetRollupsResponse, error)
	// Queries a list of GetRollupByMoniker items.
	GetRollupByMoniker(context.Context, *QueryGetRollupByMonikerRequest) (*QueryGetRollupByMonikerResponse, error)
	// Queries a list of GetBatchInfo items.
	GetBatchInfo(context.Context, *QueryGetBatchInfoRequest) (*QueryGetBatchInfoResponse, error)
	// Queries a list of GetAllBatches items.
	GetAllBatches(context.Context, *QueryGetAllBatchesRequest) (*QueryGetAllBatchesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) CheckMonikerAvailability(context.Context, *QueryCheckMonikerAvailabilityRequest) (*QueryCheckMonikerAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMonikerAvailability not implemented")
}
func (UnimplementedQueryServer) GetRollupInfo(context.Context, *QueryGetRollupInfoRequest) (*QueryGetRollupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollupInfo not implemented")
}
func (UnimplementedQueryServer) GetRollups(context.Context, *QueryGetRollupsRequest) (*QueryGetRollupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollups not implemented")
}
func (UnimplementedQueryServer) GetRollupByMoniker(context.Context, *QueryGetRollupByMonikerRequest) (*QueryGetRollupByMonikerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollupByMoniker not implemented")
}
func (UnimplementedQueryServer) GetBatchInfo(context.Context, *QueryGetBatchInfoRequest) (*QueryGetBatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchInfo not implemented")
}
func (UnimplementedQueryServer) GetAllBatches(context.Context, *QueryGetAllBatchesRequest) (*QueryGetAllBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBatches not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckMonikerAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckMonikerAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckMonikerAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckMonikerAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckMonikerAvailability(ctx, req.(*QueryCheckMonikerAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRollupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollupInfo(ctx, req.(*QueryGetRollupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRollups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollups(ctx, req.(*QueryGetRollupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRollupByMoniker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRollupByMonikerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRollupByMoniker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRollupByMoniker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRollupByMoniker(ctx, req.(*QueryGetRollupByMonikerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBatchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBatchInfo(ctx, req.(*QueryGetBatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAllBatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBatches(ctx, req.(*QueryGetAllBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "junction.rollup.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CheckMonikerAvailability",
			Handler:    _Query_CheckMonikerAvailability_Handler,
		},
		{
			MethodName: "GetRollupInfo",
			Handler:    _Query_GetRollupInfo_Handler,
		},
		{
			MethodName: "GetRollups",
			Handler:    _Query_GetRollups_Handler,
		},
		{
			MethodName: "GetRollupByMoniker",
			Handler:    _Query_GetRollupByMoniker_Handler,
		},
		{
			MethodName: "GetBatchInfo",
			Handler:    _Query_GetBatchInfo_Handler,
		},
		{
			MethodName: "GetAllBatches",
			Handler:    _Query_GetAllBatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/rollup/query.proto",
}
