// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: junction/rollup/tx.proto

package rollup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName        = "/junction.rollup.Msg/UpdateParams"
	Msg_InitRollup_FullMethodName          = "/junction.rollup.Msg/InitRollup"
	Msg_InitProver_FullMethodName          = "/junction.rollup.Msg/InitProver"
	Msg_SubmitBatchMetadata_FullMethodName = "/junction.rollup.Msg/SubmitBatchMetadata"
	Msg_SubmitBatch_FullMethodName         = "/junction.rollup.Msg/SubmitBatch"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	InitRollup(ctx context.Context, in *MsgInitRollup, opts ...grpc.CallOption) (*MsgInitRollupResponse, error)
	InitProver(ctx context.Context, in *MsgInitProver, opts ...grpc.CallOption) (*MsgInitProverResponse, error)
	SubmitBatchMetadata(ctx context.Context, in *MsgSubmitBatchMetadata, opts ...grpc.CallOption) (*MsgSubmitBatchMetadataResponse, error)
	SubmitBatch(ctx context.Context, in *MsgSubmitBatch, opts ...grpc.CallOption) (*MsgSubmitBatchResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitRollup(ctx context.Context, in *MsgInitRollup, opts ...grpc.CallOption) (*MsgInitRollupResponse, error) {
	out := new(MsgInitRollupResponse)
	err := c.cc.Invoke(ctx, Msg_InitRollup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitProver(ctx context.Context, in *MsgInitProver, opts ...grpc.CallOption) (*MsgInitProverResponse, error) {
	out := new(MsgInitProverResponse)
	err := c.cc.Invoke(ctx, Msg_InitProver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBatchMetadata(ctx context.Context, in *MsgSubmitBatchMetadata, opts ...grpc.CallOption) (*MsgSubmitBatchMetadataResponse, error) {
	out := new(MsgSubmitBatchMetadataResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitBatchMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBatch(ctx context.Context, in *MsgSubmitBatch, opts ...grpc.CallOption) (*MsgSubmitBatchResponse, error) {
	out := new(MsgSubmitBatchResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	InitRollup(context.Context, *MsgInitRollup) (*MsgInitRollupResponse, error)
	InitProver(context.Context, *MsgInitProver) (*MsgInitProverResponse, error)
	SubmitBatchMetadata(context.Context, *MsgSubmitBatchMetadata) (*MsgSubmitBatchMetadataResponse, error)
	SubmitBatch(context.Context, *MsgSubmitBatch) (*MsgSubmitBatchResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) InitRollup(context.Context, *MsgInitRollup) (*MsgInitRollupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRollup not implemented")
}
func (UnimplementedMsgServer) InitProver(context.Context, *MsgInitProver) (*MsgInitProverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProver not implemented")
}
func (UnimplementedMsgServer) SubmitBatchMetadata(context.Context, *MsgSubmitBatchMetadata) (*MsgSubmitBatchMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatchMetadata not implemented")
}
func (UnimplementedMsgServer) SubmitBatch(context.Context, *MsgSubmitBatch) (*MsgSubmitBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatch not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitRollup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitRollup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitRollup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitRollup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitRollup(ctx, req.(*MsgInitRollup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitProver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitProver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitProver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitProver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitProver(ctx, req.(*MsgInitProver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBatchMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBatchMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBatchMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitBatchMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBatchMetadata(ctx, req.(*MsgSubmitBatchMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBatch(ctx, req.(*MsgSubmitBatch))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "junction.rollup.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "InitRollup",
			Handler:    _Msg_InitRollup_Handler,
		},
		{
			MethodName: "InitProver",
			Handler:    _Msg_InitProver_Handler,
		},
		{
			MethodName: "SubmitBatchMetadata",
			Handler:    _Msg_SubmitBatchMetadata_Handler,
		},
		{
			MethodName: "SubmitBatch",
			Handler:    _Msg_SubmitBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/rollup/tx.proto",
}
