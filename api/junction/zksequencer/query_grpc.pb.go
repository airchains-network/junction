// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: junction/zksequencer/query.proto

package zksequencer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName           = "/junction.zksequencer.Query/Params"
	Query_College_FullMethodName          = "/junction.zksequencer.Query/College"
	Query_CollegeAll_FullMethodName       = "/junction.zksequencer.Query/CollegeAll"
	Query_QueryVrfStudent_FullMethodName  = "/junction.zksequencer.Query/QueryVrfStudent"
	Query_QueryVrfStudent2_FullMethodName = "/junction.zksequencer.Query/QueryVrfStudent2"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of College items.
	College(ctx context.Context, in *QueryGetCollegeRequest, opts ...grpc.CallOption) (*QueryGetCollegeResponse, error)
	CollegeAll(ctx context.Context, in *QueryAllCollegeRequest, opts ...grpc.CallOption) (*QueryAllCollegeResponse, error)
	// Queries a list of QueryVrfStudent items.
	QueryVrfStudent(ctx context.Context, in *QueryQueryVrfStudentRequest, opts ...grpc.CallOption) (*QueryQueryVrfStudentResponse, error)
	// Queries a list of QueryVrfStudent2 items.
	QueryVrfStudent2(ctx context.Context, in *QueryQueryVrfStudent2Request, opts ...grpc.CallOption) (*QueryQueryVrfStudent2Response, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) College(ctx context.Context, in *QueryGetCollegeRequest, opts ...grpc.CallOption) (*QueryGetCollegeResponse, error) {
	out := new(QueryGetCollegeResponse)
	err := c.cc.Invoke(ctx, Query_College_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollegeAll(ctx context.Context, in *QueryAllCollegeRequest, opts ...grpc.CallOption) (*QueryAllCollegeResponse, error) {
	out := new(QueryAllCollegeResponse)
	err := c.cc.Invoke(ctx, Query_CollegeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVrfStudent(ctx context.Context, in *QueryQueryVrfStudentRequest, opts ...grpc.CallOption) (*QueryQueryVrfStudentResponse, error) {
	out := new(QueryQueryVrfStudentResponse)
	err := c.cc.Invoke(ctx, Query_QueryVrfStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVrfStudent2(ctx context.Context, in *QueryQueryVrfStudent2Request, opts ...grpc.CallOption) (*QueryQueryVrfStudent2Response, error) {
	out := new(QueryQueryVrfStudent2Response)
	err := c.cc.Invoke(ctx, Query_QueryVrfStudent2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of College items.
	College(context.Context, *QueryGetCollegeRequest) (*QueryGetCollegeResponse, error)
	CollegeAll(context.Context, *QueryAllCollegeRequest) (*QueryAllCollegeResponse, error)
	// Queries a list of QueryVrfStudent items.
	QueryVrfStudent(context.Context, *QueryQueryVrfStudentRequest) (*QueryQueryVrfStudentResponse, error)
	// Queries a list of QueryVrfStudent2 items.
	QueryVrfStudent2(context.Context, *QueryQueryVrfStudent2Request) (*QueryQueryVrfStudent2Response, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) College(context.Context, *QueryGetCollegeRequest) (*QueryGetCollegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method College not implemented")
}
func (UnimplementedQueryServer) CollegeAll(context.Context, *QueryAllCollegeRequest) (*QueryAllCollegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollegeAll not implemented")
}
func (UnimplementedQueryServer) QueryVrfStudent(context.Context, *QueryQueryVrfStudentRequest) (*QueryQueryVrfStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVrfStudent not implemented")
}
func (UnimplementedQueryServer) QueryVrfStudent2(context.Context, *QueryQueryVrfStudent2Request) (*QueryQueryVrfStudent2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVrfStudent2 not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_College_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCollegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).College(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_College_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).College(ctx, req.(*QueryGetCollegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollegeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollegeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollegeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollegeAll(ctx, req.(*QueryAllCollegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVrfStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryVrfStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVrfStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryVrfStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVrfStudent(ctx, req.(*QueryQueryVrfStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVrfStudent2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryVrfStudent2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVrfStudent2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryVrfStudent2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVrfStudent2(ctx, req.(*QueryQueryVrfStudent2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "junction.zksequencer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "College",
			Handler:    _Query_College_Handler,
		},
		{
			MethodName: "CollegeAll",
			Handler:    _Query_CollegeAll_Handler,
		},
		{
			MethodName: "QueryVrfStudent",
			Handler:    _Query_QueryVrfStudent_Handler,
		},
		{
			MethodName: "QueryVrfStudent2",
			Handler:    _Query_QueryVrfStudent2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junction/zksequencer/query.proto",
}
