syntax = "proto3";

package junction.trackgate;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "junction/trackgate/params.proto";
import "junction/trackgate/ext_sequencer_check.proto";

option go_package = "github.com/airchains-network/junction/x/trackgate/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams   (MsgUpdateParams  ) returns (MsgUpdateParamsResponse  );
  rpc InitStation    (MsgInitStation   ) returns (MsgInitStationResponse   );
  rpc SchemaCreation (MsgSchemaCreation) returns (MsgSchemaCreationResponse);
  rpc SchemaEngage   (MsgSchemaEngage  ) returns (MsgSchemaEngageResponse  );
  rpc MigrateSchema  (MsgMigrateSchema ) returns (MsgMigrateSchemaResponse );
  rpc AuditSequencer (MsgAuditSequencer) returns (MsgAuditSequencerResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                            "authority";
  option           (amino.name) = "junction/x/trackgate/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgInitStation {
  option (cosmos.msg.v1.signer) = "submitter";
           string submitter   = 1;
           string stationId   = 2;
           bytes  stationInfo = 3;
  repeated string operators   = 4;
}

message MsgInitStationResponse {
  bool status = 1;
}

message MsgSchemaCreation {
  option (cosmos.msg.v1.signer) = "creator";
  string creator           = 1;
  string extTrackStationId = 2;
  string version           = 3;
  bytes  schema            = 4;
}

message MsgSchemaCreationResponse {
  string schemaKey = 1;
  bool   status    = 2;
}

message MsgSchemaEngage {
  option (cosmos.msg.v1.signer) = "operator";
  string operator            = 1;
  string extTrackStationId   = 2;
  bytes  schemaObject        = 4;
  string acknowledgementHash = 5;
  uint64 podNumber           = 6;
  bytes  sequencerDetails    = 7;
}

message MsgSchemaEngageResponse {
  bool status = 1;
}

message MsgMigrateSchema {
  option (cosmos.msg.v1.signer) = "operator";
  string operator          = 1;
  string extTrackStationId = 2;
  string newSchemaKey      = 3;
}

message MsgMigrateSchemaResponse {
  bool   status      = 1;
  string description = 2;
}

message MsgAuditSequencer {
  option (cosmos.msg.v1.signer) = "verifier";
  string verifier        = 1;
  repeated ExtSequencerCheck sequencerChecks = 2 [(gogoproto.nullable) = false];
}

message MsgAuditSequencerResponse {
  bool   status      = 1;
  string description = 2;
}

