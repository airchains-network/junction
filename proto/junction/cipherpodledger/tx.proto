syntax = "proto3";

package junction.cipherpodledger;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "junction/cipherpodledger/params.proto";

option go_package = "github.com/airchains-network/junction/x/cipherpodledger/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc RegisterFhvm (MsgRegisterFhvm) returns (MsgRegisterFhvmResponse);
  rpc SubmitPod    (MsgSubmitPod   ) returns (MsgSubmitPodResponse   );
  rpc VerifyPod    (MsgVerifyPod   ) returns (MsgVerifyPodResponse   );
  rpc LogBlobData  (MsgLogBlobData ) returns (MsgLogBlobDataResponse );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                  "authority";
  option           (amino.name) = "junction/x/cipherpodledger/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgRegisterFhvm {
  option (cosmos.msg.v1.signer) = "creator";
  string creator                       =  1;
  string chainId                       =  2;
  string chainName                     =  3;
  string proofType                     =  4;
  bytes  provingNetworkVerificationKey =  5;
  string daProvider                    =  6;
  string daBlobId                      =  7;
  string relayerGaddress               =  8;
  string relayerAscAddress             =  9;
  string picContractAddress            = 10;
  string aclContractAddress            = 11;
  string tfheExecutorContractAddress   = 12;
  string kmsVerifierContractAddress    = 13;
  string gatewayContractAddress        = 14;
  string ascChildContractAddress       = 15;
}

message MsgRegisterFhvmResponse {
  bool status = 1;
}

message MsgSubmitPod {
  option (cosmos.msg.v1.signer) = "submittedBy";
  string submittedBy             = 1;
  string ascChildContractAddress = 2;
  uint64 podNumber               = 3;
  string stationId               = 4;
  string daBlobId                = 5;
  int32  timestamp               = 6;
  string provingNetwork          = 7;
  bytes  zkFhepublicWitness      = 9;
}

message MsgSubmitPodResponse {
  bool status = 1;
}

message MsgVerifyPod {
  option (cosmos.msg.v1.signer) = "submittedBy";
  string submittedBy    = 1;
  string stationId      = 2;
  uint64 podNumber      = 3;
  string provingNetwork = 4;
  bytes  zkFheproof     = 5;
}

message MsgVerifyPodResponse {
  bool status = 1;
}

message MsgLogBlobData {
  option (cosmos.msg.v1.signer) = "creator";
           string creator   = 1;
           string stationId = 2;
           bytes podBundle = 3;
           string daProvider = 4;
           repeated uint64 podRange  = 5;
}

message MsgLogBlobDataResponse {
  bool status = 1;
}

